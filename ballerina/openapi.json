{
  "openapi": "3.0.0",
  "info": {
    "title": "Discord HTTP API (Preview)",
    "description": "Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.",
    "contact": {},
    "version": "10"
  },
  "servers": [
    {
      "url": "https://discord.com/api/v10",
      "variables": {}
    },
    {
      "url": "discord.com/oauth2",
      "variables": {}
    },
    {
      "url": "https://discord.com/api/oauth2",
      "variables": {}
    }
  ],
  "paths": {
    "/oauth2/applications/@me": {
      "get": {
        "summary": "get_my_oauth2_application",
        "description": "",
        "operationId": "get_my_oauth2_application",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for get_my_oauth2_application",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateApplicationResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/users/@me/connections": {
      "get": {
        "summary": "list_my_connections",
        "description": "",
        "operationId": "list_my_connections",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for list_my_connections",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectedAccountResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "connections"
            ]
          }
        ]
      }
    },
    "/users/@me/channels": {
      "post": {
        "summary": "create_dm",
        "description": "",
        "operationId": "create_dm",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrivateChannelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_dm",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PrivateChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateGroupChannelResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "dm_channels.read",
              "voice"
            ]
          }
        ]
      }
    },
    "/users/@me/guilds": {
      "get": {
        "summary": "list_my_guilds",
        "description": "",
        "operationId": "list_my_guilds",
        "parameters": [
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "with_counts",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_my_guilds",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyGuildResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "guilds"
            ]
          }
        ]
      }
    },
    "/applications/@me": {
      "get": {
        "summary": "get_my_application",
        "description": "",
        "operationId": "get_my_application",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for get_my_application",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateApplicationResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_my_application",
        "description": "",
        "operationId": "update_my_application",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationFormPartial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_my_application",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateApplicationResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/gateway/bot": {
      "get": {
        "summary": "get_bot_gateway",
        "description": "",
        "operationId": "get_bot_gateway",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for get_bot_gateway",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayBotResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/oauth2/keys": {
      "get": {
        "summary": "get_public_keys",
        "description": "",
        "operationId": "get_public_keys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for get_public_keys",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2GetKeys"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/oauth2/@me": {
      "get": {
        "summary": "get_my_oauth2_authorization",
        "description": "",
        "operationId": "get_my_oauth2_authorization",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for get_my_oauth2_authorization",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2GetAuthorizationResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "activities.read",
              "activities.write",
              "applications.builds.read",
              "applications.builds.upload",
              "applications.commands",
              "applications.commands.permissions.update",
              "applications.commands.update",
              "applications.entitlements",
              "applications.store.update",
              "bot",
              "connections",
              "dm_channels.read",
              "email",
              "gdm.join",
              "guilds",
              "guilds.join",
              "guilds.members.read",
              "identify",
              "messages.read",
              "openid",
              "relationships.read",
              "role_connections.write",
              "rpc",
              "rpc.activities.write",
              "rpc.notifications.read",
              "rpc.screenshare.read",
              "rpc.screenshare.write",
              "rpc.video.read",
              "rpc.video.write",
              "rpc.voice.read",
              "rpc.voice.write",
              "voice",
              "webhook.incoming"
            ]
          }
        ]
      }
    },
    "/voice/regions": {
      "get": {
        "summary": "list_voice_regions",
        "description": "",
        "operationId": "list_voice_regions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for list_voice_regions",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceRegionResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/users/@me": {
      "get": {
        "summary": "get_my_user",
        "description": "",
        "operationId": "get_my_user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for get_my_user",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPIIResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "identify"
            ]
          }
        ]
      },
      "patch": {
        "summary": "update_my_user",
        "description": "",
        "operationId": "update_my_user",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotAccountPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_my_user",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPIIResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/stage-instances": {
      "post": {
        "summary": "create_stage_instance",
        "description": "",
        "operationId": "create_stage_instance",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StageInstancesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_stage_instance",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageInstanceResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/sticker-packs": {
      "get": {
        "summary": "list_sticker_packs",
        "description": "",
        "operationId": "list_sticker_packs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for list_sticker_packs",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickerPackCollectionResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/gateway": {
      "get": {
        "summary": "get_gateway",
        "description": "",
        "operationId": "get_gateway",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response for get_gateway",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds": {
      "post": {
        "summary": "create_guild",
        "description": "",
        "operationId": "create_guild",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for create_guild",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/users/@me/threads/archived/private": {
      "get": {
        "summary": "list_my_private_archived_threads",
        "description": "",
        "operationId": "list_my_private_archived_threads",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 2.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_my_private_archived_threads",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/applications/{application_id}/guilds/{guild_id}/commands/permissions": {
      "get": {
        "summary": "list_guild_application_command_permissions",
        "description": "",
        "operationId": "list_guild_application_command_permissions",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_application_command_permissions",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandPermissionsResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.permissions.update"
            ]
          }
        ]
      }
    },
    "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions": {
      "get": {
        "summary": "get_guild_application_command_permissions",
        "description": "",
        "operationId": "get_guild_application_command_permissions",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_application_command_permissions",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandPermissionsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.permissions.update"
            ]
          }
        ]
      },
      "put": {
        "summary": "set_guild_application_command_permissions",
        "description": "",
        "operationId": "set_guild_application_command_permissions",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationsGuildsCommandsCommandIdPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for set_guild_application_command_permissions",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandPermissionsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.permissions.update"
            ]
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/@me": {
      "put": {
        "summary": "add_my_message_reaction",
        "description": "",
        "operationId": "add_my_message_reaction",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_name",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for add_my_message_reaction",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_my_message_reaction",
        "description": "",
        "operationId": "delete_my_message_reaction",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_name",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_my_message_reaction",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/threads/archived/private": {
      "get": {
        "summary": "list_private_archived_threads",
        "description": "",
        "operationId": "list_private_archived_threads",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 2.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_private_archived_threads",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/threads/archived/public": {
      "get": {
        "summary": "list_public_archived_threads",
        "description": "",
        "operationId": "list_public_archived_threads",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 2.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_public_archived_threads",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/users/@me/applications/{application_id}/role-connection": {
      "get": {
        "summary": "get_application_user_role_connection",
        "description": "",
        "operationId": "get_application_user_role_connection",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_application_user_role_connection",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserRoleConnectionResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "OAuth2": [
              "role_connections.write"
            ]
          }
        ]
      },
      "put": {
        "summary": "update_application_user_role_connection",
        "description": "",
        "operationId": "update_application_user_role_connection",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersMeApplicationsRoleConnectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_application_user_role_connection",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserRoleConnectionResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "OAuth2": [
              "role_connections.write"
            ]
          }
        ]
      }
    },
    "/users/@me/guilds/{guild_id}/member": {
      "get": {
        "summary": "get_my_guild_member",
        "description": "",
        "operationId": "get_my_guild_member",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_my_guild_member",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateGuildMemberResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "OAuth2": [
              "guilds.members.read"
            ]
          }
        ]
      }
    },
    "/applications/{application_id}/role-connections/metadata": {
      "get": {
        "summary": "get_application_role_connections_metadata",
        "description": "",
        "operationId": "get_application_role_connections_metadata",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_application_role_connections_metadata",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationRoleConnectionsMetadataItemResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "put": {
        "summary": "update_application_role_connections_metadata",
        "description": "",
        "operationId": "update_application_role_connections_metadata",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationRoleConnectionsMetadataItemRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_application_role_connections_metadata",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationRoleConnectionsMetadataItemResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/applications/{application_id}/entitlements/{entitlement_id}/consume": {
      "post": {
        "summary": "consume_entitlement",
        "description": "",
        "operationId": "consume_entitlement",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "entitlement_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for consume_entitlement",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.entitlements"
            ]
          }
        ]
      }
    },
    "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}": {
      "get": {
        "summary": "get_guild_application_command",
        "description": "",
        "operationId": "get_guild_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "delete": {
        "summary": "delete_guild_application_command",
        "description": "",
        "operationId": "delete_guild_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_application_command",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "patch": {
        "summary": "update_guild_application_command",
        "description": "",
        "operationId": "update_guild_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCommandPatchRequestPartial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      }
    },
    "/applications/{application_id}/guilds/{guild_id}/commands": {
      "get": {
        "summary": "list_guild_application_commands",
        "description": "",
        "operationId": "list_guild_application_commands",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_localizations",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_application_commands",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationCommandResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "put": {
        "summary": "bulk_set_guild_application_commands",
        "description": "",
        "operationId": "bulk_set_guild_application_commands",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "maxItems": 110,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationCommandUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for bulk_set_guild_application_commands",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationCommandResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "post": {
        "summary": "create_guild_application_command",
        "description": "",
        "operationId": "create_guild_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCommandCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_guild_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "201": {
            "description": "201 response for create_guild_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      }
    },
    "/channels/{channel_id}/thread-members/@me": {
      "put": {
        "summary": "join_thread",
        "description": "",
        "operationId": "join_thread",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for join_thread",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "leave_thread",
        "description": "",
        "operationId": "leave_thread",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for leave_thread",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/bulk-delete": {
      "post": {
        "summary": "bulk_delete_messages",
        "description": "",
        "operationId": "bulk_delete_messages",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelsMessagesBulkDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for bulk_delete_messages",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/{user_id}": {
      "delete": {
        "summary": "delete_user_message_reaction",
        "description": "",
        "operationId": "delete_user_message_reaction",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_name",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_user_message_reaction",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}": {
      "get": {
        "summary": "list_message_reactions_by_emoji",
        "description": "",
        "operationId": "list_message_reactions_by_emoji",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_name",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_message_reactions_by_emoji",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_all_message_reactions_by_emoji",
        "description": "",
        "operationId": "delete_all_message_reactions_by_emoji",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_name",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_all_message_reactions_by_emoji",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/{message_id}/reactions": {
      "delete": {
        "summary": "delete_all_message_reactions",
        "description": "",
        "operationId": "delete_all_message_reactions",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_all_message_reactions",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/{message_id}/crosspost": {
      "post": {
        "summary": "crosspost_message",
        "description": "",
        "operationId": "crosspost_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for crosspost_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/{message_id}/threads": {
      "post": {
        "summary": "create_thread_from_message",
        "description": "",
        "operationId": "create_thread_from_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTextThreadWithMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for create_thread_from_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/webhooks/{webhook_id}/{webhook_token}/messages/@original": {
      "get": {
        "summary": "get_original_webhook_message",
        "description": "",
        "operationId": "get_original_webhook_message",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_original_webhook_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_original_webhook_message",
        "description": "",
        "operationId": "delete_original_webhook_message",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_original_webhook_message",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_original_webhook_message",
        "description": "",
        "operationId": "update_original_webhook_message",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/x-www-form-urlencoded"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "maxLength": 2000,
                    "type": "string",
                    "nullable": true
                  },
                  "embeds": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RichEmbed"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "allowed_mentions": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "components": {
                    "maxItems": 5,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ActionRow"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "attachments": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageAttachmentRequest"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "flags": {
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "200 response for update_original_webhook_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}/users": {
      "get": {
        "summary": "list_guild_scheduled_event_users",
        "description": "",
        "operationId": "list_guild_scheduled_event_users",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_scheduled_event_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_member",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_scheduled_event_users",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEventUserResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/auto-moderation/rules/{rule_id}": {
      "get": {
        "summary": "get_auto_moderation_rule",
        "description": "",
        "operationId": "get_auto_moderation_rule",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_auto_moderation_rule",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DefaultKeywordRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/KeywordRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MLSpamRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MentionSpamRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/SpamLinkRuleResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_auto_moderation_rule",
        "description": "",
        "operationId": "delete_auto_moderation_rule",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_auto_moderation_rule",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_auto_moderation_rule",
        "description": "",
        "operationId": "update_auto_moderation_rule",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/DefaultKeywordListUpsertRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/KeywordUpsertRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/MLSpamUpsertRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/MentionSpamUpsertRequestPartial"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_auto_moderation_rule",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DefaultKeywordRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/KeywordRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MLSpamRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MentionSpamRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/SpamLinkRuleResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/auto-moderation/rules": {
      "get": {
        "summary": "list_auto_moderation_rules",
        "description": "",
        "operationId": "list_auto_moderation_rules",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_auto_moderation_rules",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DefaultKeywordRuleResponse"
                      },
                      {
                        "$ref": "#/components/schemas/KeywordRuleResponse"
                      },
                      {
                        "$ref": "#/components/schemas/MLSpamRuleResponse"
                      },
                      {
                        "$ref": "#/components/schemas/MentionSpamRuleResponse"
                      },
                      {
                        "$ref": "#/components/schemas/SpamLinkRuleResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_auto_moderation_rule",
        "description": "",
        "operationId": "create_auto_moderation_rule",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DefaultKeywordListUpsertRequest"
                  },
                  {
                    "$ref": "#/components/schemas/KeywordUpsertRequest"
                  },
                  {
                    "$ref": "#/components/schemas/MLSpamUpsertRequest"
                  },
                  {
                    "$ref": "#/components/schemas/MentionSpamUpsertRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_auto_moderation_rule",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DefaultKeywordRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/KeywordRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MLSpamRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MentionSpamRuleResponse"
                    },
                    {
                      "$ref": "#/components/schemas/SpamLinkRuleResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/voice-states/@me": {
      "patch": {
        "summary": "update_self_voice_state",
        "description": "",
        "operationId": "update_self_voice_state",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsVoiceStatesMeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for update_self_voice_state",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/members/search": {
      "get": {
        "summary": "search_guild_members",
        "description": "",
        "operationId": "search_guild_members",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1000.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for search_guild_members",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuildMemberResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/threads/active": {
      "get": {
        "summary": "get_active_guild_threads",
        "description": "",
        "operationId": "get_active_guild_threads",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_active_guild_threads",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/members/@me": {
      "patch": {
        "summary": "update_my_guild_member",
        "description": "",
        "operationId": "update_my_guild_member",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsMembersMeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_my_guild_member",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateGuildMemberResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/members/{user_id}/roles/{role_id}": {
      "put": {
        "summary": "add_guild_member_role",
        "description": "",
        "operationId": "add_guild_member_role",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for add_guild_member_role",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_guild_member_role",
        "description": "",
        "operationId": "delete_guild_member_role",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_member_role",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/users/@me/guilds/{guild_id}": {
      "delete": {
        "summary": "leave_guild",
        "description": "",
        "operationId": "leave_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for leave_guild",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/applications/{application_id}/entitlements/{entitlement_id}": {
      "get": {
        "summary": "get_entitlement",
        "description": "",
        "operationId": "get_entitlement",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "entitlement_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_entitlement",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.entitlements"
            ]
          }
        ]
      },
      "delete": {
        "summary": "delete_entitlement",
        "description": "",
        "operationId": "delete_entitlement",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "entitlement_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_entitlement",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.entitlements"
            ]
          }
        ]
      }
    },
    "/applications/{application_id}/entitlements": {
      "get": {
        "summary": "get_entitlements",
        "description": "",
        "operationId": "get_entitlements",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "sku_ids",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "maxItems": 100,
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "pattern": "^(0|[1-9][0-9]*)$",
                    "oneOf": [
                      {
                        "pattern": "^(0|[1-9][0-9]*)$",
                        "type": "string"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "guild_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exclude_ended",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "only_active",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_entitlements",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EntitlementResponse"
                      }
                    ]
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.entitlements"
            ]
          }
        ]
      },
      "post": {
        "summary": "create_entitlement",
        "description": "",
        "operationId": "create_entitlement",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntitlementRequestData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_entitlement",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/applications/{application_id}/commands/{command_id}": {
      "get": {
        "summary": "get_application_command",
        "description": "",
        "operationId": "get_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "delete": {
        "summary": "delete_application_command",
        "description": "",
        "operationId": "delete_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_application_command",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "patch": {
        "summary": "update_application_command",
        "description": "",
        "operationId": "update_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCommandPatchRequestPartial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      }
    },
    "/applications/{application_id}/commands": {
      "get": {
        "summary": "list_application_commands",
        "description": "",
        "operationId": "list_application_commands",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_localizations",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_application_commands",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationCommandResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "put": {
        "summary": "bulk_set_application_commands",
        "description": "",
        "operationId": "bulk_set_application_commands",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "maxItems": 110,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationCommandUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for bulk_set_application_commands",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationCommandResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      },
      "post": {
        "summary": "create_application_command",
        "description": "",
        "operationId": "create_application_command",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCommandCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "201": {
            "description": "201 response for create_application_command",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCommandResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          },
          {
            "OAuth2": [
              "applications.commands.update"
            ]
          }
        ]
      }
    },
    "/interactions/{interaction_id}/{interaction_token}/callback": {
      "post": {
        "summary": "create_interaction_response",
        "description": "",
        "operationId": "create_interaction_response",
        "parameters": [
          {
            "name": "interaction_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "interaction_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationCommandAutocompleteCallbackRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateMessageInteractionCallbackRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ModalInteractionCallbackRequest"
                  },
                  {
                    "$ref": "#/components/schemas/PongInteractionCallbackRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateMessageInteractionCallbackRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for create_interaction_response",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/thread-members/{user_id}": {
      "get": {
        "summary": "get_thread_member",
        "description": "",
        "operationId": "get_thread_member",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_member",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_thread_member",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadMemberResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "put": {
        "summary": "add_thread_member",
        "description": "",
        "operationId": "add_thread_member",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for add_thread_member",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_thread_member",
        "description": "",
        "operationId": "delete_thread_member",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_thread_member",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/thread-members": {
      "get": {
        "summary": "list_thread_members",
        "description": "",
        "operationId": "list_thread_members",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_member",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_thread_members",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThreadMemberResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/permissions/{overwrite_id}": {
      "put": {
        "summary": "set_channel_permission_overwrite",
        "description": "",
        "operationId": "set_channel_permission_overwrite",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "overwrite_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelsPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for set_channel_permission_overwrite",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_channel_permission_overwrite",
        "description": "",
        "operationId": "delete_channel_permission_overwrite",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "overwrite_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_channel_permission_overwrite",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/recipients/{user_id}": {
      "put": {
        "summary": "add_group_dm_user",
        "description": "",
        "operationId": "add_group_dm_user",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelsRecipientsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for add_group_dm_user",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PrivateChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateGroupChannelResponse"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "204 response for add_group_dm_user",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_group_dm_user",
        "description": "",
        "operationId": "delete_group_dm_user",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_group_dm_user",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/followers": {
      "post": {
        "summary": "follow_channel",
        "description": "",
        "operationId": "follow_channel",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelsFollowersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for follow_channel",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelFollowerResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages/{message_id}": {
      "get": {
        "summary": "get_message",
        "description": "",
        "operationId": "get_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_message",
        "description": "",
        "operationId": "delete_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_message",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_message",
        "description": "",
        "operationId": "update_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/x-www-form-urlencoded"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "maxLength": 4000,
                    "type": "string",
                    "nullable": true
                  },
                  "embeds": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RichEmbed"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "flags": {
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  },
                  "allowed_mentions": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "sticker_ids": {
                    "maxItems": 1521,
                    "type": "array",
                    "items": {
                      "pattern": "^(0|[1-9][0-9]*)$",
                      "type": "string"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "components": {
                    "maxItems": 5,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ActionRow"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "attachments": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageAttachmentRequest"
                    },
                    "description": "",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "200 response for update_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/messages": {
      "get": {
        "summary": "list_messages",
        "description": "",
        "operationId": "list_messages",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "around",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_messages",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_message",
        "description": "",
        "operationId": "create_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/x-www-form-urlencoded"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "maxLength": 4000,
                    "type": "string",
                    "nullable": true
                  },
                  "embeds": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RichEmbed"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "allowed_mentions": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "sticker_ids": {
                    "maxItems": 3,
                    "type": "array",
                    "items": {
                      "pattern": "^(0|[1-9][0-9]*)$",
                      "type": "string"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "components": {
                    "maxItems": 5,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ActionRow"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "flags": {
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  },
                  "attachments": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageAttachmentRequest"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "message_reference": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageReferenceRequest"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "nonce": {
                    "oneOf": [
                      {
                        "maximum": 9.2233720368547758E+18,
                        "minimum": -9.2233720368547758E+18,
                        "type": "integer",
                        "format": "int64"
                      },
                      {
                        "maxLength": 25,
                        "type": "string"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "tts": {
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "200 response for create_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/webhooks": {
      "get": {
        "summary": "list_channel_webhooks",
        "description": "",
        "operationId": "list_channel_webhooks",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_channel_webhooks",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationIncomingWebhookResponse"
                      },
                      {
                        "$ref": "#/components/schemas/ChannelFollowerWebhookResponse"
                      },
                      {
                        "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_webhook",
        "description": "",
        "operationId": "create_webhook",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelsWebhooksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_webhook",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/invites": {
      "get": {
        "summary": "list_channel_invites",
        "description": "",
        "operationId": "list_channel_invites",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_channel_invites",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/FriendInviteResponse"
                      },
                      {
                        "$ref": "#/components/schemas/GroupDMInviteResponse"
                      },
                      {
                        "$ref": "#/components/schemas/GuildInviteResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_channel_invite",
        "description": "",
        "operationId": "create_channel_invite",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CreateGroupDMInviteRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateGuildInviteRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_channel_invite",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FriendInviteResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GroupDMInviteResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GuildInviteResponse"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "204 response for create_channel_invite",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/threads": {
      "post": {
        "summary": "create_thread",
        "description": "",
        "operationId": "create_thread",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CreateForumThreadRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateTextThreadWithoutMessageRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for create_thread",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedThreadResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/typing": {
      "post": {
        "summary": "trigger_typing_indicator",
        "description": "",
        "operationId": "trigger_typing_indicator",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for trigger_typing_indicator",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "204 response for trigger_typing_indicator",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/pins/{message_id}": {
      "put": {
        "summary": "pin_message",
        "description": "",
        "operationId": "pin_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for pin_message",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "unpin_message",
        "description": "",
        "operationId": "unpin_message",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for unpin_message",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}/pins": {
      "get": {
        "summary": "list_pinned_messages",
        "description": "",
        "operationId": "list_pinned_messages",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_pinned_messages",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}": {
      "get": {
        "summary": "get_webhook_message",
        "description": "",
        "operationId": "get_webhook_message",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_webhook_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_webhook_message",
        "description": "",
        "operationId": "delete_webhook_message",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_webhook_message",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_webhook_message",
        "description": "",
        "operationId": "update_webhook_message",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/x-www-form-urlencoded"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "maxLength": 2000,
                    "type": "string",
                    "nullable": true
                  },
                  "embeds": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RichEmbed"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "allowed_mentions": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "components": {
                    "maxItems": 5,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ActionRow"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "attachments": {
                    "maxItems": 10,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageAttachmentRequest"
                    },
                    "description": "",
                    "nullable": true
                  },
                  "flags": {
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "200 response for update_webhook_message",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/webhooks/{webhook_id}/{webhook_token}/github": {
      "post": {
        "summary": "execute_github_compatible_webhook",
        "description": "",
        "operationId": "execute_github_compatible_webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GithubWebhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for execute_github_compatible_webhook",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/webhooks/{webhook_id}/{webhook_token}/slack": {
      "post": {
        "summary": "execute_slack_compatible_webhook",
        "description": "",
        "operationId": "execute_slack_compatible_webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/x-www-form-urlencoded"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "maxLength": 2000,
                    "type": "string",
                    "nullable": true
                  },
                  "username": {
                    "maxLength": 152133,
                    "type": "string",
                    "nullable": true
                  },
                  "icon_url": {
                    "maxLength": 2048,
                    "type": "string",
                    "nullable": true
                  },
                  "attachments": {
                    "maxItems": 1521,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WebhookSlackEmbed"
                    },
                    "description": "",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "200 response for execute_slack_compatible_webhook",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/templates/{code}": {
      "get": {
        "summary": "get_guild_template",
        "description": "",
        "operationId": "get_guild_template",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_template",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildTemplateResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_guild_from_template",
        "description": "",
        "operationId": "create_guild_from_template",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsTemplatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for create_guild_from_template",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/new-member-welcome": {
      "get": {
        "summary": "get_guild_new_member_welcome",
        "description": "",
        "operationId": "get_guild_new_member_welcome",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_new_member_welcome",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildHomeSettingsResponse"
                }
              }
            }
          },
          "204": {
            "description": "204 response for get_guild_new_member_welcome",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}": {
      "get": {
        "summary": "get_guild_scheduled_event",
        "description": "",
        "operationId": "get_guild_scheduled_event",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_scheduled_event_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_user_count",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_scheduled_event",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExternalScheduledEventResponse"
                    },
                    {
                      "$ref": "#/components/schemas/StageScheduledEventResponse"
                    },
                    {
                      "$ref": "#/components/schemas/VoiceScheduledEventResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_guild_scheduled_event",
        "description": "",
        "operationId": "delete_guild_scheduled_event",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_scheduled_event_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_scheduled_event",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_scheduled_event",
        "description": "",
        "operationId": "update_guild_scheduled_event",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "guild_scheduled_event_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ExternalScheduledEventPatchRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/StageScheduledEventPatchRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/VoiceScheduledEventPatchRequestPartial"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_scheduled_event",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExternalScheduledEventResponse"
                    },
                    {
                      "$ref": "#/components/schemas/StageScheduledEventResponse"
                    },
                    {
                      "$ref": "#/components/schemas/VoiceScheduledEventResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/scheduled-events": {
      "get": {
        "summary": "list_guild_scheduled_events",
        "description": "",
        "operationId": "list_guild_scheduled_events",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_user_count",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_scheduled_events",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ExternalScheduledEventResponse"
                      },
                      {
                        "$ref": "#/components/schemas/StageScheduledEventResponse"
                      },
                      {
                        "$ref": "#/components/schemas/VoiceScheduledEventResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_guild_scheduled_event",
        "description": "",
        "operationId": "create_guild_scheduled_event",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ExternalScheduledEventCreateRequest"
                  },
                  {
                    "$ref": "#/components/schemas/StageScheduledEventCreateRequest"
                  },
                  {
                    "$ref": "#/components/schemas/VoiceScheduledEventCreateRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_guild_scheduled_event",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ExternalScheduledEventResponse"
                    },
                    {
                      "$ref": "#/components/schemas/StageScheduledEventResponse"
                    },
                    {
                      "$ref": "#/components/schemas/VoiceScheduledEventResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/welcome-screen": {
      "get": {
        "summary": "get_guild_welcome_screen",
        "description": "",
        "operationId": "get_guild_welcome_screen",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_welcome_screen",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildWelcomeScreenResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_welcome_screen",
        "description": "",
        "operationId": "update_guild_welcome_screen",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WelcomeScreenPatchRequestPartial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_welcome_screen",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildWelcomeScreenResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/voice-states/{user_id}": {
      "patch": {
        "summary": "update_voice_state",
        "description": "",
        "operationId": "update_voice_state",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsVoiceStatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for update_voice_state",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/integrations/{integration_id}": {
      "delete": {
        "summary": "delete_guild_integration",
        "description": "",
        "operationId": "delete_guild_integration",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "integration_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_integration",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/integrations": {
      "get": {
        "summary": "list_guild_integrations",
        "description": "",
        "operationId": "list_guild_integrations",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_integrations",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DiscordIntegrationResponse"
                      },
                      {
                        "$ref": "#/components/schemas/ExternalConnectionIntegrationResponse"
                      },
                      {
                        "$ref": "#/components/schemas/GuildSubscriptionIntegrationResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/widget.json": {
      "get": {
        "summary": "get_guild_widget",
        "description": "",
        "operationId": "get_guild_widget",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_widget",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/onboarding": {
      "get": {
        "summary": "get_guilds_onboarding",
        "description": "",
        "operationId": "get_guilds_onboarding",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guilds_onboarding",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGuildOnboardingResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "put": {
        "summary": "put_guilds_onboarding",
        "description": "",
        "operationId": "put_guilds_onboarding",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuildOnboardingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for put_guilds_onboarding",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildOnboardingResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/vanity-url": {
      "get": {
        "summary": "get_guild_vanity_url",
        "description": "",
        "operationId": "get_guild_vanity_url",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_vanity_url",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VanityURLResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/audit-logs": {
      "get": {
        "summary": "list_guild_audit_log_entries",
        "description": "",
        "operationId": "list_guild_audit_log_entries",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "target_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "action_type",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_audit_log_entries",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildAuditLogResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/widget.png": {
      "get": {
        "summary": "get_guild_widget_png",
        "description": "",
        "operationId": "get_guild_widget_png",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "style",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/WidgetImageStyles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_widget_png",
            "headers": {},
            "content": {
              "image/png": {
                "schema": {}
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/templates/{code}": {
      "put": {
        "summary": "sync_guild_template",
        "description": "",
        "operationId": "sync_guild_template",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for sync_guild_template",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildTemplateResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_guild_template",
        "description": "",
        "operationId": "delete_guild_template",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for delete_guild_template",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildTemplateResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_template",
        "description": "",
        "operationId": "update_guild_template",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsTemplatesRequest1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_template",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildTemplateResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/templates": {
      "get": {
        "summary": "list_guild_templates",
        "description": "",
        "operationId": "list_guild_templates",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_templates",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuildTemplateResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_guild_template",
        "description": "",
        "operationId": "create_guild_template",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsTemplatesRequest2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_guild_template",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildTemplateResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/stickers/{sticker_id}": {
      "get": {
        "summary": "get_guild_sticker",
        "description": "",
        "operationId": "get_guild_sticker",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "sticker_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_sticker",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildStickerResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_guild_sticker",
        "description": "",
        "operationId": "delete_guild_sticker",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "sticker_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_sticker",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_sticker",
        "description": "",
        "operationId": "update_guild_sticker",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "sticker_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsStickersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_sticker",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildStickerResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/bulk-ban": {
      "post": {
        "summary": "bulk_ban_users_from_guild",
        "description": "",
        "operationId": "bulk_ban_users_from_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsBulkBanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for bulk_ban_users_from_guild",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkBanUsersResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/stickers": {
      "get": {
        "summary": "list_guild_stickers",
        "description": "",
        "operationId": "list_guild_stickers",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_stickers",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuildStickerResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_guild_sticker",
        "description": "",
        "operationId": "create_guild_sticker",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {},
              "schema": {
                "required": [
                  "name",
                  "tags",
                  "file"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 30,
                    "minLength": 2,
                    "type": "string"
                  },
                  "tags": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "description": {
                    "maxLength": 100,
                    "type": "string",
                    "nullable": true
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "201 response for create_guild_sticker",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildStickerResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/webhooks": {
      "get": {
        "summary": "get_guild_webhooks",
        "description": "",
        "operationId": "get_guild_webhooks",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_webhooks",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationIncomingWebhookResponse"
                      },
                      {
                        "$ref": "#/components/schemas/ChannelFollowerWebhookResponse"
                      },
                      {
                        "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/channels": {
      "get": {
        "summary": "list_guild_channels",
        "description": "",
        "operationId": "list_guild_channels",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_channels",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/GuildChannelResponse"
                      },
                      {
                        "$ref": "#/components/schemas/PrivateChannelResponse"
                      },
                      {
                        "$ref": "#/components/schemas/PrivateGroupChannelResponse"
                      },
                      {
                        "$ref": "#/components/schemas/ThreadResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_guild_channel",
        "description": "",
        "operationId": "create_guild_channel",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGuildChannelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for create_guild_channel",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildChannelResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "bulk_update_guild_channels",
        "description": "",
        "operationId": "bulk_update_guild_channels",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GuildsChannelsRequest"
                },
                "description": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for bulk_update_guild_channels",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/members/{user_id}": {
      "get": {
        "summary": "get_guild_member",
        "description": "",
        "operationId": "get_guild_member",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_member",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildMemberResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "put": {
        "summary": "add_guild_member",
        "description": "",
        "operationId": "add_guild_member",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsMembersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for add_guild_member",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildMemberResponse"
                }
              }
            }
          },
          "204": {
            "description": "204 response for add_guild_member",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_guild_member",
        "description": "",
        "operationId": "delete_guild_member",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_member",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_member",
        "description": "",
        "operationId": "update_guild_member",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsMembersRequest1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_member",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildMemberResponse"
                }
              }
            }
          },
          "204": {
            "description": "204 response for update_guild_member",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/members": {
      "get": {
        "summary": "list_guild_members",
        "description": "",
        "operationId": "list_guild_members",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1000.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_members",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuildMemberResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/preview": {
      "get": {
        "summary": "get_guild_preview",
        "description": "",
        "operationId": "get_guild_preview",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_preview",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildPreviewResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/invites": {
      "get": {
        "summary": "list_guild_invites",
        "description": "",
        "operationId": "list_guild_invites",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_invites",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/FriendInviteResponse"
                      },
                      {
                        "$ref": "#/components/schemas/GroupDMInviteResponse"
                      },
                      {
                        "$ref": "#/components/schemas/GuildInviteResponse"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/regions": {
      "get": {
        "summary": "list_guild_voice_regions",
        "description": "",
        "operationId": "list_guild_voice_regions",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_voice_regions",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceRegionResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/emojis/{emoji_id}": {
      "get": {
        "summary": "get_guild_emoji",
        "description": "",
        "operationId": "get_guild_emoji",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_emoji",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmojiResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_guild_emoji",
        "description": "",
        "operationId": "delete_guild_emoji",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_emoji",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_emoji",
        "description": "",
        "operationId": "update_guild_emoji",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "emoji_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsEmojisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_emoji",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmojiResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/emojis": {
      "get": {
        "summary": "list_guild_emojis",
        "description": "",
        "operationId": "list_guild_emojis",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_emojis",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmojiResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_guild_emoji",
        "description": "",
        "operationId": "create_guild_emoji",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsEmojisRequest1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response for create_guild_emoji",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmojiResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/widget": {
      "get": {
        "summary": "get_guild_widget_settings",
        "description": "",
        "operationId": "get_guild_widget_settings",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_widget_settings",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetSettingsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_widget_settings",
        "description": "",
        "operationId": "update_guild_widget_settings",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsWidgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_widget_settings",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetSettingsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/roles/{role_id}": {
      "delete": {
        "summary": "delete_guild_role",
        "description": "",
        "operationId": "delete_guild_role",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild_role",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild_role",
        "description": "",
        "operationId": "update_guild_role",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsRolesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild_role",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildRoleResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/roles": {
      "get": {
        "summary": "list_guild_roles",
        "description": "",
        "operationId": "list_guild_roles",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_roles",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuildRoleResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "create_guild_role",
        "description": "",
        "operationId": "create_guild_role",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsRolesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for create_guild_role",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildRoleResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "bulk_update_guild_roles",
        "description": "",
        "operationId": "bulk_update_guild_roles",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GuildsRolesRequest2"
                },
                "description": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for bulk_update_guild_roles",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuildRoleResponse"
                  },
                  "description": ""
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/prune": {
      "get": {
        "summary": "preview_prune_guild",
        "description": "",
        "operationId": "preview_prune_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "days",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 30.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "include_roles",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "maxItems": 100,
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "pattern": "^(0|[1-9][0-9]*)$",
                    "oneOf": [
                      {
                        "pattern": "^(0|[1-9][0-9]*)$",
                        "type": "string"
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for preview_prune_guild",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildPruneResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "prune_guild",
        "description": "",
        "operationId": "prune_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsPruneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for prune_guild",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildPruneResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/bans/{user_id}": {
      "get": {
        "summary": "get_guild_ban",
        "description": "",
        "operationId": "get_guild_ban",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild_ban",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildBanResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "put": {
        "summary": "ban_user_from_guild",
        "description": "",
        "operationId": "ban_user_from_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildsBansRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response for ban_user_from_guild",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "unban_user_from_guild",
        "description": "",
        "operationId": "unban_user_from_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for unban_user_from_guild",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/bans": {
      "get": {
        "summary": "list_guild_bans",
        "description": "",
        "operationId": "list_guild_bans",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1000.0,
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for list_guild_bans",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuildBanResponse"
                  },
                  "description": "",
                  "nullable": true
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}/mfa": {
      "post": {
        "summary": "set_guild_mfa_level",
        "description": "",
        "operationId": "set_guild_mfa_level",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildMFALevelResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for set_guild_mfa_level",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildMFALevelResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/stage-instances/{channel_id}": {
      "get": {
        "summary": "get_stage_instance",
        "description": "",
        "operationId": "get_stage_instance",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_stage_instance",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageInstanceResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_stage_instance",
        "description": "",
        "operationId": "delete_stage_instance",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_stage_instance",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_stage_instance",
        "description": "",
        "operationId": "update_stage_instance",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StageInstancesRequest1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_stage_instance",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageInstanceResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/applications/{application_id}": {
      "get": {
        "summary": "get_application",
        "description": "",
        "operationId": "get_application",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_application",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateApplicationResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_application",
        "description": "",
        "operationId": "update_application",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationFormPartial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_application",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateApplicationResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/webhooks/{webhook_id}/{webhook_token}": {
      "get": {
        "summary": "get_webhook_by_token",
        "description": "",
        "operationId": "get_webhook_by_token",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_webhook_by_token",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApplicationIncomingWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ChannelFollowerWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "post": {
        "summary": "execute_webhook",
        "description": "",
        "operationId": "execute_webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "thread_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/IncomingWebhookRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/IncomingWebhookUpdateRequestPartial"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for execute_webhook",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "204": {
            "description": "204 response for execute_webhook",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_webhook_by_token",
        "description": "",
        "operationId": "delete_webhook_by_token",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_webhook_by_token",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_webhook_by_token",
        "description": "",
        "operationId": "update_webhook_by_token",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "webhook_token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhooksRequest1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_webhook_by_token",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApplicationIncomingWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ChannelFollowerWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      }
    },
    "/stickers/{sticker_id}": {
      "get": {
        "summary": "get_sticker",
        "description": "",
        "operationId": "get_sticker",
        "parameters": [
          {
            "name": "sticker_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_sticker",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GuildStickerResponse"
                    },
                    {
                      "$ref": "#/components/schemas/StandardStickerResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/webhooks/{webhook_id}": {
      "get": {
        "summary": "get_webhook",
        "description": "",
        "operationId": "get_webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_webhook",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApplicationIncomingWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ChannelFollowerWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_webhook",
        "description": "",
        "operationId": "delete_webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_webhook",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_webhook",
        "description": "",
        "operationId": "update_webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhooksRequest2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_webhook",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApplicationIncomingWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ChannelFollowerWebhookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/channels/{channel_id}": {
      "get": {
        "summary": "get_channel",
        "description": "",
        "operationId": "get_channel",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_channel",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GuildChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateGroupChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ThreadResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_channel",
        "description": "",
        "operationId": "delete_channel",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for delete_channel",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GuildChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateGroupChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ThreadResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_channel",
        "description": "",
        "operationId": "update_channel",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PrivateChannelRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateGuildChannelRequestPartial"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateThreadRequestPartial"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_channel",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GuildChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PrivateGroupChannelResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ThreadResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/invites/{code}": {
      "get": {
        "summary": "invite_resolve",
        "description": "",
        "operationId": "invite_resolve",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          },
          {
            "name": "with_counts",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "guild_scheduled_event_id",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for invite_resolve",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FriendInviteResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GroupDMInviteResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GuildInviteResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {},
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "invite_revoke",
        "description": "",
        "operationId": "invite_revoke",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "maxLength": 152133,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for invite_revoke",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FriendInviteResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GroupDMInviteResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GuildInviteResponse"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/guilds/{guild_id}": {
      "get": {
        "summary": "get_guild",
        "description": "",
        "operationId": "get_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          },
          {
            "name": "with_counts",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_guild",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildWithCountsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "delete": {
        "summary": "delete_guild",
        "description": "",
        "operationId": "delete_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response for delete_guild",
            "headers": {},
            "content": {}
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      },
      "patch": {
        "summary": "update_guild",
        "description": "",
        "operationId": "update_guild",
        "parameters": [
          {
            "name": "guild_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuildPatchRequestPartial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response for update_guild",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuildResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "get_user",
        "description": "",
        "operationId": "get_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response for get_user",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "description": "Errors object returned by the Discord API"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "BotToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountResponse": {
        "title": "AccountResponse",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ActionRow": {
        "title": "ActionRow",
        "required": [
          "type",
          "components"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "components": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Button"
                },
                {
                  "$ref": "#/components/schemas/ChannelSelect"
                },
                {
                  "$ref": "#/components/schemas/InputText"
                },
                {
                  "$ref": "#/components/schemas/MentionableSelect"
                },
                {
                  "$ref": "#/components/schemas/RoleSelect"
                },
                {
                  "$ref": "#/components/schemas/StringSelect"
                },
                {
                  "$ref": "#/components/schemas/UserSelect"
                }
              ]
            },
            "description": ""
          }
        }
      },
      "ApplicationCommandAttachmentOption": {
        "title": "ApplicationCommandAttachmentOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              11
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandAttachmentOptionResponse": {
        "title": "ApplicationCommandAttachmentOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              11
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandAutocompleteCallbackRequest": {
        "title": "ApplicationCommandAutocompleteCallbackRequest",
        "required": [
          "type",
          "data"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              8
            ],
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InteractionApplicationCommandAutocompleteCallbackIntegerData"
              },
              {
                "$ref": "#/components/schemas/InteractionApplicationCommandAutocompleteCallbackNumberData"
              },
              {
                "$ref": "#/components/schemas/InteractionApplicationCommandAutocompleteCallbackStringData"
              }
            ]
          }
        }
      },
      "ApplicationCommandBooleanOption": {
        "title": "ApplicationCommandBooleanOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              5
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandBooleanOptionResponse": {
        "title": "ApplicationCommandBooleanOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              5
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandChannelOption": {
        "title": "ApplicationCommandChannelOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              7
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "channel_types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTypes"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationCommandChannelOptionResponse": {
        "title": "ApplicationCommandChannelOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              7
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "channel_types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTypes"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationCommandCreateRequest": {
        "title": "ApplicationCommandCreateRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandAttachmentOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandBooleanOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandChannelOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandIntegerOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandMentionableOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandNumberOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandRoleOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandStringOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandGroupOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandUserOption"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "default_member_permissions": {
            "maximum": 2251799813685247.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dm_permission": {
            "type": "boolean",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationCommandType"
                  }
                ]
              },
              {}
            ]
          }
        }
      },
      "ApplicationCommandIntegerOption": {
        "title": "ApplicationCommandIntegerOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "autocomplete": {
            "type": "boolean",
            "nullable": true
          },
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandOptionIntegerChoice"
            },
            "description": "",
            "nullable": true
          },
          "min_value": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "oneOf": [
              {
                "maximum": 9007199254740991.0,
                "minimum": -9007199254740991.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          },
          "max_value": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "oneOf": [
              {
                "maximum": 9007199254740991.0,
                "minimum": -9007199254740991.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ApplicationCommandIntegerOptionResponse": {
        "title": "ApplicationCommandIntegerOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "autocomplete": {
            "type": "boolean",
            "nullable": true
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandOptionIntegerChoiceResponse"
            },
            "description": "",
            "nullable": true
          },
          "min_value": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "oneOf": [
              {
                "maximum": 9007199254740991.0,
                "minimum": -9007199254740991.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          },
          "max_value": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "oneOf": [
              {
                "maximum": 9007199254740991.0,
                "minimum": -9007199254740991.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ApplicationCommandMentionableOption": {
        "title": "ApplicationCommandMentionableOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              9
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandMentionableOptionResponse": {
        "title": "ApplicationCommandMentionableOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              9
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandNumberOption": {
        "title": "ApplicationCommandNumberOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              10
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "autocomplete": {
            "type": "boolean",
            "nullable": true
          },
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandOptionNumberChoice"
            },
            "description": "",
            "nullable": true
          },
          "min_value": {
            "type": "number",
            "nullable": true
          },
          "max_value": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "ApplicationCommandNumberOptionResponse": {
        "title": "ApplicationCommandNumberOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              10
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "autocomplete": {
            "type": "boolean",
            "nullable": true
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandOptionNumberChoiceResponse"
            },
            "description": "",
            "nullable": true
          },
          "min_value": {
            "type": "number",
            "nullable": true
          },
          "max_value": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "ApplicationCommandOptionIntegerChoice": {
        "title": "ApplicationCommandOptionIntegerChoice",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "value": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApplicationCommandOptionIntegerChoiceResponse": {
        "title": "ApplicationCommandOptionIntegerChoiceResponse",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "value": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApplicationCommandOptionNumberChoice": {
        "title": "ApplicationCommandOptionNumberChoice",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "value": {
            "type": "number"
          }
        }
      },
      "ApplicationCommandOptionNumberChoiceResponse": {
        "title": "ApplicationCommandOptionNumberChoiceResponse",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "value": {
            "type": "number"
          }
        }
      },
      "ApplicationCommandOptionStringChoice": {
        "title": "ApplicationCommandOptionStringChoice",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "value": {
            "maxLength": 6000,
            "type": "string"
          }
        }
      },
      "ApplicationCommandOptionStringChoiceResponse": {
        "title": "ApplicationCommandOptionStringChoiceResponse",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ApplicationCommandPatchRequestPartial": {
        "title": "ApplicationCommandPatchRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandAttachmentOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandBooleanOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandChannelOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandIntegerOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandMentionableOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandNumberOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandRoleOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandStringOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandGroupOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandUserOption"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "default_member_permissions": {
            "maximum": 2251799813685247.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dm_permission": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandPermission": {
        "title": "ApplicationCommandPermission",
        "required": [
          "id",
          "type",
          "permission"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ApplicationCommandPermissionType"
          },
          "permission": {
            "type": "boolean"
          }
        }
      },
      "ApplicationCommandResponse": {
        "title": "ApplicationCommandResponse",
        "required": [
          "id",
          "application_id",
          "version",
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "version": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "default_member_permissions": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ApplicationCommandType"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "dm_permission": {
            "type": "boolean",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandAttachmentOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandBooleanOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandChannelOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandIntegerOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandMentionableOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandNumberOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandRoleOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandStringOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandGroupOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandUserOptionResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "nsfw": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandRoleOption": {
        "title": "ApplicationCommandRoleOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              8
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandRoleOptionResponse": {
        "title": "ApplicationCommandRoleOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              8
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandStringOption": {
        "title": "ApplicationCommandStringOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "autocomplete": {
            "type": "boolean",
            "nullable": true
          },
          "min_length": {
            "maximum": 6000.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_length": {
            "maximum": 6000.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandOptionStringChoice"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationCommandStringOptionResponse": {
        "title": "ApplicationCommandStringOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "autocomplete": {
            "type": "boolean",
            "nullable": true
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandOptionStringChoiceResponse"
            },
            "description": "",
            "nullable": true
          },
          "min_length": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_length": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApplicationCommandSubcommandGroupOption": {
        "title": "ApplicationCommandSubcommandGroupOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandSubcommandOption"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationCommandSubcommandGroupOptionResponse": {
        "title": "ApplicationCommandSubcommandGroupOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandSubcommandOptionResponse"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationCommandSubcommandOption": {
        "title": "ApplicationCommandSubcommandOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandAttachmentOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandBooleanOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandChannelOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandIntegerOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandMentionableOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandNumberOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandRoleOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandStringOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandUserOption"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationCommandSubcommandOptionResponse": {
        "title": "ApplicationCommandSubcommandOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandAttachmentOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandBooleanOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandChannelOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandIntegerOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandMentionableOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandNumberOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandRoleOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandStringOptionResponse"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandUserOptionResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationCommandUpdateRequest": {
        "title": "ApplicationCommandUpdateRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandAttachmentOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandBooleanOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandChannelOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandIntegerOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandMentionableOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandNumberOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandRoleOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandStringOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandGroupOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandSubcommandOption"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCommandUserOption"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "default_member_permissions": {
            "maximum": 2251799813685247.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dm_permission": {
            "type": "boolean",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationCommandType"
                  }
                ]
              },
              {}
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ApplicationCommandUserOption": {
        "title": "ApplicationCommandUserOption",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              6
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationCommandUserOptionResponse": {
        "title": "ApplicationCommandUserOptionResponse",
        "required": [
          "type",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              6
            ],
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localized": {
            "type": "string",
            "nullable": true
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationFormPartial": {
        "title": "ApplicationFormPartial",
        "type": "object",
        "properties": {
          "description": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/Description"
                  }
                ]
              },
              {}
            ]
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "cover_image": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "team_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "interactions_endpoint_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "max_participants": {
            "minimum": -1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationTypes"
                  }
                ]
              },
              {}
            ]
          },
          "tags": {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 20,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "custom_install_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "install_params": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplicationOAuth2InstallParams"
              },
              {
                "nullable": true
              }
            ]
          },
          "role_connections_verification_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApplicationIncomingWebhookResponse": {
        "title": "ApplicationIncomingWebhookResponse",
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ApplicationOAuth2InstallParams": {
        "title": "ApplicationOAuth2InstallParams",
        "type": "object",
        "properties": {
          "scopes": {
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2Scopes"
            },
            "description": "",
            "nullable": true
          },
          "permissions": {
            "maximum": 2251799813685247.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApplicationOAuth2InstallParamsResponse": {
        "title": "ApplicationOAuth2InstallParamsResponse",
        "required": [
          "scopes",
          "permissions"
        ],
        "type": "object",
        "properties": {
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2Scopes"
            },
            "description": ""
          },
          "permissions": {
            "type": "string"
          }
        }
      },
      "ApplicationResponse": {
        "title": "ApplicationResponse",
        "required": [
          "id",
          "name",
          "description",
          "verify_key",
          "flags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationTypes"
                  }
                ]
              },
              {}
            ]
          },
          "cover_image": {
            "type": "string",
            "nullable": true
          },
          "primary_sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "bot": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "rpc_origins": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "description": "",
            "nullable": true
          },
          "bot_public": {
            "type": "boolean",
            "nullable": true
          },
          "bot_require_code_grant": {
            "type": "boolean",
            "nullable": true
          },
          "terms_of_service_url": {
            "type": "string",
            "nullable": true
          },
          "privacy_policy_url": {
            "type": "string",
            "nullable": true
          },
          "custom_install_url": {
            "type": "string",
            "nullable": true
          },
          "install_params": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplicationOAuth2InstallParamsResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "verify_key": {
            "type": "string"
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "max_participants": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ApplicationRoleConnectionsMetadataItemRequest": {
        "title": "ApplicationRoleConnectionsMetadataItemRequest",
        "required": [
          "type",
          "key",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MetadataItemTypes"
          },
          "key": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        }
      },
      "ApplicationRoleConnectionsMetadataItemResponse": {
        "title": "ApplicationRoleConnectionsMetadataItemResponse",
        "required": [
          "type",
          "key",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MetadataItemTypes"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "description_localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ApplicationUserRoleConnectionResponse": {
        "title": "ApplicationUserRoleConnectionResponse",
        "type": "object",
        "properties": {
          "platform_name": {
            "type": "string",
            "nullable": true
          },
          "platform_username": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "AuditLogEntryResponse": {
        "title": "AuditLogEntryResponse",
        "required": [
          "id",
          "action_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "action_type": {
            "$ref": "#/components/schemas/AuditLogActionTypes"
          },
          "user_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogObjectChangeResponse"
            },
            "description": "",
            "nullable": true
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuditLogObjectChangeResponse": {
        "title": "AuditLogObjectChangeResponse",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "new_value": {},
          "old_value": {}
        }
      },
      "BaseCreateMessageCreateRequest": {
        "title": "BaseCreateMessageCreateRequest",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "sticker_ids": {
            "maxItems": 3,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": "",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "BasicApplicationResponse": {
        "title": "BasicApplicationResponse",
        "required": [
          "id",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationTypes"
                  }
                ]
              },
              {}
            ]
          },
          "cover_image": {
            "type": "string",
            "nullable": true
          },
          "primary_sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "bot": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "BasicMessageResponse": {
        "title": "BasicMessageResponse",
        "required": [
          "type",
          "channel_id",
          "content",
          "attachments",
          "embeds",
          "timestamp",
          "flags",
          "components",
          "id",
          "author",
          "mentions",
          "mention_roles",
          "pinned",
          "mention_everyone",
          "tts"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MessageType"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentResponse"
            },
            "description": ""
          },
          "embeds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageEmbedResponse"
            },
            "description": ""
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "edited_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "components": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageComponentActionRowResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentButtonResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentChannelSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentInputTextResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentMentionableSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentRoleSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentStringSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentUserSelectResponse"
                }
              ]
            },
            "description": ""
          },
          "resolved": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResolvedObjectsResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": ""
          },
          "mention_roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "pinned": {
            "type": "boolean"
          },
          "mention_everyone": {
            "type": "boolean"
          },
          "tts": {
            "type": "boolean"
          },
          "call": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageCallResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "activity": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          },
          "application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BasicApplicationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "interaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageInteractionResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "nonce": {
            "oneOf": [
              {
                "maximum": 9.2233720368547758E+18,
                "minimum": -9.2233720368547758E+18,
                "type": "integer",
                "format": "int64"
              },
              {
                "maxLength": 25,
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "webhook_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "message_reference": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageReferenceResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "thread": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreadResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "mention_channels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageMentionChannelResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "stickers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GuildStickerResponse"
                },
                {
                  "$ref": "#/components/schemas/StandardStickerResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "sticker_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageStickerItemResponse"
            },
            "description": "",
            "nullable": true
          },
          "role_subscription_data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageRoleSubscriptionDataResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "purchase_notification": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PurchaseNotificationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "BlockMessageAction": {
        "title": "BlockMessageAction",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BlockMessageActionMetadata"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "BlockMessageActionMetadata": {
        "title": "BlockMessageActionMetadata",
        "type": "object",
        "properties": {
          "custom_message": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          }
        }
      },
      "BlockMessageActionMetadataResponse": {
        "title": "BlockMessageActionMetadataResponse",
        "type": "object",
        "properties": {
          "custom_message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BlockMessageActionResponse": {
        "title": "BlockMessageActionResponse",
        "required": [
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "$ref": "#/components/schemas/BlockMessageActionMetadataResponse"
          }
        }
      },
      "BotAccountPatchRequest": {
        "title": "BotAccountPatchRequest",
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 32,
            "minLength": 2,
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "format": "binary",
            "nullable": true
          }
        }
      },
      "BulkBanUsersResponse": {
        "title": "BulkBanUsersResponse",
        "required": [
          "banned_users",
          "failed_users"
        ],
        "type": "object",
        "properties": {
          "banned_users": {
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "failed_users": {
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "Button": {
        "title": "Button",
        "required": [
          "type",
          "style"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "style": {
            "$ref": "#/components/schemas/ButtonStyleTypes"
          },
          "label": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Emoji"
              },
              {
                "nullable": true
              }
            ]
          },
          "url": {
            "maxLength": 512,
            "type": "string",
            "nullable": true
          },
          "sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ChannelFollowerResponse": {
        "title": "ChannelFollowerResponse",
        "required": [
          "channel_id",
          "webhook_id"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "webhook_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "ChannelFollowerWebhookResponse": {
        "title": "ChannelFollowerWebhookResponse",
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "source_guild": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/WebhookSourceGuildResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "source_channel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/WebhookSourceChannelResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ChannelPermissionOverwriteRequest": {
        "title": "ChannelPermissionOverwriteRequest",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelPermissionOverwrites"
                  }
                ]
              },
              {}
            ]
          },
          "allow": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deny": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ChannelPermissionOverwriteResponse": {
        "title": "ChannelPermissionOverwriteResponse",
        "required": [
          "id",
          "type",
          "allow",
          "deny"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelPermissionOverwrites"
          },
          "allow": {
            "type": "string"
          },
          "deny": {
            "type": "string"
          }
        }
      },
      "ChannelSelect": {
        "title": "ChannelSelect",
        "required": [
          "type",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              8
            ],
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "placeholder": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "maximum": 25.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "maximum": 25.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "default_values": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelSelectDefaultValue"
            },
            "description": "",
            "nullable": true
          },
          "channel_types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTypes"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ChannelSelectDefaultValue": {
        "title": "ChannelSelectDefaultValue",
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "channel"
            ],
            "type": "string"
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "CommandPermissionResponse": {
        "title": "CommandPermissionResponse",
        "required": [
          "id",
          "type",
          "permission"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ApplicationCommandPermissionType"
          },
          "permission": {
            "type": "boolean"
          }
        }
      },
      "CommandPermissionsResponse": {
        "title": "CommandPermissionsResponse",
        "required": [
          "id",
          "application_id",
          "guild_id",
          "permissions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommandPermissionResponse"
            },
            "description": ""
          }
        }
      },
      "ConnectedAccountGuildResponse": {
        "title": "ConnectedAccountGuildResponse",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ConnectedAccountIntegrationResponse": {
        "title": "ConnectedAccountIntegrationResponse",
        "required": [
          "id",
          "type",
          "account",
          "guild"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "account": {
            "$ref": "#/components/schemas/AccountResponse"
          },
          "guild": {
            "$ref": "#/components/schemas/ConnectedAccountGuildResponse"
          }
        }
      },
      "ConnectedAccountResponse": {
        "title": "ConnectedAccountResponse",
        "required": [
          "id",
          "type",
          "friend_sync",
          "show_activity",
          "two_way_link",
          "verified",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ConnectedAccountProviders"
          },
          "friend_sync": {
            "type": "boolean"
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedAccountIntegrationResponse"
            },
            "description": "",
            "nullable": true
          },
          "show_activity": {
            "type": "boolean"
          },
          "two_way_link": {
            "type": "boolean"
          },
          "verified": {
            "type": "boolean"
          },
          "visibility": {
            "$ref": "#/components/schemas/ConnectedAccountVisibility"
          },
          "revoked": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CreateEntitlementRequestData": {
        "title": "CreateEntitlementRequestData",
        "required": [
          "sku_id",
          "owner_id",
          "owner_type"
        ],
        "type": "object",
        "properties": {
          "sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "owner_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "owner_type": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateForumThreadRequest": {
        "title": "CreateForumThreadRequest",
        "required": [
          "name",
          "message"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "applied_tags": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/BaseCreateMessageCreateRequest"
          }
        }
      },
      "CreateGroupDMInviteRequest": {
        "title": "CreateGroupDMInviteRequest",
        "type": "object",
        "properties": {
          "max_age": {
            "maximum": 604800.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CreateGuildChannelRequest": {
        "title": "CreateGuildChannelRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelTypes"
                  }
                ]
              },
              {}
            ]
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "position": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "topic": {
            "maxLength": 4096,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bitrate": {
            "minimum": 8000.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "nsfw": {
            "type": "boolean",
            "nullable": true
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "permission_overwrites": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelPermissionOverwriteRequest"
            },
            "description": "",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          },
          "default_auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "default_reaction_emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateDefaultReactionEmojiRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "default_thread_rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "default_sort_order": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadSortOrder"
                  }
                ]
              },
              {}
            ]
          },
          "default_forum_layout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ForumLayout"
                  }
                ]
              },
              {}
            ]
          },
          "available_tags": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateOrUpdateThreadTagRequest"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "CreateGuildInviteRequest": {
        "title": "CreateGuildInviteRequest",
        "type": "object",
        "properties": {
          "max_age": {
            "maximum": 604800.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "temporary": {
            "type": "boolean",
            "nullable": true
          },
          "max_uses": {
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "unique": {
            "type": "boolean",
            "nullable": true
          },
          "target_user_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTargetTypes"
                  }
                ]
              },
              {}
            ]
          }
        }
      },
      "CreateGuildRequestChannelItem": {
        "title": "CreateGuildRequestChannelItem",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelTypes"
                  }
                ]
              },
              {}
            ]
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "position": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "topic": {
            "maxLength": 4096,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bitrate": {
            "minimum": 8000.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "nsfw": {
            "type": "boolean",
            "nullable": true
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "permission_overwrites": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelPermissionOverwriteRequest"
            },
            "description": "",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          },
          "default_auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "default_reaction_emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateDefaultReactionEmojiRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "default_thread_rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "default_sort_order": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadSortOrder"
                  }
                ]
              },
              {}
            ]
          },
          "default_forum_layout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ForumLayout"
                  }
                ]
              },
              {}
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "available_tags": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrUpdateThreadTagRequest"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "CreateGuildRequestRoleItem": {
        "title": "CreateGuildRequestRoleItem",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "color": {
            "maximum": 16777215.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hoist": {
            "type": "boolean",
            "nullable": true
          },
          "mentionable": {
            "type": "boolean",
            "nullable": true
          },
          "unicode_emoji": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateMessageInteractionCallbackRequest": {
        "title": "CreateMessageInteractionCallbackRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/InteractionCallbackTypes"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IncomingWebhookInteractionRequest"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "CreateOrUpdateThreadTagRequest": {
        "title": "CreateOrUpdateThreadTagRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "moderated": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CreatePrivateChannelRequest": {
        "title": "CreatePrivateChannelRequest",
        "type": "object",
        "properties": {
          "recipient_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "access_tokens": {
            "maxItems": 1521,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 152133,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "nicks": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        }
      },
      "CreateTextThreadWithMessageRequest": {
        "title": "CreateTextThreadWithMessageRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CreateTextThreadWithoutMessageRequest": {
        "title": "CreateTextThreadWithoutMessageRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelTypes"
                  }
                ]
              },
              {}
            ]
          },
          "invitable": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CreatedThreadResponse": {
        "title": "CreatedThreadResponse",
        "required": [
          "id",
          "type",
          "flags",
          "guild_id",
          "name",
          "owner_id",
          "message_count",
          "member_count",
          "total_message_sent"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelTypes"
          },
          "last_message_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "last_pin_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "rate_limit_per_user": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          },
          "permissions": {
            "type": "string",
            "nullable": true
          },
          "owner_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "thread_metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreadMetadataResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "message_count": {
            "type": "integer",
            "format": "int32"
          },
          "member_count": {
            "type": "integer",
            "format": "int32"
          },
          "total_message_sent": {
            "type": "integer",
            "format": "int32"
          },
          "applied_tags": {
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "member": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreadMemberResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "DefaultKeywordListTriggerMetadata": {
        "title": "DefaultKeywordListTriggerMetadata",
        "type": "object",
        "properties": {
          "allow_list": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "maxLength": 60,
              "minLength": 1,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "presets": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomodKeywordPresetType"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "DefaultKeywordListTriggerMetadataResponse": {
        "title": "DefaultKeywordListTriggerMetadataResponse",
        "required": [
          "allow_list",
          "presets"
        ],
        "type": "object",
        "properties": {
          "allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "presets": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomodKeywordPresetType"
            },
            "description": ""
          }
        }
      },
      "DefaultKeywordListUpsertRequest": {
        "title": "DefaultKeywordListUpsertRequest",
        "required": [
          "name",
          "event_type",
          "trigger_type",
          "trigger_metadata"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "trigger_metadata": {
            "$ref": "#/components/schemas/DefaultKeywordListTriggerMetadata"
          }
        }
      },
      "DefaultKeywordListUpsertRequestPartial": {
        "title": "DefaultKeywordListUpsertRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "$ref": "#/components/schemas/AutomodTriggerType"
          },
          "trigger_metadata": {
            "$ref": "#/components/schemas/DefaultKeywordListTriggerMetadata"
          }
        }
      },
      "DefaultKeywordRuleResponse": {
        "title": "DefaultKeywordRuleResponse",
        "required": [
          "id",
          "guild_id",
          "creator_id",
          "name",
          "event_type",
          "actions",
          "trigger_type",
          "trigger_metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageActionResponse"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelActionResponse"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserActionResponse"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledActionResponse"
                }
              ]
            },
            "description": ""
          },
          "trigger_type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_metadata": {
            "$ref": "#/components/schemas/DefaultKeywordListTriggerMetadataResponse"
          }
        }
      },
      "DefaultReactionEmojiResponse": {
        "title": "DefaultReactionEmojiResponse",
        "type": "object",
        "properties": {
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DiscordIntegrationResponse": {
        "title": "DiscordIntegrationResponse",
        "required": [
          "type",
          "id",
          "application",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "discord"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "application": {
            "$ref": "#/components/schemas/IntegrationApplicationResponse"
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2Scopes"
            },
            "description": ""
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "Emoji": {
        "title": "Emoji",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "name": {
            "maxLength": 32,
            "type": "string"
          },
          "animated": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "EmojiResponse": {
        "title": "EmojiResponse",
        "required": [
          "id",
          "name",
          "roles",
          "require_colons",
          "managed",
          "animated",
          "available"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "require_colons": {
            "type": "boolean"
          },
          "managed": {
            "type": "boolean"
          },
          "animated": {
            "type": "boolean"
          },
          "available": {
            "type": "boolean"
          }
        }
      },
      "EntitlementResponse": {
        "title": "EntitlementResponse",
        "required": [
          "id",
          "sku_id",
          "application_id",
          "user_id",
          "deleted",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "user_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "deleted": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ends_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/EntitlementTypes"
          },
          "fulfilled_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fulfillment_status": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/EntitlementTenantFulfillmentStatusResponse"
                  }
                ]
              },
              {}
            ]
          },
          "consumed": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "EntityMetadataExternal": {
        "title": "EntityMetadataExternal",
        "required": [
          "location"
        ],
        "type": "object",
        "properties": {
          "location": {
            "maxLength": 100,
            "type": "string"
          }
        }
      },
      "EntityMetadataExternalResponse": {
        "title": "EntityMetadataExternalResponse",
        "required": [
          "location"
        ],
        "type": "object",
        "properties": {
          "location": {
            "type": "string"
          }
        }
      },
      "ExternalConnectionIntegrationResponse": {
        "title": "ExternalConnectionIntegrationResponse",
        "required": [
          "type",
          "id",
          "user"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "revoked": {
            "type": "boolean",
            "nullable": true
          },
          "expire_behavior": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/IntegrationExpireBehaviorTypes"
                  }
                ]
              },
              {}
            ]
          },
          "expire_grace_period": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/IntegrationExpireGracePeriodTypes"
                  }
                ]
              },
              {}
            ]
          },
          "subscriber_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "role_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "syncing": {
            "type": "boolean",
            "nullable": true
          },
          "enable_emoticons": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ExternalScheduledEventCreateRequest": {
        "title": "ExternalScheduledEventCreateRequest",
        "required": [
          "name",
          "scheduled_start_time",
          "privacy_level",
          "entity_type",
          "entity_metadata"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "entity_type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "$ref": "#/components/schemas/EntityMetadataExternal"
          }
        }
      },
      "ExternalScheduledEventPatchRequestPartial": {
        "title": "ExternalScheduledEventPatchRequestPartial",
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildScheduledEventStatuses"
                  }
                ]
              },
              {}
            ]
          },
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "entity_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildScheduledEventEntityTypes"
                  }
                ]
              },
              {}
            ]
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "$ref": "#/components/schemas/EntityMetadataExternal"
          }
        }
      },
      "ExternalScheduledEventResponse": {
        "title": "ExternalScheduledEventResponse",
        "required": [
          "id",
          "guild_id",
          "name",
          "scheduled_start_time",
          "status",
          "entity_type",
          "privacy_level",
          "entity_metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/GuildScheduledEventStatuses"
          },
          "entity_type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "entity_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "user_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "user_rsvp": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventUserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "$ref": "#/components/schemas/EntityMetadataExternalResponse"
          }
        }
      },
      "FlagToChannelAction": {
        "title": "FlagToChannelAction",
        "required": [
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "$ref": "#/components/schemas/FlagToChannelActionMetadata"
          }
        }
      },
      "FlagToChannelActionMetadata": {
        "title": "FlagToChannelActionMetadata",
        "required": [
          "channel_id"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "FlagToChannelActionMetadataResponse": {
        "title": "FlagToChannelActionMetadataResponse",
        "required": [
          "channel_id"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "FlagToChannelActionResponse": {
        "title": "FlagToChannelActionResponse",
        "required": [
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "$ref": "#/components/schemas/FlagToChannelActionMetadataResponse"
          }
        }
      },
      "ForumTagResponse": {
        "title": "ForumTagResponse",
        "required": [
          "id",
          "name",
          "moderated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "moderated": {
            "type": "boolean"
          },
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FriendInviteResponse": {
        "title": "FriendInviteResponse",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTypes"
                  }
                ]
              },
              {}
            ]
          },
          "code": {
            "type": "string"
          },
          "inviter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "max_age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "friends_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteChannelResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "is_contact": {
            "type": "boolean",
            "nullable": true
          },
          "uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GatewayBotResponse": {
        "title": "GatewayBotResponse",
        "required": [
          "url",
          "session_start_limit",
          "shards"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "session_start_limit": {
            "$ref": "#/components/schemas/GatewayBotSessionStartLimitResponse"
          },
          "shards": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GatewayBotSessionStartLimitResponse": {
        "title": "GatewayBotSessionStartLimitResponse",
        "required": [
          "max_concurrency",
          "remaining",
          "reset_after",
          "total"
        ],
        "type": "object",
        "properties": {
          "max_concurrency": {
            "type": "integer",
            "format": "int32"
          },
          "remaining": {
            "type": "integer",
            "format": "int32"
          },
          "reset_after": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GatewayResponse": {
        "title": "GatewayResponse",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "GithubAuthor": {
        "title": "GithubAuthor",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 152133,
            "type": "string"
          }
        }
      },
      "GithubCheckApp": {
        "title": "GithubCheckApp",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 152133,
            "type": "string"
          }
        }
      },
      "GithubCheckPullRequest": {
        "title": "GithubCheckPullRequest",
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GithubCheckRun": {
        "title": "GithubCheckRun",
        "required": [
          "name",
          "html_url",
          "check_suite"
        ],
        "type": "object",
        "properties": {
          "conclusion": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 152133,
            "type": "string"
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "check_suite": {
            "$ref": "#/components/schemas/GithubCheckSuite"
          },
          "details_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "output": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubCheckRunOutput"
              },
              {
                "nullable": true
              }
            ]
          },
          "pull_requests": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GithubCheckPullRequest"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "GithubCheckRunOutput": {
        "title": "GithubCheckRunOutput",
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "summary": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          }
        }
      },
      "GithubCheckSuite": {
        "title": "GithubCheckSuite",
        "required": [
          "head_sha",
          "app"
        ],
        "type": "object",
        "properties": {
          "conclusion": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "head_branch": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "head_sha": {
            "maxLength": 152133,
            "type": "string"
          },
          "pull_requests": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GithubCheckPullRequest"
            },
            "description": "",
            "nullable": true
          },
          "app": {
            "$ref": "#/components/schemas/GithubCheckApp"
          }
        }
      },
      "GithubComment": {
        "title": "GithubComment",
        "required": [
          "id",
          "html_url",
          "user",
          "body"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/GithubUser"
          },
          "commit_id": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "body": {
            "maxLength": 152133,
            "type": "string"
          }
        }
      },
      "GithubCommit": {
        "title": "GithubCommit",
        "required": [
          "id",
          "url",
          "message",
          "author"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 152133,
            "type": "string"
          },
          "url": {
            "maxLength": 2048,
            "type": "string"
          },
          "message": {
            "maxLength": 152133,
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/GithubAuthor"
          }
        }
      },
      "GithubDiscussion": {
        "title": "GithubDiscussion",
        "required": [
          "title",
          "number",
          "html_url",
          "user"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 152133,
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "answer_html_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "body": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/GithubUser"
          }
        }
      },
      "GithubIssue": {
        "title": "GithubIssue",
        "required": [
          "id",
          "number",
          "html_url",
          "user",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/GithubUser"
          },
          "title": {
            "maxLength": 152133,
            "type": "string"
          },
          "body": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "pull_request": {}
        }
      },
      "GithubRelease": {
        "title": "GithubRelease",
        "required": [
          "id",
          "tag_name",
          "html_url",
          "author"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tag_name": {
            "maxLength": 152133,
            "type": "string"
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/GithubUser"
          }
        }
      },
      "GithubRepository": {
        "title": "GithubRepository",
        "required": [
          "id",
          "html_url",
          "name",
          "full_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "name": {
            "maxLength": 152133,
            "type": "string"
          },
          "full_name": {
            "maxLength": 152133,
            "type": "string"
          }
        }
      },
      "GithubReview": {
        "title": "GithubReview",
        "required": [
          "user",
          "html_url",
          "state"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/GithubUser"
          },
          "body": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "state": {
            "maxLength": 152133,
            "type": "string"
          }
        }
      },
      "GithubUser": {
        "title": "GithubUser",
        "required": [
          "id",
          "login",
          "html_url",
          "avatar_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "login": {
            "maxLength": 152133,
            "type": "string"
          },
          "html_url": {
            "maxLength": 2048,
            "type": "string"
          },
          "avatar_url": {
            "maxLength": 2048,
            "type": "string"
          }
        }
      },
      "GithubWebhook": {
        "title": "GithubWebhook",
        "required": [
          "sender"
        ],
        "type": "object",
        "properties": {
          "action": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "ref": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "ref_type": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "comment": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubComment"
              },
              {
                "nullable": true
              }
            ]
          },
          "issue": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubIssue"
              },
              {
                "nullable": true
              }
            ]
          },
          "pull_request": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubIssue"
              },
              {
                "nullable": true
              }
            ]
          },
          "repository": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubRepository"
              },
              {
                "nullable": true
              }
            ]
          },
          "forkee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubRepository"
              },
              {
                "nullable": true
              }
            ]
          },
          "sender": {
            "$ref": "#/components/schemas/GithubUser"
          },
          "member": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubUser"
              },
              {
                "nullable": true
              }
            ]
          },
          "release": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubRelease"
              },
              {
                "nullable": true
              }
            ]
          },
          "head_commit": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubCommit"
              },
              {
                "nullable": true
              }
            ]
          },
          "commits": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GithubCommit"
            },
            "description": "",
            "nullable": true
          },
          "forced": {
            "type": "boolean",
            "nullable": true
          },
          "compare": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "review": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubReview"
              },
              {
                "nullable": true
              }
            ]
          },
          "check_run": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubCheckRun"
              },
              {
                "nullable": true
              }
            ]
          },
          "check_suite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubCheckSuite"
              },
              {
                "nullable": true
              }
            ]
          },
          "discussion": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubDiscussion"
              },
              {
                "nullable": true
              }
            ]
          },
          "answer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubComment"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "GroupDMInviteResponse": {
        "title": "GroupDMInviteResponse",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTypes"
                  }
                ]
              },
              {}
            ]
          },
          "code": {
            "type": "string"
          },
          "inviter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "max_age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "channel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteChannelResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildAuditLogResponse": {
        "title": "GuildAuditLogResponse",
        "required": [
          "audit_log_entries",
          "users",
          "integrations",
          "webhooks",
          "guild_scheduled_events",
          "threads",
          "application_commands",
          "auto_moderation_rules"
        ],
        "type": "object",
        "properties": {
          "audit_log_entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogEntryResponse"
            },
            "description": ""
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": ""
          },
          "integrations": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialDiscordIntegrationResponse"
                },
                {
                  "$ref": "#/components/schemas/PartialExternalConnectionIntegrationResponse"
                },
                {
                  "$ref": "#/components/schemas/PartialGuildSubscriptionIntegrationResponse"
                }
              ]
            },
            "description": ""
          },
          "webhooks": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationIncomingWebhookResponse"
                },
                {
                  "$ref": "#/components/schemas/ChannelFollowerWebhookResponse"
                },
                {
                  "$ref": "#/components/schemas/GuildIncomingWebhookResponse"
                }
              ]
            },
            "description": ""
          },
          "guild_scheduled_events": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ExternalScheduledEventResponse"
                },
                {
                  "$ref": "#/components/schemas/StageScheduledEventResponse"
                },
                {
                  "$ref": "#/components/schemas/VoiceScheduledEventResponse"
                }
              ]
            },
            "description": ""
          },
          "threads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThreadResponse"
            },
            "description": ""
          },
          "application_commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandResponse"
            },
            "description": ""
          },
          "auto_moderation_rules": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DefaultKeywordRuleResponse"
                },
                {
                  "$ref": "#/components/schemas/KeywordRuleResponse"
                },
                {
                  "$ref": "#/components/schemas/MLSpamRuleResponse"
                },
                {
                  "$ref": "#/components/schemas/MentionSpamRuleResponse"
                },
                {
                  "$ref": "#/components/schemas/SpamLinkRuleResponse"
                }
              ]
            },
            "description": ""
          }
        }
      },
      "GuildBanResponse": {
        "title": "GuildBanResponse",
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildChannelResponse": {
        "title": "GuildChannelResponse",
        "required": [
          "id",
          "type",
          "flags",
          "guild_id",
          "name",
          "position"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelTypes"
          },
          "last_message_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "last_pin_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "rate_limit_per_user": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          },
          "permissions": {
            "type": "string",
            "nullable": true
          },
          "topic": {
            "type": "string",
            "nullable": true
          },
          "default_auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "default_thread_rate_limit_per_user": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "permission_overwrites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelPermissionOverwriteResponse"
            },
            "description": "",
            "nullable": true
          },
          "nsfw": {
            "type": "boolean",
            "nullable": true
          },
          "available_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForumTagResponse"
            },
            "description": "",
            "nullable": true
          },
          "default_reaction_emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DefaultReactionEmojiResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "default_sort_order": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadSortOrder"
                  }
                ]
              },
              {}
            ]
          },
          "default_forum_layout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ForumLayout"
                  }
                ]
              },
              {}
            ]
          }
        }
      },
      "GuildCreateRequest": {
        "title": "GuildCreateRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "verification_level": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VerificationLevels"
                  }
                ]
              },
              {}
            ]
          },
          "default_message_notifications": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/UserNotificationSettings"
                  }
                ]
              },
              {}
            ]
          },
          "explicit_content_filter": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildExplicitContentFilterTypes"
                  }
                ]
              },
              {}
            ]
          },
          "preferred_locale": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/AvailableLocalesEnum"
                  }
                ]
              },
              {}
            ]
          },
          "afk_timeout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/AfkTimeouts"
                  }
                ]
              },
              {}
            ]
          },
          "roles": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateGuildRequestRoleItem"
            },
            "description": "",
            "nullable": true
          },
          "channels": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateGuildRequestChannelItem"
            },
            "description": "",
            "nullable": true
          },
          "afk_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "system_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "system_channel_flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildHomeSettingsResponse": {
        "title": "GuildHomeSettingsResponse",
        "required": [
          "guild_id",
          "enabled"
        ],
        "type": "object",
        "properties": {
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "welcome_message": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/WelcomeMessageResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "new_member_actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/NewMemberActionResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "resource_channels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ResourceChannelResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "GuildIncomingWebhookResponse": {
        "title": "GuildIncomingWebhookResponse",
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildInviteResponse": {
        "title": "GuildInviteResponse",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTypes"
                  }
                ]
              },
              {}
            ]
          },
          "code": {
            "type": "string"
          },
          "inviter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "max_age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "is_contact": {
            "type": "boolean",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "guild": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteGuildResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "channel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteChannelResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "stage_instance": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteStageInstanceResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTargetTypes"
                  }
                ]
              },
              {}
            ]
          },
          "target_user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteApplicationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_scheduled_event": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "temporary": {
            "type": "boolean",
            "nullable": true
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approximate_presence_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildMFALevelResponse": {
        "title": "GuildMFALevelResponse",
        "required": [
          "level"
        ],
        "type": "object",
        "properties": {
          "level": {
            "$ref": "#/components/schemas/GuildMFALevel"
          }
        }
      },
      "GuildMemberResponse": {
        "title": "GuildMemberResponse",
        "required": [
          "flags",
          "joined_at",
          "pending",
          "roles",
          "user",
          "mute",
          "deaf"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "avatar_decoration_data": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          },
          "communication_disabled_until": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "joined_at": {
            "type": "string",
            "format": "date-time"
          },
          "nick": {
            "type": "string",
            "nullable": true
          },
          "pending": {
            "type": "boolean"
          },
          "premium_since": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "mute": {
            "type": "boolean"
          },
          "deaf": {
            "type": "boolean"
          }
        }
      },
      "GuildOnboardingResponse": {
        "title": "GuildOnboardingResponse",
        "required": [
          "guild_id",
          "prompts",
          "default_channel_ids",
          "enabled"
        ],
        "type": "object",
        "properties": {
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "prompts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingPromptResponse"
            },
            "description": ""
          },
          "default_channel_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "GuildPatchRequestPartial": {
        "title": "GuildPatchRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "description": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "verification_level": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VerificationLevels"
                  }
                ]
              },
              {}
            ]
          },
          "default_message_notifications": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/UserNotificationSettings"
                  }
                ]
              },
              {}
            ]
          },
          "explicit_content_filter": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildExplicitContentFilterTypes"
                  }
                ]
              },
              {}
            ]
          },
          "preferred_locale": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/AvailableLocalesEnum"
                  }
                ]
              },
              {}
            ]
          },
          "afk_timeout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/AfkTimeouts"
                  }
                ]
              },
              {}
            ]
          },
          "afk_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "system_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "owner_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "splash": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "system_channel_flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "features": {
            "maxItems": 1521,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 152133,
              "type": "string",
              "nullable": true
            },
            "description": "",
            "nullable": true
          },
          "discovery_splash": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "home_header": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "rules_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "safety_alerts_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "public_updates_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "premium_progress_bar_enabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "GuildPreviewResponse": {
        "title": "GuildPreviewResponse",
        "required": [
          "id",
          "name",
          "features",
          "approximate_member_count",
          "approximate_presence_count",
          "emojis",
          "stickers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "home_header": {
            "type": "string",
            "nullable": true
          },
          "splash": {
            "type": "string",
            "nullable": true
          },
          "discovery_splash": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildFeatures"
            },
            "description": ""
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32"
          },
          "approximate_presence_count": {
            "type": "integer",
            "format": "int32"
          },
          "emojis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmojiResponse"
            },
            "description": ""
          },
          "stickers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildStickerResponse"
            },
            "description": ""
          }
        }
      },
      "GuildProductPurchaseResponse": {
        "title": "GuildProductPurchaseResponse",
        "required": [
          "listing_id",
          "product_name"
        ],
        "type": "object",
        "properties": {
          "listing_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "product_name": {
            "type": "string"
          }
        }
      },
      "GuildPruneResponse": {
        "title": "GuildPruneResponse",
        "type": "object",
        "properties": {
          "pruned": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildResponse": {
        "title": "GuildResponse",
        "required": [
          "id",
          "name",
          "features",
          "owner_id",
          "region",
          "afk_timeout",
          "system_channel_flags",
          "widget_enabled",
          "verification_level",
          "roles",
          "default_message_notifications",
          "mfa_level",
          "explicit_content_filter",
          "premium_tier",
          "premium_subscription_count",
          "preferred_locale",
          "premium_progress_bar_enabled",
          "nsfw",
          "nsfw_level",
          "emojis",
          "stickers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "home_header": {
            "type": "string",
            "nullable": true
          },
          "splash": {
            "type": "string",
            "nullable": true
          },
          "discovery_splash": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildFeatures"
            },
            "description": ""
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "owner_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "region": {
            "type": "string"
          },
          "afk_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "afk_timeout": {
            "$ref": "#/components/schemas/AfkTimeouts"
          },
          "system_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "system_channel_flags": {
            "type": "integer",
            "format": "int32"
          },
          "widget_enabled": {
            "type": "boolean"
          },
          "widget_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "verification_level": {
            "$ref": "#/components/schemas/VerificationLevels"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildRoleResponse"
            },
            "description": ""
          },
          "default_message_notifications": {
            "$ref": "#/components/schemas/UserNotificationSettings"
          },
          "mfa_level": {
            "$ref": "#/components/schemas/GuildMFALevel"
          },
          "explicit_content_filter": {
            "$ref": "#/components/schemas/GuildExplicitContentFilterTypes"
          },
          "max_presences": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_members": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_stage_video_channel_users": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_video_channel_users": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "vanity_url_code": {
            "type": "string",
            "nullable": true
          },
          "premium_tier": {
            "$ref": "#/components/schemas/PremiumGuildTiers"
          },
          "premium_subscription_count": {
            "type": "integer",
            "format": "int32"
          },
          "preferred_locale": {
            "$ref": "#/components/schemas/AvailableLocalesEnum"
          },
          "rules_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "safety_alerts_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "public_updates_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "premium_progress_bar_enabled": {
            "type": "boolean"
          },
          "nsfw": {
            "type": "boolean"
          },
          "nsfw_level": {
            "$ref": "#/components/schemas/GuildNSFWContentLevel"
          },
          "emojis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmojiResponse"
            },
            "description": ""
          },
          "stickers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildStickerResponse"
            },
            "description": ""
          }
        }
      },
      "GuildRoleResponse": {
        "title": "GuildRoleResponse",
        "required": [
          "id",
          "name",
          "permissions",
          "position",
          "color",
          "hoist",
          "managed",
          "mentionable"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "color": {
            "type": "integer",
            "format": "int32"
          },
          "hoist": {
            "type": "boolean"
          },
          "managed": {
            "type": "boolean"
          },
          "mentionable": {
            "type": "boolean"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "unicode_emoji": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GuildRoleTagsResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "GuildRoleTagsResponse": {
        "title": "GuildRoleTagsResponse",
        "type": "object",
        "properties": {
          "premium_subscriber": {
            "type": "string",
            "nullable": true
          },
          "bot_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "integration_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "subscription_listing_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "available_for_purchase": {
            "type": "string",
            "nullable": true
          },
          "guild_connections": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildStickerResponse": {
        "title": "GuildStickerResponse",
        "required": [
          "id",
          "name",
          "tags",
          "type",
          "available",
          "guild_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "format_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/StickerFormatTypes"
                  }
                ]
              },
              {}
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "available": {
            "type": "boolean"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "GuildSubscriptionIntegrationResponse": {
        "title": "GuildSubscriptionIntegrationResponse",
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "guild_subscription"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "GuildTemplateChannelResponse": {
        "title": "GuildTemplateChannelResponse",
        "required": [
          "type",
          "bitrate",
          "user_limit",
          "nsfw",
          "rate_limit_per_user",
          "permission_overwrites",
          "template"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChannelTypes"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "topic": {
            "type": "string",
            "nullable": true
          },
          "bitrate": {
            "type": "integer",
            "format": "int32"
          },
          "user_limit": {
            "type": "integer",
            "format": "int32"
          },
          "nsfw": {
            "type": "boolean"
          },
          "rate_limit_per_user": {
            "type": "integer",
            "format": "int32"
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "default_auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "permission_overwrites": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChannelPermissionOverwriteResponse"
                }
              ]
            },
            "description": ""
          },
          "available_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildTemplateChannelTags"
            },
            "description": "",
            "nullable": true
          },
          "template": {
            "type": "string"
          },
          "default_reaction_emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DefaultReactionEmojiResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "default_thread_rate_limit_per_user": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "default_sort_order": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadSortOrder"
                  }
                ]
              },
              {}
            ]
          },
          "default_forum_layout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ForumLayout"
                  }
                ]
              },
              {}
            ]
          },
          "icon_emoji": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          },
          "theme_color": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildTemplateChannelTags": {
        "title": "GuildTemplateChannelTags",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "type": "string",
            "nullable": true
          },
          "moderated": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "GuildTemplateResponse": {
        "title": "GuildTemplateResponse",
        "required": [
          "code",
          "name",
          "usage_count",
          "creator_id",
          "created_at",
          "updated_at",
          "source_guild_id",
          "serialized_source_guild"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "usage_count": {
            "type": "integer",
            "format": "int32"
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "creator": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "source_guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "serialized_source_guild": {
            "$ref": "#/components/schemas/GuildTemplateSnapshotResponse"
          },
          "is_dirty": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "GuildTemplateRoleResponse": {
        "title": "GuildTemplateRoleResponse",
        "required": [
          "id",
          "name",
          "permissions",
          "color",
          "hoist",
          "mentionable"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          },
          "color": {
            "type": "integer",
            "format": "int32"
          },
          "hoist": {
            "type": "boolean"
          },
          "mentionable": {
            "type": "boolean"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "unicode_emoji": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildTemplateSnapshotResponse": {
        "title": "GuildTemplateSnapshotResponse",
        "required": [
          "name",
          "verification_level",
          "default_message_notifications",
          "explicit_content_filter",
          "preferred_locale",
          "afk_timeout",
          "system_channel_flags",
          "roles",
          "channels"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "verification_level": {
            "$ref": "#/components/schemas/VerificationLevels"
          },
          "default_message_notifications": {
            "$ref": "#/components/schemas/UserNotificationSettings"
          },
          "explicit_content_filter": {
            "$ref": "#/components/schemas/GuildExplicitContentFilterTypes"
          },
          "preferred_locale": {
            "$ref": "#/components/schemas/AvailableLocalesEnum"
          },
          "afk_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "afk_timeout": {
            "$ref": "#/components/schemas/AfkTimeouts"
          },
          "system_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "system_channel_flags": {
            "type": "integer",
            "format": "int32"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildTemplateRoleResponse"
            },
            "description": ""
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildTemplateChannelResponse"
            },
            "description": ""
          }
        }
      },
      "GuildWelcomeChannel": {
        "title": "GuildWelcomeChannel",
        "required": [
          "channel_id",
          "description"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "description": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildWelcomeScreenChannelResponse": {
        "title": "GuildWelcomeScreenChannelResponse",
        "required": [
          "channel_id",
          "description"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildWelcomeScreenResponse": {
        "title": "GuildWelcomeScreenResponse",
        "required": [
          "welcome_channels"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "welcome_channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildWelcomeScreenChannelResponse"
            },
            "description": ""
          }
        }
      },
      "GuildWithCountsResponse": {
        "title": "GuildWithCountsResponse",
        "required": [
          "id",
          "name",
          "features",
          "owner_id",
          "region",
          "afk_timeout",
          "system_channel_flags",
          "widget_enabled",
          "verification_level",
          "roles",
          "default_message_notifications",
          "mfa_level",
          "explicit_content_filter",
          "premium_tier",
          "premium_subscription_count",
          "preferred_locale",
          "premium_progress_bar_enabled",
          "nsfw",
          "nsfw_level",
          "emojis",
          "stickers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "home_header": {
            "type": "string",
            "nullable": true
          },
          "splash": {
            "type": "string",
            "nullable": true
          },
          "discovery_splash": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildFeatures"
            },
            "description": ""
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "owner_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "region": {
            "type": "string"
          },
          "afk_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "afk_timeout": {
            "$ref": "#/components/schemas/AfkTimeouts"
          },
          "system_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "system_channel_flags": {
            "type": "integer",
            "format": "int32"
          },
          "widget_enabled": {
            "type": "boolean"
          },
          "widget_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "verification_level": {
            "$ref": "#/components/schemas/VerificationLevels"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildRoleResponse"
            },
            "description": ""
          },
          "default_message_notifications": {
            "$ref": "#/components/schemas/UserNotificationSettings"
          },
          "mfa_level": {
            "$ref": "#/components/schemas/GuildMFALevel"
          },
          "explicit_content_filter": {
            "$ref": "#/components/schemas/GuildExplicitContentFilterTypes"
          },
          "max_presences": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_members": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_stage_video_channel_users": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_video_channel_users": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "vanity_url_code": {
            "type": "string",
            "nullable": true
          },
          "premium_tier": {
            "$ref": "#/components/schemas/PremiumGuildTiers"
          },
          "premium_subscription_count": {
            "type": "integer",
            "format": "int32"
          },
          "preferred_locale": {
            "$ref": "#/components/schemas/AvailableLocalesEnum"
          },
          "rules_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "safety_alerts_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "public_updates_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "premium_progress_bar_enabled": {
            "type": "boolean"
          },
          "nsfw": {
            "type": "boolean"
          },
          "nsfw_level": {
            "$ref": "#/components/schemas/GuildNSFWContentLevel"
          },
          "emojis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmojiResponse"
            },
            "description": ""
          },
          "stickers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildStickerResponse"
            },
            "description": ""
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approximate_presence_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "IncomingWebhookInteractionRequest": {
        "title": "IncomingWebhookInteractionRequest",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": "",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          },
          "tts": {
            "type": "boolean",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "IncomingWebhookRequestPartial": {
        "title": "IncomingWebhookRequestPartial",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": "",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          },
          "tts": {
            "type": "boolean",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "username": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "avatar_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "thread_name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "applied_tags": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "IncomingWebhookUpdateForInteractionCallbackRequestPartial": {
        "title": "IncomingWebhookUpdateForInteractionCallbackRequestPartial",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": "",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "IncomingWebhookUpdateRequestPartial": {
        "title": "IncomingWebhookUpdateRequestPartial",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": "",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "InputText": {
        "title": "InputText",
        "required": [
          "type",
          "custom_id",
          "style",
          "label"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "style": {
            "$ref": "#/components/schemas/TextStyleTypes"
          },
          "label": {
            "maxLength": 45,
            "type": "string"
          },
          "value": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "min_length": {
            "maximum": 4000.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_length": {
            "maximum": 4000.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "IntegrationApplicationResponse": {
        "title": "IntegrationApplicationResponse",
        "required": [
          "id",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationTypes"
                  }
                ]
              },
              {}
            ]
          },
          "cover_image": {
            "type": "string",
            "nullable": true
          },
          "primary_sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "bot": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "InteractionApplicationCommandAutocompleteCallbackIntegerData": {
        "title": "InteractionApplicationCommandAutocompleteCallbackIntegerData",
        "type": "object",
        "properties": {
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandOptionIntegerChoice"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "InteractionApplicationCommandAutocompleteCallbackNumberData": {
        "title": "InteractionApplicationCommandAutocompleteCallbackNumberData",
        "type": "object",
        "properties": {
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandOptionNumberChoice"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "InteractionApplicationCommandAutocompleteCallbackStringData": {
        "title": "InteractionApplicationCommandAutocompleteCallbackStringData",
        "type": "object",
        "properties": {
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandOptionStringChoice"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "InviteApplicationResponse": {
        "title": "InviteApplicationResponse",
        "required": [
          "id",
          "name",
          "description",
          "verify_key",
          "flags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationTypes"
                  }
                ]
              },
              {}
            ]
          },
          "cover_image": {
            "type": "string",
            "nullable": true
          },
          "primary_sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "bot": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "rpc_origins": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "description": "",
            "nullable": true
          },
          "bot_public": {
            "type": "boolean",
            "nullable": true
          },
          "bot_require_code_grant": {
            "type": "boolean",
            "nullable": true
          },
          "terms_of_service_url": {
            "type": "string",
            "nullable": true
          },
          "privacy_policy_url": {
            "type": "string",
            "nullable": true
          },
          "custom_install_url": {
            "type": "string",
            "nullable": true
          },
          "install_params": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplicationOAuth2InstallParamsResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "verify_key": {
            "type": "string"
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "max_participants": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "InviteChannelRecipientResponse": {
        "title": "InviteChannelRecipientResponse",
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        }
      },
      "InviteChannelResponse": {
        "title": "InviteChannelResponse",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelTypes"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InviteChannelRecipientResponse"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "InviteGuildResponse": {
        "title": "InviteGuildResponse",
        "required": [
          "id",
          "name",
          "features"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "splash": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildFeatures"
            },
            "description": ""
          },
          "verification_level": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VerificationLevels"
                  }
                ]
              },
              {}
            ]
          },
          "vanity_url_code": {
            "type": "string",
            "nullable": true
          },
          "nsfw_level": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildNSFWContentLevel"
                  }
                ]
              },
              {}
            ]
          },
          "nsfw": {
            "type": "boolean",
            "nullable": true
          },
          "premium_subscription_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "InviteStageInstanceResponse": {
        "title": "InviteStageInstanceResponse",
        "required": [
          "topic"
        ],
        "type": "object",
        "properties": {
          "topic": {
            "type": "string"
          },
          "participant_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "speaker_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildMemberResponse"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "KeywordRuleResponse": {
        "title": "KeywordRuleResponse",
        "required": [
          "id",
          "guild_id",
          "creator_id",
          "name",
          "event_type",
          "actions",
          "trigger_type",
          "trigger_metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageActionResponse"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelActionResponse"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserActionResponse"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledActionResponse"
                }
              ]
            },
            "description": ""
          },
          "trigger_type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_metadata": {
            "$ref": "#/components/schemas/KeywordTriggerMetadataResponse"
          }
        }
      },
      "KeywordTriggerMetadata": {
        "title": "KeywordTriggerMetadata",
        "type": "object",
        "properties": {
          "keyword_filter": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "maxLength": 60,
              "minLength": 1,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "regex_patterns": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "maxLength": 260,
              "minLength": 1,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "allow_list": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "maxLength": 60,
              "minLength": 1,
              "type": "string"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "KeywordTriggerMetadataResponse": {
        "title": "KeywordTriggerMetadataResponse",
        "required": [
          "keyword_filter",
          "regex_patterns",
          "allow_list"
        ],
        "type": "object",
        "properties": {
          "keyword_filter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "regex_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "KeywordUpsertRequest": {
        "title": "KeywordUpsertRequest",
        "required": [
          "name",
          "event_type",
          "trigger_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "trigger_metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/KeywordTriggerMetadata"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "KeywordUpsertRequestPartial": {
        "title": "KeywordUpsertRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "$ref": "#/components/schemas/AutomodTriggerType"
          },
          "trigger_metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/KeywordTriggerMetadata"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MLSpamRuleResponse": {
        "title": "MLSpamRuleResponse",
        "required": [
          "id",
          "guild_id",
          "creator_id",
          "name",
          "event_type",
          "actions",
          "trigger_type",
          "trigger_metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageActionResponse"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelActionResponse"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserActionResponse"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledActionResponse"
                }
              ]
            },
            "description": ""
          },
          "trigger_type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_metadata": {
            "type": "object"
          }
        }
      },
      "MLSpamUpsertRequest": {
        "title": "MLSpamUpsertRequest",
        "required": [
          "name",
          "event_type",
          "trigger_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "trigger_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MLSpamUpsertRequestPartial": {
        "title": "MLSpamUpsertRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "$ref": "#/components/schemas/AutomodTriggerType"
          },
          "trigger_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MentionSpamRuleResponse": {
        "title": "MentionSpamRuleResponse",
        "required": [
          "id",
          "guild_id",
          "creator_id",
          "name",
          "event_type",
          "actions",
          "trigger_type",
          "trigger_metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageActionResponse"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelActionResponse"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserActionResponse"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledActionResponse"
                }
              ]
            },
            "description": ""
          },
          "trigger_type": {
            "enum": [
              5
            ],
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_metadata": {
            "$ref": "#/components/schemas/MentionSpamTriggerMetadataResponse"
          }
        }
      },
      "MentionSpamTriggerMetadata": {
        "title": "MentionSpamTriggerMetadata",
        "required": [
          "mention_total_limit"
        ],
        "type": "object",
        "properties": {
          "mention_total_limit": {
            "maximum": 50.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "mention_raid_protection_enabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MentionSpamTriggerMetadataResponse": {
        "title": "MentionSpamTriggerMetadataResponse",
        "required": [
          "mention_total_limit"
        ],
        "type": "object",
        "properties": {
          "mention_total_limit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MentionSpamUpsertRequest": {
        "title": "MentionSpamUpsertRequest",
        "required": [
          "name",
          "event_type",
          "trigger_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "enum": [
              5
            ],
            "type": "integer",
            "format": "int32"
          },
          "trigger_metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MentionSpamTriggerMetadata"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MentionSpamUpsertRequestPartial": {
        "title": "MentionSpamUpsertRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {
            "$ref": "#/components/schemas/AutomodTriggerType"
          },
          "trigger_metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MentionSpamTriggerMetadata"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MentionableSelect": {
        "title": "MentionableSelect",
        "required": [
          "type",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              7
            ],
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "placeholder": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "maximum": 25.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "maximum": 25.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "default_values": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RoleSelectDefaultValue"
                },
                {
                  "$ref": "#/components/schemas/UserSelectDefaultValue"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "MessageAllowedMentionsRequest": {
        "title": "MessageAllowedMentionsRequest",
        "type": "object",
        "properties": {
          "parse": {
            "maxItems": 1521,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowedMentionTypes"
            },
            "description": "",
            "nullable": true
          },
          "users": {
            "maxItems": 100,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "oneOf": [
                {
                  "pattern": "^(0|[1-9][0-9]*)$",
                  "type": "string"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "roles": {
            "maxItems": 100,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "oneOf": [
                {
                  "pattern": "^(0|[1-9][0-9]*)$",
                  "type": "string"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "replied_user": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageAttachmentRequest": {
        "title": "MessageAttachmentRequest",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "filename": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "is_remix": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageAttachmentResponse": {
        "title": "MessageAttachmentResponse",
        "required": [
          "id",
          "filename",
          "size",
          "url",
          "proxy_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          },
          "proxy_url": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "duration_secs": {
            "type": "number",
            "nullable": true
          },
          "waveform": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "content_type": {
            "type": "string",
            "nullable": true
          },
          "ephemeral": {
            "type": "boolean",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplicationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "clip_created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "clip_participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "MessageCallResponse": {
        "title": "MessageCallResponse",
        "required": [
          "participants"
        ],
        "type": "object",
        "properties": {
          "ended_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "participants": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "MessageComponentActionRowResponse": {
        "title": "MessageComponentActionRowResponse",
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "components": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageComponentButtonResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentChannelSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentInputTextResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentMentionableSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentRoleSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentStringSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentUserSelectResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "MessageComponentButtonResponse": {
        "title": "MessageComponentButtonResponse",
        "required": [
          "type",
          "id",
          "style"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "type": "string",
            "nullable": true
          },
          "style": {
            "$ref": "#/components/schemas/ButtonStyleTypes"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageComponentEmojiResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MessageComponentChannelSelectResponse": {
        "title": "MessageComponentChannelSelectResponse",
        "required": [
          "type",
          "id",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              8
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "type": "string"
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "channel_types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTypes"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "MessageComponentEmojiResponse": {
        "title": "MessageComponentEmojiResponse",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "animated": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageComponentInputTextResponse": {
        "title": "MessageComponentInputTextResponse",
        "required": [
          "type",
          "id",
          "custom_id",
          "style"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "type": "string"
          },
          "style": {
            "$ref": "#/components/schemas/TextStyleTypes"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "min_length": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_length": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "MessageComponentMentionableSelectResponse": {
        "title": "MessageComponentMentionableSelectResponse",
        "required": [
          "type",
          "id",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              7
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "type": "string"
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageComponentRoleSelectResponse": {
        "title": "MessageComponentRoleSelectResponse",
        "required": [
          "type",
          "id",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              6
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "type": "string"
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageComponentStringSelectResponse": {
        "title": "MessageComponentStringSelectResponse",
        "required": [
          "type",
          "id",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "type": "string"
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SelectOptionResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "MessageComponentUserSelectResponse": {
        "title": "MessageComponentUserSelectResponse",
        "required": [
          "type",
          "id",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              5
            ],
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "type": "string"
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageCreateRequest": {
        "title": "MessageCreateRequest",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "sticker_ids": {
            "maxItems": 3,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": "",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          },
          "message_reference": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageReferenceRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "nonce": {
            "oneOf": [
              {
                "maximum": 9.2233720368547758E+18,
                "minimum": -9.2233720368547758E+18,
                "type": "integer",
                "format": "int64"
              },
              {
                "maxLength": 25,
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "tts": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageEditRequestPartial": {
        "title": "MessageEditRequestPartial",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed"
            },
            "description": "",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "sticker_ids": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": "",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "MessageEmbedAuthorResponse": {
        "title": "MessageEmbedAuthorResponse",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "icon_url": {
            "type": "string",
            "nullable": true
          },
          "proxy_icon_url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MessageEmbedFieldResponse": {
        "title": "MessageEmbedFieldResponse",
        "required": [
          "name",
          "value",
          "inline"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "inline": {
            "type": "boolean"
          }
        }
      },
      "MessageEmbedFooterResponse": {
        "title": "MessageEmbedFooterResponse",
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "icon_url": {
            "type": "string",
            "nullable": true
          },
          "proxy_icon_url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MessageEmbedImageResponse": {
        "title": "MessageEmbedImageResponse",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          },
          "proxy_url": {
            "type": "string",
            "nullable": true
          },
          "width": {
            "maximum": 4294967295.0,
            "minimum": 0.0,
            "oneOf": [
              {
                "maximum": 4294967295.0,
                "minimum": 0.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          },
          "height": {
            "maximum": 4294967295.0,
            "minimum": 0.0,
            "oneOf": [
              {
                "maximum": 4294967295.0,
                "minimum": 0.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "placeholder_version": {
            "maximum": 4294967295.0,
            "minimum": 0.0,
            "oneOf": [
              {
                "maximum": 4294967295.0,
                "minimum": 0.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MessageEmbedProviderResponse": {
        "title": "MessageEmbedProviderResponse",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MessageEmbedResponse": {
        "title": "MessageEmbedResponse",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageEmbedFieldResponse"
            },
            "description": "",
            "nullable": true
          },
          "author": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageEmbedAuthorResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "provider": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageEmbedProviderResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "image": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageEmbedImageResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "thumbnail": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageEmbedImageResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "video": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageEmbedVideoResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "footer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageEmbedFooterResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MessageEmbedVideoResponse": {
        "title": "MessageEmbedVideoResponse",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          },
          "proxy_url": {
            "type": "string",
            "nullable": true
          },
          "width": {
            "maximum": 4294967295.0,
            "minimum": 0.0,
            "oneOf": [
              {
                "maximum": 4294967295.0,
                "minimum": 0.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          },
          "height": {
            "maximum": 4294967295.0,
            "minimum": 0.0,
            "oneOf": [
              {
                "maximum": 4294967295.0,
                "minimum": 0.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "placeholder_version": {
            "maximum": 4294967295.0,
            "minimum": 0.0,
            "oneOf": [
              {
                "maximum": 4294967295.0,
                "minimum": 0.0,
                "type": "integer",
                "format": "int64"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MessageInteractionResponse": {
        "title": "MessageInteractionResponse",
        "required": [
          "id",
          "type",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/InteractionTypes"
          },
          "name": {
            "type": "string"
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "name_localized": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MessageMentionChannelResponse": {
        "title": "MessageMentionChannelResponse",
        "required": [
          "id",
          "name",
          "type",
          "guild_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelTypes"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "MessageReactionCountDetailsResponse": {
        "title": "MessageReactionCountDetailsResponse",
        "required": [
          "burst",
          "normal"
        ],
        "type": "object",
        "properties": {
          "burst": {
            "type": "integer",
            "format": "int32"
          },
          "normal": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MessageReactionEmojiResponse": {
        "title": "MessageReactionEmojiResponse",
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "animated": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "MessageReactionResponse": {
        "title": "MessageReactionResponse",
        "required": [
          "emoji",
          "count",
          "count_details",
          "burst_colors",
          "me_burst",
          "me"
        ],
        "type": "object",
        "properties": {
          "emoji": {
            "$ref": "#/components/schemas/MessageReactionEmojiResponse"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "count_details": {
            "$ref": "#/components/schemas/MessageReactionCountDetailsResponse"
          },
          "burst_colors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "me_burst": {
            "type": "boolean"
          },
          "me": {
            "type": "boolean"
          }
        }
      },
      "MessageReferenceRequest": {
        "title": "MessageReferenceRequest",
        "required": [
          "message_id"
        ],
        "type": "object",
        "properties": {
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "message_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "fail_if_not_exists": {
            "type": "boolean",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/MessageReferenceType"
                  }
                ]
              },
              {}
            ]
          }
        }
      },
      "MessageReferenceResponse": {
        "title": "MessageReferenceResponse",
        "required": [
          "channel_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/MessageReferenceType"
                  }
                ]
              },
              {}
            ]
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "message_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MessageResponse": {
        "title": "MessageResponse",
        "required": [
          "type",
          "channel_id",
          "content",
          "attachments",
          "embeds",
          "timestamp",
          "flags",
          "components",
          "id",
          "author",
          "mentions",
          "mention_roles",
          "pinned",
          "mention_everyone",
          "tts"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MessageType"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentResponse"
            },
            "description": ""
          },
          "embeds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageEmbedResponse"
            },
            "description": ""
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "edited_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "components": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageComponentActionRowResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentButtonResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentChannelSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentInputTextResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentMentionableSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentRoleSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentStringSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/MessageComponentUserSelectResponse"
                }
              ]
            },
            "description": ""
          },
          "resolved": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResolvedObjectsResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": ""
          },
          "mention_roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "pinned": {
            "type": "boolean"
          },
          "mention_everyone": {
            "type": "boolean"
          },
          "tts": {
            "type": "boolean"
          },
          "call": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageCallResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "activity": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          },
          "application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BasicApplicationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "interaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageInteractionResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "nonce": {
            "oneOf": [
              {
                "maximum": 9.2233720368547758E+18,
                "minimum": -9.2233720368547758E+18,
                "type": "integer",
                "format": "int64"
              },
              {
                "maxLength": 25,
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "webhook_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "message_reference": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageReferenceResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "thread": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreadResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "mention_channels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageMentionChannelResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "stickers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GuildStickerResponse"
                },
                {
                  "$ref": "#/components/schemas/StandardStickerResponse"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "sticker_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageStickerItemResponse"
            },
            "description": "",
            "nullable": true
          },
          "role_subscription_data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageRoleSubscriptionDataResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "purchase_notification": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PurchaseNotificationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageReactionResponse"
            },
            "description": "",
            "nullable": true
          },
          "referenced_message": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BasicMessageResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "MessageRoleSubscriptionDataResponse": {
        "title": "MessageRoleSubscriptionDataResponse",
        "required": [
          "role_subscription_listing_id",
          "tier_name",
          "total_months_subscribed",
          "is_renewal"
        ],
        "type": "object",
        "properties": {
          "role_subscription_listing_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "tier_name": {
            "type": "string"
          },
          "total_months_subscribed": {
            "type": "integer",
            "format": "int32"
          },
          "is_renewal": {
            "type": "boolean"
          }
        }
      },
      "MessageStickerItemResponse": {
        "title": "MessageStickerItemResponse",
        "required": [
          "id",
          "name",
          "format_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "format_type": {
            "$ref": "#/components/schemas/StickerFormatTypes"
          }
        }
      },
      "ModalInteractionCallbackData": {
        "title": "ModalInteractionCallbackData",
        "required": [
          "custom_id",
          "title",
          "components"
        ],
        "type": "object",
        "properties": {
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "title": {
            "maxLength": 45,
            "type": "string"
          },
          "components": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow"
            },
            "description": ""
          }
        }
      },
      "ModalInteractionCallbackRequest": {
        "title": "ModalInteractionCallbackRequest",
        "required": [
          "type",
          "data"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              9
            ],
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/ModalInteractionCallbackData"
          }
        }
      },
      "MyGuildResponse": {
        "title": "MyGuildResponse",
        "required": [
          "id",
          "name",
          "owner",
          "permissions",
          "features"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "boolean"
          },
          "permissions": {
            "type": "string"
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildFeatures"
            },
            "description": ""
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approximate_presence_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "NewMemberActionResponse": {
        "title": "NewMemberActionResponse",
        "required": [
          "channel_id",
          "action_type",
          "title",
          "description"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "action_type": {
            "$ref": "#/components/schemas/NewMemberActionType"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SettingsEmojiResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuth2GetAuthorizationResponse": {
        "title": "OAuth2GetAuthorizationResponse",
        "required": [
          "application",
          "expires",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/ApplicationResponse"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2Scopes"
            },
            "description": ""
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "OAuth2GetKeys": {
        "title": "OAuth2GetKeys",
        "required": [
          "keys"
        ],
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2Key"
            },
            "description": ""
          }
        }
      },
      "OAuth2Key": {
        "title": "OAuth2Key",
        "required": [
          "kty",
          "use",
          "kid",
          "n",
          "e",
          "alg"
        ],
        "type": "object",
        "properties": {
          "kty": {
            "type": "string"
          },
          "use": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          },
          "n": {
            "type": "string"
          },
          "e": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          }
        }
      },
      "OnboardingPromptOptionRequest": {
        "title": "OnboardingPromptOptionRequest",
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "title": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "emoji_animated": {
            "type": "boolean",
            "nullable": true
          },
          "role_ids": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "channel_ids": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "OnboardingPromptOptionResponse": {
        "title": "OnboardingPromptOptionResponse",
        "required": [
          "id",
          "title",
          "description",
          "emoji",
          "role_ids",
          "channel_ids"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "emoji": {
            "$ref": "#/components/schemas/SettingsEmojiResponse"
          },
          "role_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "channel_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "OnboardingPromptResponse": {
        "title": "OnboardingPromptResponse",
        "required": [
          "id",
          "title",
          "options",
          "single_select",
          "required",
          "in_onboarding",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingPromptOptionResponse"
            },
            "description": ""
          },
          "single_select": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          },
          "in_onboarding": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/OnboardingPromptType"
          }
        }
      },
      "PartialDiscordIntegrationResponse": {
        "title": "PartialDiscordIntegrationResponse",
        "required": [
          "id",
          "type",
          "application_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "enum": [
              "discord"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "PartialExternalConnectionIntegrationResponse": {
        "title": "PartialExternalConnectionIntegrationResponse",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "PartialGuildSubscriptionIntegrationResponse": {
        "title": "PartialGuildSubscriptionIntegrationResponse",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "enum": [
              "guild_subscription"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "PongInteractionCallbackRequest": {
        "title": "PongInteractionCallbackRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PrivateApplicationResponse": {
        "title": "PrivateApplicationResponse",
        "required": [
          "id",
          "name",
          "description",
          "verify_key",
          "flags",
          "redirect_uris",
          "owner"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ApplicationTypes"
                  }
                ]
              },
              {}
            ]
          },
          "cover_image": {
            "type": "string",
            "nullable": true
          },
          "primary_sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "bot": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "rpc_origins": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "description": "",
            "nullable": true
          },
          "bot_public": {
            "type": "boolean",
            "nullable": true
          },
          "bot_require_code_grant": {
            "type": "boolean",
            "nullable": true
          },
          "terms_of_service_url": {
            "type": "string",
            "nullable": true
          },
          "privacy_policy_url": {
            "type": "string",
            "nullable": true
          },
          "custom_install_url": {
            "type": "string",
            "nullable": true
          },
          "install_params": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplicationOAuth2InstallParamsResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "verify_key": {
            "type": "string"
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "max_participants": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "description": ""
          },
          "interactions_endpoint_url": {
            "type": "string",
            "nullable": true
          },
          "role_connections_verification_url": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "approximate_guild_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "team": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "PrivateChannelRequestPartial": {
        "title": "PrivateChannelRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "nullable": true
          }
        }
      },
      "PrivateChannelResponse": {
        "title": "PrivateChannelResponse",
        "required": [
          "id",
          "type",
          "flags",
          "recipients"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "last_message_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "last_pin_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": ""
          }
        }
      },
      "PrivateGroupChannelResponse": {
        "title": "PrivateGroupChannelResponse",
        "required": [
          "id",
          "type",
          "flags",
          "recipients"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "last_message_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "last_pin_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": ""
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "owner_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "managed": {
            "type": "boolean",
            "nullable": true
          },
          "application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "PrivateGuildMemberResponse": {
        "title": "PrivateGuildMemberResponse",
        "required": [
          "flags",
          "joined_at",
          "pending",
          "roles",
          "user",
          "mute",
          "deaf"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "avatar_decoration_data": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          },
          "communication_disabled_until": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "joined_at": {
            "type": "string",
            "format": "date-time"
          },
          "nick": {
            "type": "string",
            "nullable": true
          },
          "pending": {
            "type": "boolean"
          },
          "premium_since": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "mute": {
            "type": "boolean"
          },
          "deaf": {
            "type": "boolean"
          },
          "banner": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PurchaseNotificationResponse": {
        "title": "PurchaseNotificationResponse",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PurchaseType"
          },
          "guild_product_purchase": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GuildProductPurchaseResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "QuarantineUserAction": {
        "title": "QuarantineUserAction",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "QuarantineUserActionResponse": {
        "title": "QuarantineUserActionResponse",
        "required": [
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              4
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "ResolvedObjectsResponse": {
        "title": "ResolvedObjectsResponse",
        "required": [
          "users",
          "members",
          "channels",
          "roles"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/UserResponse"
            }
          },
          "members": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GuildMemberResponse"
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GuildChannelResponse"
                },
                {
                  "$ref": "#/components/schemas/PrivateChannelResponse"
                },
                {
                  "$ref": "#/components/schemas/PrivateGroupChannelResponse"
                },
                {
                  "$ref": "#/components/schemas/ThreadResponse"
                }
              ]
            }
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GuildRoleResponse"
            }
          }
        }
      },
      "ResourceChannelResponse": {
        "title": "ResourceChannelResponse",
        "required": [
          "channel_id",
          "title",
          "description"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SettingsEmojiResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RichEmbed": {
        "title": "RichEmbed",
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "title": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "color": {
            "maximum": 16777215.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "nullable": true
          },
          "author": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedAuthor"
              },
              {
                "nullable": true
              }
            ]
          },
          "image": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedImage"
              },
              {
                "nullable": true
              }
            ]
          },
          "thumbnail": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedThumbnail"
              },
              {
                "nullable": true
              }
            ]
          },
          "footer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedFooter"
              },
              {
                "nullable": true
              }
            ]
          },
          "fields": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbedField"
            },
            "description": "",
            "nullable": true
          },
          "provider": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedProvider"
              },
              {
                "nullable": true
              }
            ]
          },
          "video": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedVideo"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "RichEmbedAuthor": {
        "title": "RichEmbedAuthor",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "icon_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          }
        }
      },
      "RichEmbedField": {
        "title": "RichEmbedField",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 256,
            "type": "string"
          },
          "value": {
            "maxLength": 1024,
            "type": "string"
          },
          "inline": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "RichEmbedFooter": {
        "title": "RichEmbedFooter",
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "icon_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          }
        }
      },
      "RichEmbedImage": {
        "title": "RichEmbedImage",
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "placeholder": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "placeholder_version": {
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "RichEmbedProvider": {
        "title": "RichEmbedProvider",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          }
        }
      },
      "RichEmbedThumbnail": {
        "title": "RichEmbedThumbnail",
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "placeholder": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "placeholder_version": {
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "RichEmbedVideo": {
        "title": "RichEmbedVideo",
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "placeholder": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "placeholder_version": {
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "RoleSelect": {
        "title": "RoleSelect",
        "required": [
          "type",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              6
            ],
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "placeholder": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "maximum": 25.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "maximum": 25.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "default_values": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleSelectDefaultValue"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "RoleSelectDefaultValue": {
        "title": "RoleSelectDefaultValue",
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "role"
            ],
            "type": "string"
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "ScheduledEventResponse": {
        "title": "ScheduledEventResponse",
        "required": [
          "id",
          "guild_id",
          "name",
          "scheduled_start_time",
          "status",
          "entity_type",
          "privacy_level"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/GuildScheduledEventStatuses"
          },
          "entity_type": {
            "$ref": "#/components/schemas/GuildScheduledEventEntityTypes"
          },
          "entity_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "user_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "user_rsvp": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventUserResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ScheduledEventUserResponse": {
        "title": "ScheduledEventUserResponse",
        "required": [
          "guild_scheduled_event_id",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "guild_scheduled_event_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "user_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "member": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GuildMemberResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "SelectOption": {
        "title": "SelectOption",
        "required": [
          "label",
          "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Emoji"
              },
              {
                "nullable": true
              }
            ]
          },
          "default": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "SelectOptionResponse": {
        "title": "SelectOptionResponse",
        "required": [
          "label",
          "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageComponentEmojiResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "default": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "SettingsEmojiResponse": {
        "title": "SettingsEmojiResponse",
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "animated": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "SlackWebhook": {
        "title": "SlackWebhook",
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "username": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "icon_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookSlackEmbed"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "SpamLinkRuleResponse": {
        "title": "SpamLinkRuleResponse",
        "required": [
          "id",
          "guild_id",
          "creator_id",
          "name",
          "event_type",
          "actions",
          "trigger_type",
          "trigger_metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/AutomodEventType"
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageActionResponse"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelActionResponse"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserActionResponse"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledActionResponse"
                }
              ]
            },
            "description": ""
          },
          "trigger_type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_metadata": {
            "type": "object"
          }
        }
      },
      "StageInstanceResponse": {
        "title": "StageInstanceResponse",
        "required": [
          "guild_id",
          "channel_id",
          "topic",
          "privacy_level",
          "id"
        ],
        "type": "object",
        "properties": {
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "privacy_level": {
            "$ref": "#/components/schemas/StageInstancesPrivacyLevels"
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "discoverable_disabled": {
            "type": "boolean",
            "nullable": true
          },
          "guild_scheduled_event_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "StageScheduledEventCreateRequest": {
        "title": "StageScheduledEventCreateRequest",
        "required": [
          "name",
          "scheduled_start_time",
          "privacy_level",
          "entity_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "entity_type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "StageScheduledEventPatchRequestPartial": {
        "title": "StageScheduledEventPatchRequestPartial",
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildScheduledEventStatuses"
                  }
                ]
              },
              {}
            ]
          },
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "entity_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildScheduledEventEntityTypes"
                  }
                ]
              },
              {}
            ]
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "StageScheduledEventResponse": {
        "title": "StageScheduledEventResponse",
        "required": [
          "id",
          "guild_id",
          "name",
          "scheduled_start_time",
          "status",
          "entity_type",
          "privacy_level"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/GuildScheduledEventStatuses"
          },
          "entity_type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "entity_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "user_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "user_rsvp": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventUserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "StandardStickerResponse": {
        "title": "StandardStickerResponse",
        "required": [
          "id",
          "name",
          "tags",
          "type",
          "pack_id",
          "sort_value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "type": {
            "enum": [
              1
            ],
            "type": "integer",
            "format": "int32"
          },
          "format_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/StickerFormatTypes"
                  }
                ]
              },
              {}
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "pack_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "sort_value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StickerPackCollectionResponse": {
        "title": "StickerPackCollectionResponse",
        "required": [
          "sticker_packs"
        ],
        "type": "object",
        "properties": {
          "sticker_packs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StickerPackResponse"
            },
            "description": ""
          }
        }
      },
      "StickerPackResponse": {
        "title": "StickerPackResponse",
        "required": [
          "id",
          "sku_id",
          "name",
          "stickers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "stickers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardStickerResponse"
            },
            "description": ""
          },
          "cover_sticker_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "banner_asset_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "StringSelect": {
        "title": "StringSelect",
        "required": [
          "type",
          "custom_id",
          "options"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "placeholder": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "maximum": 25.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "maximum": 25.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            },
            "description": ""
          }
        }
      },
      "TeamMemberResponse": {
        "title": "TeamMemberResponse",
        "required": [
          "user",
          "team_id",
          "membership_state"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "team_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "membership_state": {
            "$ref": "#/components/schemas/TeamMembershipStates"
          }
        }
      },
      "TeamResponse": {
        "title": "TeamResponse",
        "required": [
          "id",
          "name",
          "owner_user_id",
          "members"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "owner_user_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMemberResponse"
            },
            "description": ""
          }
        }
      },
      "ThreadMemberResponse": {
        "title": "ThreadMemberResponse",
        "required": [
          "id",
          "user_id",
          "join_timestamp",
          "flags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "user_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "join_timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "member": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GuildMemberResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ThreadMetadataResponse": {
        "title": "ThreadMetadataResponse",
        "required": [
          "archived",
          "auto_archive_duration",
          "locked"
        ],
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "archive_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "auto_archive_duration": {
            "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
          },
          "locked": {
            "type": "boolean"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "invitable": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ThreadResponse": {
        "title": "ThreadResponse",
        "required": [
          "id",
          "type",
          "flags",
          "guild_id",
          "name",
          "owner_id",
          "message_count",
          "member_count",
          "total_message_sent"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelTypes"
          },
          "last_message_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "last_pin_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "rate_limit_per_user": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          },
          "permissions": {
            "type": "string",
            "nullable": true
          },
          "owner_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "thread_metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreadMetadataResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "message_count": {
            "type": "integer",
            "format": "int32"
          },
          "member_count": {
            "type": "integer",
            "format": "int32"
          },
          "total_message_sent": {
            "type": "integer",
            "format": "int32"
          },
          "applied_tags": {
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "member": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreadMemberResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ThreadsResponse": {
        "title": "ThreadsResponse",
        "required": [
          "threads",
          "members"
        ],
        "type": "object",
        "properties": {
          "threads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThreadResponse"
            },
            "description": ""
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThreadMemberResponse"
            },
            "description": ""
          },
          "has_more": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "UpdateDefaultReactionEmojiRequest": {
        "title": "UpdateDefaultReactionEmojiRequest",
        "type": "object",
        "properties": {
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateGuildChannelRequestPartial": {
        "title": "UpdateGuildChannelRequestPartial",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelTypes"
                  }
                ]
              },
              {}
            ]
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "position": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "topic": {
            "maxLength": 4096,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bitrate": {
            "minimum": 8000.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "nsfw": {
            "type": "boolean",
            "nullable": true
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "permission_overwrites": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelPermissionOverwriteRequest"
            },
            "description": "",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          },
          "default_auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "default_reaction_emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateDefaultReactionEmojiRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "default_thread_rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "default_sort_order": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadSortOrder"
                  }
                ]
              },
              {}
            ]
          },
          "default_forum_layout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ForumLayout"
                  }
                ]
              },
              {}
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "available_tags": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateThreadTagRequest"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "UpdateGuildOnboardingRequest": {
        "title": "UpdateGuildOnboardingRequest",
        "type": "object",
        "properties": {
          "prompts": {
            "maxItems": 15,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateOnboardingPromptRequest"
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "default_channel_ids": {
            "maxItems": 500,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildOnboardingMode"
                  }
                ]
              },
              {}
            ]
          }
        }
      },
      "UpdateMessageInteractionCallbackRequest": {
        "title": "UpdateMessageInteractionCallbackRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/InteractionCallbackTypes"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IncomingWebhookUpdateForInteractionCallbackRequestPartial"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "UpdateOnboardingPromptRequest": {
        "title": "UpdateOnboardingPromptRequest",
        "required": [
          "title",
          "options",
          "id"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "options": {
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingPromptOptionRequest"
            },
            "description": ""
          },
          "single_select": {
            "type": "boolean",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "in_onboarding": {
            "type": "boolean",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/OnboardingPromptType"
                  }
                ]
              },
              {}
            ]
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "UpdateThreadRequestPartial": {
        "title": "UpdateThreadRequestPartial",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "archived": {
            "type": "boolean",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "nullable": true
          },
          "invitable": {
            "type": "boolean",
            "nullable": true
          },
          "auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "applied_tags": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "bitrate": {
            "minimum": 8000.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "maximum": 99.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          }
        }
      },
      "UpdateThreadTagRequest": {
        "title": "UpdateThreadTagRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "emoji_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "emoji_name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "moderated": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "UserCommunicationDisabledAction": {
        "title": "UserCommunicationDisabledAction",
        "required": [
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "$ref": "#/components/schemas/UserCommunicationDisabledActionMetadata"
          }
        }
      },
      "UserCommunicationDisabledActionMetadata": {
        "title": "UserCommunicationDisabledActionMetadata",
        "type": "object",
        "properties": {
          "duration_seconds": {
            "maximum": 2419200.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UserCommunicationDisabledActionMetadataResponse": {
        "title": "UserCommunicationDisabledActionMetadataResponse",
        "required": [
          "duration_seconds"
        ],
        "type": "object",
        "properties": {
          "duration_seconds": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserCommunicationDisabledActionResponse": {
        "title": "UserCommunicationDisabledActionResponse",
        "required": [
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              3
            ],
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "$ref": "#/components/schemas/UserCommunicationDisabledActionMetadataResponse"
          }
        }
      },
      "UserGuildOnboardingResponse": {
        "title": "UserGuildOnboardingResponse",
        "required": [
          "guild_id",
          "prompts",
          "default_channel_ids",
          "enabled"
        ],
        "type": "object",
        "properties": {
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "prompts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingPromptResponse"
            },
            "description": ""
          },
          "default_channel_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "UserPIIResponse": {
        "title": "UserPIIResponse",
        "required": [
          "id",
          "username",
          "discriminator",
          "public_flags",
          "flags",
          "mfa_enabled",
          "locale"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "discriminator": {
            "type": "string"
          },
          "public_flags": {
            "type": "integer",
            "format": "int32"
          },
          "flags": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "type": "integer",
            "format": "int64"
          },
          "bot": {
            "type": "boolean",
            "nullable": true
          },
          "system": {
            "type": "boolean",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "accent_color": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "global_name": {
            "type": "string",
            "nullable": true
          },
          "mfa_enabled": {
            "type": "boolean"
          },
          "locale": {
            "$ref": "#/components/schemas/AvailableLocalesEnum"
          },
          "premium_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/PremiumTypes"
                  }
                ]
              },
              {}
            ]
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "verified": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "UserResponse": {
        "title": "UserResponse",
        "required": [
          "id",
          "username",
          "discriminator",
          "public_flags",
          "flags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "discriminator": {
            "type": "string"
          },
          "public_flags": {
            "type": "integer",
            "format": "int32"
          },
          "flags": {
            "maximum": 9007199254740991.0,
            "minimum": -9007199254740991.0,
            "type": "integer",
            "format": "int64"
          },
          "bot": {
            "type": "boolean",
            "nullable": true
          },
          "system": {
            "type": "boolean",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "accent_color": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "global_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserSelect": {
        "title": "UserSelect",
        "required": [
          "type",
          "custom_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              5
            ],
            "type": "integer",
            "format": "int32"
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "placeholder": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "maximum": 25.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "maximum": 25.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "default_values": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSelectDefaultValue"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "UserSelectDefaultValue": {
        "title": "UserSelectDefaultValue",
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "user"
            ],
            "type": "string"
          },
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "VanityURLErrorResponse": {
        "title": "VanityURLErrorResponse",
        "required": [
          "message",
          "code"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "VanityURLResponse": {
        "title": "VanityURLResponse",
        "required": [
          "uses"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "uses": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VanityURLErrorResponse"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "VoiceRegionResponse": {
        "title": "VoiceRegionResponse",
        "required": [
          "id",
          "name",
          "custom",
          "deprecated",
          "optimal"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "custom": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "optimal": {
            "type": "boolean"
          }
        }
      },
      "VoiceScheduledEventCreateRequest": {
        "title": "VoiceScheduledEventCreateRequest",
        "required": [
          "name",
          "scheduled_start_time",
          "privacy_level",
          "entity_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "entity_type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "VoiceScheduledEventPatchRequestPartial": {
        "title": "VoiceScheduledEventPatchRequestPartial",
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildScheduledEventStatuses"
                  }
                ]
              },
              {}
            ]
          },
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "entity_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/GuildScheduledEventEntityTypes"
                  }
                ]
              },
              {}
            ]
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "VoiceScheduledEventResponse": {
        "title": "VoiceScheduledEventResponse",
        "required": [
          "id",
          "guild_id",
          "name",
          "scheduled_start_time",
          "status",
          "entity_type",
          "privacy_level"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "creator": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "scheduled_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/GuildScheduledEventStatuses"
          },
          "entity_type": {
            "enum": [
              2
            ],
            "type": "integer",
            "format": "int32"
          },
          "entity_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "user_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "privacy_level": {
            "$ref": "#/components/schemas/GuildScheduledEventPrivacyLevels"
          },
          "user_rsvp": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventUserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "entity_metadata": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "WebhookSlackEmbed": {
        "title": "WebhookSlackEmbed",
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "title_link": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "text": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "color": {
            "maxLength": 7,
            "pattern": "^#(([0-9a-fA-F]{2}){3}|([0-9a-fA-F]){3})$",
            "type": "string",
            "nullable": true
          },
          "ts": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pretext": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "footer": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "footer_icon": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "author_name": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "author_link": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "author_icon": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "image_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "thumb_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "fields": {
            "maxItems": 1521,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookSlackEmbedField"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "WebhookSlackEmbedField": {
        "title": "WebhookSlackEmbedField",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "value": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "inline": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "WebhookSourceChannelResponse": {
        "title": "WebhookSourceChannelResponse",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "WebhookSourceGuildResponse": {
        "title": "WebhookSourceGuildResponse",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          }
        }
      },
      "WelcomeMessageResponse": {
        "title": "WelcomeMessageResponse",
        "required": [
          "author_ids",
          "message"
        ],
        "type": "object",
        "properties": {
          "author_ids": {
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "message": {
            "type": "string"
          }
        }
      },
      "WelcomeScreenPatchRequestPartial": {
        "title": "WelcomeScreenPatchRequestPartial",
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 140,
            "type": "string",
            "nullable": true
          },
          "welcome_channels": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuildWelcomeChannel"
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "WidgetActivity": {
        "title": "WidgetActivity",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "WidgetChannel": {
        "title": "WidgetChannel",
        "required": [
          "id",
          "name",
          "position"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WidgetMember": {
        "title": "WidgetMember",
        "required": [
          "id",
          "username",
          "discriminator",
          "status",
          "avatar_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "discriminator": {
            "$ref": "#/components/schemas/WidgetUserDiscriminator"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "activity": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/WidgetActivity"
              },
              {
                "nullable": true
              }
            ]
          },
          "deaf": {
            "type": "boolean",
            "nullable": true
          },
          "mute": {
            "type": "boolean",
            "nullable": true
          },
          "self_deaf": {
            "type": "boolean",
            "nullable": true
          },
          "self_mute": {
            "type": "boolean",
            "nullable": true
          },
          "suppress": {
            "type": "boolean",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "WidgetResponse": {
        "title": "WidgetResponse",
        "required": [
          "id",
          "name",
          "channels",
          "members",
          "presence_count"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "instant_invite": {
            "type": "string",
            "nullable": true
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetChannel"
            },
            "description": ""
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetMember"
            },
            "description": ""
          },
          "presence_count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WidgetSettingsResponse": {
        "title": "WidgetSettingsResponse",
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "Error": {
        "title": "Error",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Discord internal error code. See error code reference",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          }
        },
        "description": "A single error, either for an API response or a specific field."
      },
      "InnerErrors": {
        "title": "InnerErrors",
        "required": [
          "_errors"
        ],
        "type": "object",
        "properties": {
          "_errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "description": "The list of errors for this field"
          }
        }
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Discord internal error code. See error code reference",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "errors": {
            "$ref": "#/components/schemas/ErrorDetails"
          }
        },
        "description": "Errors object returned by the Discord API"
      },
      "ACCEPTED": {
        "title": "ACCEPTED",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "User has accepted the team invitation."
      },
      "Action": {
        "title": "Action",
        "required": [
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {},
          "metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BlockMessageActionMetadata"
              }
            ]
          }
        }
      },
      "ACTION_ROW1": {
        "title": "ACTION_ROW1",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Container for other components"
      },
      "ActionRow2": {
        "title": "ActionRow2",
        "required": [
          "type",
          "components"
        ],
        "type": "object",
        "properties": {
          "type": {},
          "components": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Button"
                },
                {
                  "$ref": "#/components/schemas/ChannelSelect"
                },
                {
                  "$ref": "#/components/schemas/InputText"
                },
                {
                  "$ref": "#/components/schemas/MentionableSelect"
                },
                {
                  "$ref": "#/components/schemas/RoleSelect"
                },
                {
                  "$ref": "#/components/schemas/StringSelect"
                },
                {
                  "$ref": "#/components/schemas/UserSelect"
                }
              ]
            },
            "description": ""
          }
        }
      },
      "ActionRow3": {
        "title": "ActionRow3",
        "required": [
          "type",
          "components"
        ],
        "type": "object",
        "properties": {
          "type": {},
          "components": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Button"
                },
                {
                  "$ref": "#/components/schemas/ChannelSelect"
                },
                {
                  "$ref": "#/components/schemas/InputText"
                },
                {
                  "$ref": "#/components/schemas/MentionableSelect"
                },
                {
                  "$ref": "#/components/schemas/RoleSelect"
                },
                {
                  "$ref": "#/components/schemas/StringSelect"
                },
                {
                  "$ref": "#/components/schemas/UserSelect"
                }
              ]
            },
            "description": ""
          }
        }
      },
      "ACTIVE": {
        "title": "ACTIVE",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "ACTIVITIES_READ": {
        "title": "ACTIVITIES_READ",
        "enum": [
          "activities.read"
        ],
        "type": "string",
        "description": "allows your app to fetch data from a user's \"Now Playing/Recently Played\" list - requires Discord approval"
      },
      "ACTIVITIES_WRITE": {
        "title": "ACTIVITIES_WRITE",
        "enum": [
          "activities.write"
        ],
        "type": "string",
        "description": "allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)"
      },
      "AGE_RESTRICTED": {
        "title": "AGE_RESTRICTED",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "ALL_MEMBERS": {
        "title": "ALL_MEMBERS",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "media content sent by all members will be scanned"
      },
      "ALL_MESSAGES": {
        "title": "ALL_MESSAGES",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "members will receive notifications for all messages by default"
      },
      "ANIMATED_BANNER": {
        "title": "ANIMATED_BANNER",
        "enum": [
          "ANIMATED_BANNER"
        ],
        "type": "string",
        "description": "guild has access to set an animated guild banner image"
      },
      "ANIMATED_ICON": {
        "title": "ANIMATED_ICON",
        "enum": [
          "ANIMATED_ICON"
        ],
        "type": "string",
        "description": "guild has access to set an animated guild icon"
      },
      "ANNOUNCEMENT_THREAD": {
        "title": "ANNOUNCEMENT_THREAD",
        "enum": [
          10
        ],
        "type": "integer",
        "description": "A temporary sub-channel within a GUILD_ANNOUNCEMENT channel"
      },
      "APNG": {
        "title": "APNG",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "APPLICATION_COMMAND": {
        "title": "APPLICATION_COMMAND",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Sent when a user uses an application command"
      },
      "APPLICATION_COMMAND_AUTOCOMPLETE": {
        "title": "APPLICATION_COMMAND_AUTOCOMPLETE",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "Sent when a user is filling in an autocomplete option in a chat command"
      },
      "APPLICATION_COMMAND_AUTOCOMPLETE_RESULT": {
        "title": "APPLICATION_COMMAND_AUTOCOMPLETE_RESULT",
        "enum": [
          8
        ],
        "type": "integer"
      },
      "APPLICATION_COMMAND_PERMISSION_UPDATE": {
        "title": "APPLICATION_COMMAND_PERMISSION_UPDATE",
        "enum": [
          121
        ],
        "type": "integer"
      },
      "APPLICATION_COMMAND_PERMISSIONS_V2": {
        "title": "APPLICATION_COMMAND_PERMISSIONS_V2",
        "enum": [
          "APPLICATION_COMMAND_PERMISSIONS_V2"
        ],
        "type": "string",
        "description": "guild is using the old permissions configuration behavior"
      },
      "APPLICATION_INCOMING": {
        "title": "APPLICATION_INCOMING",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Application webhooks are webhooks used with Interactions"
      },
      "APPLICATION_SUBSCRIPTION": {
        "title": "APPLICATION_SUBSCRIPTION",
        "enum": [
          8
        ],
        "type": "integer"
      },
      "ApplicationsGuildsCommandsCommandIdPermissionsRequest": {
        "title": "ApplicationsGuildsCommandsCommandIdPermissionsRequest",
        "type": "object",
        "properties": {
          "permissions": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommandPermission"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "APPLICATIONS_BUILDS_READ": {
        "title": "APPLICATIONS_BUILDS_READ",
        "enum": [
          "applications.builds.read"
        ],
        "type": "string",
        "description": "allows your app to read build data for a user's applications"
      },
      "APPLICATIONS_BUILDS_UPLOAD": {
        "title": "APPLICATIONS_BUILDS_UPLOAD",
        "enum": [
          "applications.builds.upload"
        ],
        "type": "string",
        "description": "allows your app to upload/update builds for a user's applications - requires Discord approval"
      },
      "APPLICATIONS_COMMANDS": {
        "title": "APPLICATIONS_COMMANDS",
        "enum": [
          "applications.commands"
        ],
        "type": "string",
        "description": "allows your app to use commands in a guild"
      },
      "APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE": {
        "title": "APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE",
        "enum": [
          "applications.commands.permissions.update"
        ],
        "type": "string",
        "description": "allows your app to update permissions for its commands in a guild a user has permissions to"
      },
      "APPLICATIONS_COMMANDS_UPDATE": {
        "title": "APPLICATIONS_COMMANDS_UPDATE",
        "enum": [
          "applications.commands.update"
        ],
        "type": "string",
        "description": "allows your app to update its commands using a Bearer token - client credentials grant only"
      },
      "APPLICATIONS_ENTITLEMENTS": {
        "title": "APPLICATIONS_ENTITLEMENTS",
        "enum": [
          "applications.entitlements"
        ],
        "type": "string",
        "description": "allows your app to read entitlements for a user's applications"
      },
      "APPLICATIONS_STORE_UPDATE": {
        "title": "APPLICATIONS_STORE_UPDATE",
        "enum": [
          "applications.store.update"
        ],
        "type": "string",
        "description": "allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications"
      },
      "ar": {
        "title": "ar",
        "enum": [
          "ar"
        ],
        "type": "string",
        "description": "The ar locale"
      },
      "ATTACHMENT": {
        "title": "ATTACHMENT",
        "enum": [
          11
        ],
        "type": "integer",
        "description": "An attachment option"
      },
      "AUTO": {
        "title": "AUTO",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Discord chooses the quality for optimal performance"
      },
      "AUTO_MODERATION": {
        "title": "AUTO_MODERATION",
        "enum": [
          "AUTO_MODERATION"
        ],
        "type": "string",
        "description": "guild has set up auto moderation rules"
      },
      "AUTO_MODERATION_ACTION": {
        "title": "AUTO_MODERATION_ACTION",
        "enum": [
          24
        ],
        "type": "integer"
      },
      "AUTO_MODERATION_BLOCK_MESSAGE": {
        "title": "AUTO_MODERATION_BLOCK_MESSAGE",
        "enum": [
          143
        ],
        "type": "integer"
      },
      "AUTO_MODERATION_FLAG_TO_CHANNEL": {
        "title": "AUTO_MODERATION_FLAG_TO_CHANNEL",
        "enum": [
          144
        ],
        "type": "integer"
      },
      "AUTO_MODERATION_QUARANTINE_USER": {
        "title": "AUTO_MODERATION_QUARANTINE_USER",
        "enum": [
          146
        ],
        "type": "integer"
      },
      "AUTO_MODERATION_RULE_CREATE": {
        "title": "AUTO_MODERATION_RULE_CREATE",
        "enum": [
          140
        ],
        "type": "integer"
      },
      "AUTO_MODERATION_RULE_DELETE": {
        "title": "AUTO_MODERATION_RULE_DELETE",
        "enum": [
          142
        ],
        "type": "integer"
      },
      "AUTO_MODERATION_RULE_UPDATE": {
        "title": "AUTO_MODERATION_RULE_UPDATE",
        "enum": [
          141
        ],
        "type": "integer"
      },
      "AUTO_MODERATION_USER_COMM_DISABLED": {
        "title": "AUTO_MODERATION_USER_COMM_DISABLED",
        "enum": [
          145
        ],
        "type": "integer"
      },
      "BANNER": {
        "title": "BANNER",
        "enum": [
          "BANNER"
        ],
        "type": "string",
        "description": "guild has access to set a guild banner image"
      },
      "BANNER1": {
        "title": "BANNER1",
        "enum": [
          "banner1"
        ],
        "type": "string",
        "description": "large image with guild icon, name and online count. \"POWERED BY DISCORD\" as the footer of the widget"
      },
      "BANNER2": {
        "title": "BANNER2",
        "enum": [
          "banner2"
        ],
        "type": "string",
        "description": "smaller widget style with guild icon, name and online count. Split on the right with Discord logo"
      },
      "BANNER3": {
        "title": "BANNER3",
        "enum": [
          "banner3"
        ],
        "type": "string",
        "description": "large image with guild icon, name and online count. In the footer, Discord logo on the left and \"Chat Now\" on the right"
      },
      "BANNER4": {
        "title": "BANNER4",
        "enum": [
          "banner4"
        ],
        "type": "string",
        "description": "large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget and a \"JOIN MY SERVER\" button at the bottom"
      },
      "BATTLENET": {
        "title": "BATTLENET",
        "enum": [
          "battlenet"
        ],
        "type": "string"
      },
      "bg": {
        "title": "bg",
        "enum": [
          "bg"
        ],
        "type": "string",
        "description": "The bg locale"
      },
      "BLOCK_MESSAGE": {
        "title": "BLOCK_MESSAGE",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Block a user's message and prevent it from being posted. A custom explanation can be specified and shown to members whenever their message is blocked"
      },
      "BOOLEAN": {
        "title": "BOOLEAN",
        "enum": [
          5
        ],
        "type": "integer",
        "description": "A boolean option"
      },
      "BOOLEAN_EQUAL": {
        "title": "BOOLEAN_EQUAL",
        "enum": [
          7
        ],
        "type": "integer",
        "description": "the metadata value (integer) is equal to the guild's configured value (integer; 1)"
      },
      "BOOLEAN_NOT_EQUAL": {
        "title": "BOOLEAN_NOT_EQUAL",
        "enum": [
          8
        ],
        "type": "integer",
        "description": "the metadata value (integer) is not equal to the guild's configured value (integer; 1)"
      },
      "BOT": {
        "title": "BOT",
        "enum": [
          "bot"
        ],
        "type": "string",
        "description": "for oauth2 bots, this puts the bot in the user's selected guild by default"
      },
      "BOT_ADD": {
        "title": "BOT_ADD",
        "enum": [
          28
        ],
        "type": "integer"
      },
      "BUNGIE": {
        "title": "BUNGIE",
        "enum": [
          "bungie"
        ],
        "type": "string"
      },
      "BUTTON1": {
        "title": "BUTTON1",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Button object"
      },
      "CALL": {
        "title": "CALL",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "CANCELED": {
        "title": "CANCELED",
        "enum": [
          4
        ],
        "type": "integer"
      },
      "CHANNEL": {
        "title": "CHANNEL",
        "enum": [
          7
        ],
        "type": "integer",
        "description": "A snowflake option that represents a Channel. Includes all channel types and categories"
      },
      "CHANNEL_CREATE": {
        "title": "CHANNEL_CREATE",
        "enum": [
          10
        ],
        "type": "integer"
      },
      "CHANNEL_DELETE": {
        "title": "CHANNEL_DELETE",
        "enum": [
          12
        ],
        "type": "integer"
      },
      "CHANNEL_FOLLOW_ADD": {
        "title": "CHANNEL_FOLLOW_ADD",
        "enum": [
          12
        ],
        "type": "integer"
      },
      "CHANNEL_FOLLOWER": {
        "title": "CHANNEL_FOLLOWER",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels"
      },
      "CHANNEL_ICON_CHANGE": {
        "title": "CHANNEL_ICON_CHANGE",
        "enum": [
          5
        ],
        "type": "integer"
      },
      "CHANNEL_MESSAGE_WITH_SOURCE": {
        "title": "CHANNEL_MESSAGE_WITH_SOURCE",
        "enum": [
          4
        ],
        "type": "integer"
      },
      "CHANNEL_NAME_CHANGE": {
        "title": "CHANNEL_NAME_CHANGE",
        "enum": [
          4
        ],
        "type": "integer"
      },
      "CHANNEL_OVERWRITE_CREATE": {
        "title": "CHANNEL_OVERWRITE_CREATE",
        "enum": [
          13
        ],
        "type": "integer"
      },
      "CHANNEL_OVERWRITE_DELETE": {
        "title": "CHANNEL_OVERWRITE_DELETE",
        "enum": [
          15
        ],
        "type": "integer"
      },
      "CHANNEL_OVERWRITE_UPDATE": {
        "title": "CHANNEL_OVERWRITE_UPDATE",
        "enum": [
          14
        ],
        "type": "integer"
      },
      "CHANNEL_PINNED_MESSAGE": {
        "title": "CHANNEL_PINNED_MESSAGE",
        "enum": [
          6
        ],
        "type": "integer"
      },
      "CHANNEL_SELECT1": {
        "title": "CHANNEL_SELECT1",
        "enum": [
          8
        ],
        "type": "integer",
        "description": "Select menu for channels"
      },
      "CHANNEL_UPDATE": {
        "title": "CHANNEL_UPDATE",
        "enum": [
          11
        ],
        "type": "integer"
      },
      "CHANNEL1": {
        "title": "CHANNEL1",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "This permission is for a channel."
      },
      "CHANNEL2": {
        "title": "CHANNEL2",
        "enum": [
          "channel"
        ],
        "type": "string"
      },
      "ChannelsFollowersRequest": {
        "title": "ChannelsFollowersRequest",
        "required": [
          "webhook_channel_id"
        ],
        "type": "object",
        "properties": {
          "webhook_channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "ChannelsInvitesRequest": {
        "title": "ChannelsInvitesRequest",
        "type": "object",
        "properties": {
          "max_age": {
            "maximum": 604800.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "temporary": {
            "type": "boolean",
            "nullable": true
          },
          "max_uses": {
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "unique": {
            "type": "boolean",
            "nullable": true
          },
          "target_user_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_application_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTargetTypes"
                  }
                ]
              },
              {}
            ]
          }
        }
      },
      "ChannelsInvitesResponse": {
        "title": "ChannelsInvitesResponse",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTypes"
                  }
                ]
              },
              {}
            ]
          },
          "code": {
            "type": "string"
          },
          "inviter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ]
          },
          "max_age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "friends_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteChannelResponse"
              }
            ]
          },
          "is_contact": {
            "type": "boolean",
            "nullable": true
          },
          "uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "guild": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteGuildResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "stage_instance": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteStageInstanceResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTargetTypes"
                  }
                ]
              },
              {}
            ]
          },
          "target_user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteApplicationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_scheduled_event": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "temporary": {
            "type": "boolean",
            "nullable": true
          },
          "approximate_presence_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ChannelsMessagesBulkDeleteRequest": {
        "title": "ChannelsMessagesBulkDeleteRequest",
        "required": [
          "messages"
        ],
        "type": "object",
        "properties": {
          "messages": {
            "maxItems": 100,
            "minItems": 2,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "ChannelsPermissionsRequest": {
        "title": "ChannelsPermissionsRequest",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelPermissionOverwrites"
                  }
                ]
              },
              {}
            ]
          },
          "allow": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deny": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ChannelsRecipientsRequest": {
        "title": "ChannelsRecipientsRequest",
        "type": "object",
        "properties": {
          "access_token": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "nick": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelsRequest": {
        "title": "ChannelsRequest",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelTypes"
                  }
                ]
              },
              {}
            ]
          },
          "position": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "topic": {
            "maxLength": 4096,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bitrate": {
            "minimum": 8000.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user_limit": {
            "maximum": 99.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "nsfw": {
            "type": "boolean",
            "nullable": true
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "permission_overwrites": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelPermissionOverwriteRequest"
            },
            "description": "",
            "nullable": true
          },
          "rtc_region": {
            "type": "string",
            "nullable": true
          },
          "video_quality_mode": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/VideoQualityModes"
                  }
                ]
              },
              {}
            ]
          },
          "default_auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "default_reaction_emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateDefaultReactionEmojiRequest"
              },
              {
                "nullable": true
              }
            ]
          },
          "default_thread_rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "default_sort_order": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadSortOrder"
                  }
                ]
              },
              {}
            ]
          },
          "default_forum_layout": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ForumLayout"
                  }
                ]
              },
              {}
            ]
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "available_tags": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateThreadTagRequest"
            },
            "description": "",
            "nullable": true
          },
          "archived": {
            "type": "boolean",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "nullable": true
          },
          "invitable": {
            "type": "boolean",
            "nullable": true
          },
          "auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "applied_tags": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "ChannelsThreadsRequest": {
        "title": "ChannelsThreadsRequest",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "auto_archive_duration": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ThreadAutoArchiveDuration"
                  }
                ]
              },
              {}
            ]
          },
          "rate_limit_per_user": {
            "maximum": 21600.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "applied_tags": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/BaseCreateMessageCreateRequest"
          },
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/ChannelTypes"
                  }
                ]
              },
              {}
            ]
          },
          "invitable": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ChannelsWebhooksRequest": {
        "title": "ChannelsWebhooksRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "nullable": true
          }
        }
      },
      "ChannelSelectDefaultValue1": {
        "title": "ChannelSelectDefaultValue1",
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {},
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          }
        }
      },
      "CHAT": {
        "title": "CHAT",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Slash commands; a text-based command that shows up when a user types /"
      },
      "CHAT_INPUT_COMMAND": {
        "title": "CHAT_INPUT_COMMAND",
        "enum": [
          20
        ],
        "type": "integer"
      },
      "COMMUNITY": {
        "title": "COMMUNITY",
        "enum": [
          "COMMUNITY"
        ],
        "type": "string",
        "description": "guild can enable welcome screen, Membership Screening, stage channels and discovery, and             receives community updates"
      },
      "COMPLETED": {
        "title": "COMPLETED",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "Component": {
        "title": "Component",
        "required": [
          "type",
          "custom_id",
          "style",
          "label",
          "options"
        ],
        "type": "object",
        "properties": {
          "type": {},
          "custom_id": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "style": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PRIMARY"
              },
              {
                "$ref": "#/components/schemas/SECONDARY"
              },
              {
                "$ref": "#/components/schemas/SUCCESS"
              },
              {
                "$ref": "#/components/schemas/DANGER"
              },
              {
                "$ref": "#/components/schemas/LINK"
              },
              {
                "$ref": "#/components/schemas/PREMIUM"
              }
            ]
          },
          "label": {
            "maxLength": 45,
            "type": "string",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Emoji"
              }
            ]
          },
          "url": {
            "maxLength": 512,
            "type": "string",
            "nullable": true
          },
          "sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "placeholder": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "maximum": 25.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "maximum": 25.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "default_values": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelSelectDefaultValue1"
            },
            "description": "",
            "nullable": true
          },
          "channel_types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DM"
                },
                {
                  "$ref": "#/components/schemas/GROUP_DM"
                },
                {
                  "$ref": "#/components/schemas/GUILD_TEXT"
                },
                {
                  "$ref": "#/components/schemas/GUILD_VOICE"
                },
                {
                  "$ref": "#/components/schemas/GUILD_CATEGORY"
                },
                {
                  "$ref": "#/components/schemas/GUILD_ANNOUNCEMENT"
                },
                {
                  "$ref": "#/components/schemas/ANNOUNCEMENT_THREAD"
                },
                {
                  "$ref": "#/components/schemas/PUBLIC_THREAD"
                },
                {
                  "$ref": "#/components/schemas/PRIVATE_THREAD"
                },
                {
                  "$ref": "#/components/schemas/GUILD_STAGE_VOICE"
                },
                {
                  "$ref": "#/components/schemas/GUILD_DIRECTORY"
                },
                {
                  "$ref": "#/components/schemas/GUILD_FORUM"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "value": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "min_length": {
            "maximum": 4000.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_length": {
            "maximum": 4000.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption1"
            },
            "description": ""
          }
        }
      },
      "Component1": {
        "title": "Component1",
        "required": [
          "type",
          "custom_id",
          "style",
          "label",
          "options"
        ],
        "type": "object",
        "properties": {
          "type": {},
          "custom_id": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "style": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PRIMARY"
              },
              {
                "$ref": "#/components/schemas/SECONDARY"
              },
              {
                "$ref": "#/components/schemas/SUCCESS"
              },
              {
                "$ref": "#/components/schemas/DANGER"
              },
              {
                "$ref": "#/components/schemas/LINK"
              },
              {
                "$ref": "#/components/schemas/PREMIUM"
              }
            ]
          },
          "label": {
            "maxLength": 45,
            "type": "string",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "nullable": true
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Emoji"
              },
              {
                "nullable": true
              }
            ]
          },
          "url": {
            "maxLength": 512,
            "type": "string",
            "nullable": true
          },
          "sku_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "placeholder": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "min_values": {
            "maximum": 25.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_values": {
            "maximum": 25.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "default_values": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelSelectDefaultValue1"
            },
            "description": "",
            "nullable": true
          },
          "channel_types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTypes"
            },
            "description": "",
            "nullable": true
          },
          "value": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "min_length": {
            "maximum": 4000.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_length": {
            "maximum": 4000.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "options": {
            "maxItems": 25,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            },
            "description": ""
          }
        }
      },
      "CONNECTIONS": {
        "title": "CONNECTIONS",
        "enum": [
          "connections"
        ],
        "type": "string",
        "description": "allows /users/@me/connections to return linked third-party accounts"
      },
      "CONTEXT_MENU_COMMAND": {
        "title": "CONTEXT_MENU_COMMAND",
        "enum": [
          23
        ],
        "type": "integer"
      },
      "CREATION_DATE": {
        "title": "CREATION_DATE",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Sort forum posts by creation time (from most recent to oldest)"
      },
      "CREATOR_MONETIZABLE_PROVISIONAL": {
        "title": "CREATOR_MONETIZABLE_PROVISIONAL",
        "enum": [
          "CREATOR_MONETIZABLE_PROVISIONAL"
        ],
        "type": "string",
        "description": "guild has enabled monetization"
      },
      "CREATOR_MONETIZATION_REQUEST_CREATED": {
        "title": "CREATOR_MONETIZATION_REQUEST_CREATED",
        "enum": [
          150
        ],
        "type": "integer"
      },
      "CREATOR_MONETIZATION_TERMS_ACCEPTED": {
        "title": "CREATOR_MONETIZATION_TERMS_ACCEPTED",
        "enum": [
          151
        ],
        "type": "integer"
      },
      "CREATOR_STORE_PAGE": {
        "title": "CREATOR_STORE_PAGE",
        "enum": [
          "CREATOR_STORE_PAGE"
        ],
        "type": "string",
        "description": "guild has enabled the role subscription promo page"
      },
      "cs": {
        "title": "cs",
        "enum": [
          "cs"
        ],
        "type": "string",
        "description": "The cs locale"
      },
      "da": {
        "title": "da",
        "enum": [
          "da"
        ],
        "type": "string",
        "description": "The da locale"
      },
      "DANGER": {
        "title": "DANGER",
        "enum": [
          4
        ],
        "type": "integer"
      },
      "Data": {
        "title": "Data",
        "type": "object",
        "properties": {
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandOptionIntegerChoice"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "DATETIME_GREATER_THAN_EQUAL": {
        "title": "DATETIME_GREATER_THAN_EQUAL",
        "enum": [
          6
        ],
        "type": "integer",
        "description": "the metadata value (ISO8601 string) is greater than or equal to the guild's configured value (integer; days before current date)"
      },
      "DATETIME_LESS_THAN_EQUAL": {
        "title": "DATETIME_LESS_THAN_EQUAL",
        "enum": [
          5
        ],
        "type": "integer",
        "description": "the metadata value (ISO8601 string) is less than or equal to the guild's configured value (integer; days before current date)"
      },
      "de": {
        "title": "de",
        "enum": [
          "de"
        ],
        "type": "string",
        "description": "The de locale"
      },
      "DEFAULT": {
        "title": "DEFAULT",
        "enum": [
          0
        ],
        "type": "integer"
      },
      "DEFAULT_KEYWORD_LIST": {
        "title": "DEFAULT_KEYWORD_LIST",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "Check if content contains words from internal pre-defined wordsets"
      },
      "DEFAULT1": {
        "title": "DEFAULT1",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "No default has been set for forum channel"
      },
      "DEFAULT2": {
        "title": "DEFAULT2",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Reference to a message"
      },
      "DefaultKeywordListTriggerMetadata1": {
        "title": "DefaultKeywordListTriggerMetadata1",
        "required": [
          "mention_total_limit"
        ],
        "type": "object",
        "properties": {
          "allow_list": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "maxLength": 60,
              "minLength": 1,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "presets": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomodKeywordPresetType"
            },
            "description": "",
            "nullable": true
          },
          "keyword_filter": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "maxLength": 60,
              "minLength": 1,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "regex_patterns": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "maxLength": 260,
              "minLength": 1,
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "mention_total_limit": {
            "maximum": 50.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32"
          },
          "mention_raid_protection_enabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE": {
        "title": "DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE",
        "enum": [
          5
        ],
        "type": "integer"
      },
      "DEFERRED_UPDATE_MESSAGE": {
        "title": "DEFERRED_UPDATE_MESSAGE",
        "enum": [
          6
        ],
        "type": "integer"
      },
      "Description": {
        "title": "Description",
        "required": [
          "default"
        ],
        "type": "object",
        "properties": {
          "default": {
            "maxLength": 400,
            "type": "string"
          },
          "localizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "DEVELOPER_SUPPORT_SERVER": {
        "title": "DEVELOPER_SUPPORT_SERVER",
        "enum": [
          "DEVELOPER_SUPPORT_SERVER"
        ],
        "type": "string",
        "description": "guild has been set as a support server on the App Directory"
      },
      "DISABLED": {
        "title": "DISABLED",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "media content will not be scanned"
      },
      "DISCORD": {
        "title": "DISCORD",
        "enum": [
          "discord"
        ],
        "type": "string"
      },
      "DISCOVERABLE": {
        "title": "DISCOVERABLE",
        "enum": [
          "DISCOVERABLE"
        ],
        "type": "string",
        "description": "guild is able to be discovered in the directory"
      },
      "DM": {
        "title": "DM",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "A direct message between users"
      },
      "DM_CHANNELS_READ": {
        "title": "DM_CHANNELS_READ",
        "enum": [
          "dm_channels.read"
        ],
        "type": "string",
        "description": "allows your app to see information about the user's DMs and group DMs - requires Discord approval"
      },
      "DOMAIN": {
        "title": "DOMAIN",
        "enum": [
          "domain"
        ],
        "type": "string"
      },
      "DROPDOWN": {
        "title": "DROPDOWN",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Many options shown as a dropdown"
      },
      "EBAY": {
        "title": "EBAY",
        "enum": [
          "ebay"
        ],
        "type": "string"
      },
      "el": {
        "title": "el",
        "enum": [
          "el"
        ],
        "type": "string",
        "description": "The el locale"
      },
      "ELEVATED": {
        "title": "ELEVATED",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Guild has a 2FA requirement for moderation actions"
      },
      "EMAIL": {
        "title": "EMAIL",
        "enum": [
          "email"
        ],
        "type": "string",
        "description": "enables /users/@me to return an email"
      },
      "EMBEDDED_APPLICATION": {
        "title": "EMBEDDED_APPLICATION",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "EMOJI_CREATE": {
        "title": "EMOJI_CREATE",
        "enum": [
          60
        ],
        "type": "integer"
      },
      "EMOJI_DELETE": {
        "title": "EMOJI_DELETE",
        "enum": [
          62
        ],
        "type": "integer"
      },
      "EMOJI_UPDATE": {
        "title": "EMOJI_UPDATE",
        "enum": [
          61
        ],
        "type": "integer"
      },
      "en-GB": {
        "title": "en-GB",
        "enum": [
          "en-GB"
        ],
        "type": "string",
        "description": "The en-GB locale"
      },
      "en-US": {
        "title": "en-US",
        "enum": [
          "en-US"
        ],
        "type": "string",
        "description": "The en-US locale"
      },
      "EPIC_GAMES": {
        "title": "EPIC_GAMES",
        "enum": [
          "epicgames"
        ],
        "type": "string"
      },
      "es-419": {
        "title": "es-419",
        "enum": [
          "es-419"
        ],
        "type": "string",
        "description": "The es-419 locale"
      },
      "es-ES": {
        "title": "es-ES",
        "enum": [
          "es-ES"
        ],
        "type": "string",
        "description": "The es-ES locale"
      },
      "EVERYONE": {
        "title": "EVERYONE",
        "enum": [
          "everyone"
        ],
        "type": "string",
        "description": "Controls @everyone and @here mentions"
      },
      "EVERYONE1": {
        "title": "EVERYONE1",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "EXPLICIT": {
        "title": "EXPLICIT",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "EXTERNAL": {
        "title": "EXTERNAL",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "FACEBOOK": {
        "title": "FACEBOOK",
        "enum": [
          "facebook"
        ],
        "type": "string"
      },
      "FEATURABLE": {
        "title": "FEATURABLE",
        "enum": [
          "FEATURABLE"
        ],
        "type": "string",
        "description": "guild is able to be featured in the directory"
      },
      "fi": {
        "title": "fi",
        "enum": [
          "fi"
        ],
        "type": "string",
        "description": "The fi locale"
      },
      "FIFTEEN_MINUTES": {
        "title": "FIFTEEN_MINUTES",
        "enum": [
          900
        ],
        "type": "integer"
      },
      "FIVE_MINUTES": {
        "title": "FIVE_MINUTES",
        "enum": [
          300
        ],
        "type": "integer"
      },
      "FLAG_TO_CHANNEL": {
        "title": "FLAG_TO_CHANNEL",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Send a system message to a channel in order to log the user message that triggered the rule"
      },
      "FlagToChannelActionMetadata1": {
        "title": "FlagToChannelActionMetadata1",
        "required": [
          "channel_id"
        ],
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "duration_seconds": {
            "maximum": 2419200.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "custom_message": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          }
        }
      },
      "FOURTEEN_DAYS": {
        "title": "FOURTEEN_DAYS",
        "enum": [
          14
        ],
        "type": "integer",
        "description": "14 days"
      },
      "fr": {
        "title": "fr",
        "enum": [
          "fr"
        ],
        "type": "string",
        "description": "The fr locale"
      },
      "FRIEND": {
        "title": "FRIEND",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "FULFILLED": {
        "title": "FULFILLED",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "FULFILLMENT_FAILED": {
        "title": "FULFILLMENT_FAILED",
        "enum": [
          4
        ],
        "type": "integer"
      },
      "FULFILLMENT_NEEDED": {
        "title": "FULFILLMENT_NEEDED",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "FULFILLMENT_NOT_NEEDED": {
        "title": "FULFILLMENT_NOT_NEEDED",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "FULL": {
        "title": "FULL",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "720p"
      },
      "GDM_JOIN": {
        "title": "GDM_JOIN",
        "enum": [
          "gdm.join"
        ],
        "type": "string",
        "description": "allows your app to join users to a group dm"
      },
      "GIF": {
        "title": "GIF",
        "enum": [
          4
        ],
        "type": "integer"
      },
      "GITHUB": {
        "title": "GITHUB",
        "enum": [
          "github"
        ],
        "type": "string"
      },
      "GRID": {
        "title": "GRID",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Display posts as a collection of tiles"
      },
      "GROUP_DM": {
        "title": "GROUP_DM",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "A direct message between multiple users"
      },
      "GROUP_DM1": {
        "title": "GROUP_DM1",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "GUILD": {
        "title": "GUILD",
        "enum": [
          0
        ],
        "type": "integer"
      },
      "GUILD_ANNOUNCEMENT": {
        "title": "GUILD_ANNOUNCEMENT",
        "enum": [
          5
        ],
        "type": "integer",
        "description": "A channel that users can follow and crosspost into their own server (formerly news channels)"
      },
      "GUILD_APPLICATION_PREMIUM_SUBSCRIPTION": {
        "title": "GUILD_APPLICATION_PREMIUM_SUBSCRIPTION",
        "enum": [
          32
        ],
        "type": "integer"
      },
      "GUILD_BOOST": {
        "title": "GUILD_BOOST",
        "enum": [
          8
        ],
        "type": "integer"
      },
      "GUILD_BOOST_TIER_1": {
        "title": "GUILD_BOOST_TIER_1",
        "enum": [
          9
        ],
        "type": "integer"
      },
      "GUILD_BOOST_TIER_2": {
        "title": "GUILD_BOOST_TIER_2",
        "enum": [
          10
        ],
        "type": "integer"
      },
      "GUILD_BOOST_TIER_3": {
        "title": "GUILD_BOOST_TIER_3",
        "enum": [
          11
        ],
        "type": "integer"
      },
      "GUILD_CATEGORY": {
        "title": "GUILD_CATEGORY",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "An organizational category that contains up to 50 channels"
      },
      "GUILD_DIRECTORY": {
        "title": "GUILD_DIRECTORY",
        "enum": [
          14
        ],
        "type": "integer",
        "description": "The channel in a hub containing the listed servers"
      },
      "GUILD_DISCOVERY_DISQUALIFIED": {
        "title": "GUILD_DISCOVERY_DISQUALIFIED",
        "enum": [
          14
        ],
        "type": "integer"
      },
      "GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING": {
        "title": "GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING",
        "enum": [
          17
        ],
        "type": "integer"
      },
      "GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING": {
        "title": "GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING",
        "enum": [
          16
        ],
        "type": "integer"
      },
      "GUILD_DISCOVERY_REQUALIFIED": {
        "title": "GUILD_DISCOVERY_REQUALIFIED",
        "enum": [
          15
        ],
        "type": "integer"
      },
      "GUILD_FORUM": {
        "title": "GUILD_FORUM",
        "enum": [
          15
        ],
        "type": "integer",
        "description": "Channel that can only contain threads"
      },
      "GUILD_HOME_FEATURE_ITEM": {
        "title": "GUILD_HOME_FEATURE_ITEM",
        "enum": [
          171
        ],
        "type": "integer"
      },
      "GUILD_HOME_REMOVE_ITEM": {
        "title": "GUILD_HOME_REMOVE_ITEM",
        "enum": [
          172
        ],
        "type": "integer"
      },
      "GUILD_INCIDENT_ALERT_MODE_DISABLED": {
        "title": "GUILD_INCIDENT_ALERT_MODE_DISABLED",
        "enum": [
          37
        ],
        "type": "integer"
      },
      "GUILD_INCIDENT_ALERT_MODE_ENABLED": {
        "title": "GUILD_INCIDENT_ALERT_MODE_ENABLED",
        "enum": [
          36
        ],
        "type": "integer"
      },
      "GUILD_INCIDENT_REPORT_FALSE_ALARM": {
        "title": "GUILD_INCIDENT_REPORT_FALSE_ALARM",
        "enum": [
          39
        ],
        "type": "integer"
      },
      "GUILD_INCIDENT_REPORT_RAID": {
        "title": "GUILD_INCIDENT_REPORT_RAID",
        "enum": [
          38
        ],
        "type": "integer"
      },
      "GUILD_INCOMING": {
        "title": "GUILD_INCOMING",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Incoming Webhooks can post messages to channels with a generated token"
      },
      "GUILD_INVITE_REMINDER": {
        "title": "GUILD_INVITE_REMINDER",
        "enum": [
          22
        ],
        "type": "integer"
      },
      "GUILD_MEMBER_JOIN_OR_UPDATE": {
        "title": "GUILD_MEMBER_JOIN_OR_UPDATE",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "A user is attempting to join the server or a member's properties were updated."
      },
      "GUILD_ONLY": {
        "title": "GUILD_ONLY",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "the scheduled event is only accessible to guild members"
      },
      "GUILD_ONLY1": {
        "title": "GUILD_ONLY1",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "The Stage instance is visible publicly. (deprecated)"
      },
      "GUILD_PRODUCT": {
        "title": "GUILD_PRODUCT",
        "enum": [
          0
        ],
        "type": "integer"
      },
      "GUILD_ROLE_SUBSCRIPTIONS": {
        "title": "GUILD_ROLE_SUBSCRIPTIONS",
        "enum": [
          4
        ],
        "type": "integer"
      },
      "GUILD_SCHEDULED_EVENT_CREATE": {
        "title": "GUILD_SCHEDULED_EVENT_CREATE",
        "enum": [
          100
        ],
        "type": "integer"
      },
      "GUILD_SCHEDULED_EVENT_DELETE": {
        "title": "GUILD_SCHEDULED_EVENT_DELETE",
        "enum": [
          102
        ],
        "type": "integer"
      },
      "GUILD_SCHEDULED_EVENT_UPDATE": {
        "title": "GUILD_SCHEDULED_EVENT_UPDATE",
        "enum": [
          101
        ],
        "type": "integer"
      },
      "GUILD_STAGE_VOICE": {
        "title": "GUILD_STAGE_VOICE",
        "enum": [
          13
        ],
        "type": "integer",
        "description": "A voice channel for hosting events with an audience"
      },
      "GUILD_SUBSCRIPTION": {
        "title": "GUILD_SUBSCRIPTION",
        "enum": [
          "guild_subscription"
        ],
        "type": "string"
      },
      "GUILD_TEXT": {
        "title": "GUILD_TEXT",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "A text channel within a server"
      },
      "GUILD_UPDATE": {
        "title": "GUILD_UPDATE",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "GUILD_VOICE": {
        "title": "GUILD_VOICE",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "A voice channel within a server"
      },
      "GUILD1": {
        "title": "GUILD1",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "a sticker uploaded to a guild for the guild's members"
      },
      "GUILDS": {
        "title": "GUILDS",
        "enum": [
          "guilds"
        ],
        "type": "string",
        "description": "allows /users/@me/guilds to return basic information about all of a user's guilds"
      },
      "GuildsAutoModerationRulesRequest": {
        "title": "GuildsAutoModerationRulesRequest",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "event_type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MESSAGE_SEND"
              },
              {
                "$ref": "#/components/schemas/GUILD_MEMBER_JOIN_OR_UPDATE"
              }
            ]
          },
          "actions": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockMessageAction"
                },
                {
                  "$ref": "#/components/schemas/FlagToChannelAction"
                },
                {
                  "$ref": "#/components/schemas/QuarantineUserAction"
                },
                {
                  "$ref": "#/components/schemas/UserCommunicationDisabledAction"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "exempt_roles": {
            "maxItems": 20,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "exempt_channels": {
            "maxItems": 50,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "trigger_type": {},
          "trigger_metadata": {
            "$ref": "#/components/schemas/DefaultKeywordListTriggerMetadata1"
          }
        }
      },
      "GuildsBansRequest": {
        "title": "GuildsBansRequest",
        "type": "object",
        "properties": {
          "delete_message_seconds": {
            "maximum": 604800.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "delete_message_days": {
            "maximum": 7.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildsBulkBanRequest": {
        "title": "GuildsBulkBanRequest",
        "required": [
          "user_ids"
        ],
        "type": "object",
        "properties": {
          "user_ids": {
            "maxItems": 200,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": ""
          },
          "delete_message_seconds": {
            "maximum": 604800.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildsChannelsRequest": {
        "title": "GuildsChannelsRequest",
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "position": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parent_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "lock_permissions": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "GuildsEmojisRequest": {
        "title": "GuildsEmojisRequest",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 2,
            "type": "string"
          },
          "roles": {
            "maxItems": 1521,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "oneOf": [
                {
                  "pattern": "^(0|[1-9][0-9]*)$",
                  "type": "string"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "GuildsEmojisRequest1": {
        "title": "GuildsEmojisRequest1",
        "required": [
          "name",
          "image"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 2,
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "binary"
          },
          "roles": {
            "maxItems": 1521,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "oneOf": [
                {
                  "pattern": "^(0|[1-9][0-9]*)$",
                  "type": "string"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "GuildsInvitesResponse": {
        "title": "GuildsInvitesResponse",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTypes"
                  }
                ]
              },
              {}
            ]
          },
          "code": {
            "type": "string"
          },
          "inviter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ]
          },
          "max_age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "friends_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteChannelResponse"
              }
            ]
          },
          "is_contact": {
            "type": "boolean",
            "nullable": true
          },
          "uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "guild": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteGuildResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "stage_instance": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteStageInstanceResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTargetTypes"
                  }
                ]
              },
              {}
            ]
          },
          "target_user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteApplicationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_scheduled_event": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "temporary": {
            "type": "boolean",
            "nullable": true
          },
          "approximate_presence_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildsMembersMeRequest": {
        "title": "GuildsMembersMeRequest",
        "type": "object",
        "properties": {
          "nick": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildsMembersRequest": {
        "title": "GuildsMembersRequest",
        "required": [
          "access_token"
        ],
        "type": "object",
        "properties": {
          "nick": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          },
          "roles": {
            "maxItems": 1521,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "oneOf": [
                {
                  "pattern": "^(0|[1-9][0-9]*)$",
                  "type": "string"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "mute": {
            "type": "boolean",
            "nullable": true
          },
          "deaf": {
            "type": "boolean",
            "nullable": true
          },
          "access_token": {
            "maxLength": 152133,
            "type": "string"
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildsMembersRequest1": {
        "title": "GuildsMembersRequest1",
        "type": "object",
        "properties": {
          "nick": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          },
          "roles": {
            "maxItems": 1521,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "oneOf": [
                {
                  "pattern": "^(0|[1-9][0-9]*)$",
                  "type": "string"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          },
          "mute": {
            "type": "boolean",
            "nullable": true
          },
          "deaf": {
            "type": "boolean",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "communication_disabled_until": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildsPruneRequest": {
        "title": "GuildsPruneRequest",
        "type": "object",
        "properties": {
          "days": {
            "maximum": 30.0,
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "compute_prune_count": {
            "type": "boolean",
            "nullable": true
          },
          "include_roles": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maxItems": 100,
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "pattern": "^(0|[1-9][0-9]*)$",
                  "oneOf": [
                    {
                      "pattern": "^(0|[1-9][0-9]*)$",
                      "type": "string"
                    }
                  ]
                }
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "GuildsRolesRequest": {
        "title": "GuildsRolesRequest",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "color": {
            "maximum": 16777215.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hoist": {
            "type": "boolean",
            "nullable": true
          },
          "mentionable": {
            "type": "boolean",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "unicode_emoji": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildsRolesRequest2": {
        "title": "GuildsRolesRequest2",
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GuildsStickersRequest": {
        "title": "GuildsStickersRequest",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "minLength": 2,
            "type": "string"
          },
          "tags": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildsTemplatesRequest": {
        "title": "GuildsTemplatesRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "nullable": true
          }
        }
      },
      "GuildsTemplatesRequest1": {
        "title": "GuildsTemplatesRequest1",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 120,
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildsTemplatesRequest2": {
        "title": "GuildsTemplatesRequest2",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 120,
            "type": "string",
            "nullable": true
          }
        }
      },
      "GuildsVoiceStatesMeRequest": {
        "title": "GuildsVoiceStatesMeRequest",
        "type": "object",
        "properties": {
          "request_to_speak_timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suppress": {
            "type": "boolean",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "GuildsVoiceStatesRequest": {
        "title": "GuildsVoiceStatesRequest",
        "type": "object",
        "properties": {
          "suppress": {
            "type": "boolean",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "GuildsWidgetRequest": {
        "title": "GuildsWidgetRequest",
        "type": "object",
        "properties": {
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "GUILDS_JOIN": {
        "title": "GUILDS_JOIN",
        "enum": [
          "guilds.join"
        ],
        "type": "string",
        "description": "allows /guilds/{guild.id}/members/{user.id} to be used for joining users to a guild"
      },
      "GUILDS_MEMBERS_READ": {
        "title": "GUILDS_MEMBERS_READ",
        "enum": [
          "guilds.members.read"
        ],
        "type": "string",
        "description": "allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild"
      },
      "HARMFUL_LINKS_BLOCKED_MESSAGE": {
        "title": "HARMFUL_LINKS_BLOCKED_MESSAGE",
        "enum": [
          180
        ],
        "type": "integer"
      },
      "he": {
        "title": "he",
        "enum": [
          "he"
        ],
        "type": "string",
        "description": "The he locale"
      },
      "hi": {
        "title": "hi",
        "enum": [
          "hi"
        ],
        "type": "string",
        "description": "The hi locale"
      },
      "HIGH": {
        "title": "HIGH",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "must be a member of the server for longer than 10 minutes"
      },
      "HOME_SETTINGS_CREATE": {
        "title": "HOME_SETTINGS_CREATE",
        "enum": [
          190
        ],
        "type": "integer"
      },
      "HOME_SETTINGS_UPDATE": {
        "title": "HOME_SETTINGS_UPDATE",
        "enum": [
          191
        ],
        "type": "integer"
      },
      "hr": {
        "title": "hr",
        "enum": [
          "hr"
        ],
        "type": "string",
        "description": "The hr locale"
      },
      "hu": {
        "title": "hu",
        "enum": [
          "hu"
        ],
        "type": "string",
        "description": "The hu locale"
      },
      "id": {
        "title": "id",
        "enum": [
          "id"
        ],
        "type": "string",
        "description": "The id locale"
      },
      "IDENTIFY": {
        "title": "IDENTIFY",
        "enum": [
          "identify"
        ],
        "type": "string",
        "description": "allows /users/@me without email"
      },
      "INPUT_TEXT1": {
        "title": "INPUT_TEXT1",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "Text input object"
      },
      "INSTAGRAM": {
        "title": "INSTAGRAM",
        "enum": [
          "instagram"
        ],
        "type": "string"
      },
      "INTEGER": {
        "title": "INTEGER",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "An integer option. Any integer between -2^53 and 2^53 is a valid value"
      },
      "INTEGER_EQUAL": {
        "title": "INTEGER_EQUAL",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "the metadata value (integer) is equal to the guild's configured value (integer)"
      },
      "INTEGER_GREATER_THAN_EQUAL": {
        "title": "INTEGER_GREATER_THAN_EQUAL",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "the metadata value (integer) is greater than or equal to the guild's configured value (integer)"
      },
      "INTEGER_LESS_THAN_EQUAL": {
        "title": "INTEGER_LESS_THAN_EQUAL",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "the metadata value (integer) is less than or equal to the guild's configured value (integer)"
      },
      "INTEGER_NOT_EQUAL": {
        "title": "INTEGER_NOT_EQUAL",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "the metadata value (integer) is not equal to the guild's configured value (integer)"
      },
      "INTEGRATION_CREATE": {
        "title": "INTEGRATION_CREATE",
        "enum": [
          80
        ],
        "type": "integer"
      },
      "INTEGRATION_DELETE": {
        "title": "INTEGRATION_DELETE",
        "enum": [
          82
        ],
        "type": "integer"
      },
      "INTEGRATION_UPDATE": {
        "title": "INTEGRATION_UPDATE",
        "enum": [
          81
        ],
        "type": "integer"
      },
      "INTERACTION_PREMIUM_UPSELL": {
        "title": "INTERACTION_PREMIUM_UPSELL",
        "enum": [
          26
        ],
        "type": "integer"
      },
      "InteractionsCallbackRequest": {
        "title": "InteractionsCallbackRequest",
        "type": "object",
        "properties": {
          "type": {},
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InteractionApplicationCommandAutocompleteCallbackIntegerData"
              },
              {
                "$ref": "#/components/schemas/InteractionApplicationCommandAutocompleteCallbackNumberData"
              },
              {
                "$ref": "#/components/schemas/InteractionApplicationCommandAutocompleteCallbackStringData"
              }
            ]
          }
        }
      },
      "INVITE_CREATE": {
        "title": "INVITE_CREATE",
        "enum": [
          40
        ],
        "type": "integer"
      },
      "INVITE_DELETE": {
        "title": "INVITE_DELETE",
        "enum": [
          42
        ],
        "type": "integer"
      },
      "INVITE_SPLASH": {
        "title": "INVITE_SPLASH",
        "enum": [
          "INVITE_SPLASH"
        ],
        "type": "string",
        "description": "guild has access to set an invite splash background"
      },
      "INVITE_UPDATE": {
        "title": "INVITE_UPDATE",
        "enum": [
          41
        ],
        "type": "integer"
      },
      "INVITED": {
        "title": "INVITED",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "User has been invited to the team."
      },
      "InvitesResponse": {
        "title": "InvitesResponse",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTypes"
                  }
                ]
              },
              {}
            ]
          },
          "code": {
            "type": "string"
          },
          "inviter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ]
          },
          "max_age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "friends_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteChannelResponse"
              }
            ]
          },
          "is_contact": {
            "type": "boolean",
            "nullable": true
          },
          "uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approximate_member_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "guild": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteGuildResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "stage_instance": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteStageInstanceResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_type": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/InviteTargetTypes"
                  }
                ]
              },
              {}
            ]
          },
          "target_user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "target_application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InviteApplicationResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "guild_scheduled_event": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledEventResponse"
              },
              {
                "nullable": true
              }
            ]
          },
          "temporary": {
            "type": "boolean",
            "nullable": true
          },
          "approximate_presence_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "INVITES_DISABLED": {
        "title": "INVITES_DISABLED",
        "enum": [
          "INVITES_DISABLED"
        ],
        "type": "string",
        "description": "guild has paused invites, preventing new users from joining"
      },
      "it": {
        "title": "it",
        "enum": [
          "it"
        ],
        "type": "string",
        "description": "The it locale"
      },
      "ja": {
        "title": "ja",
        "enum": [
          "ja"
        ],
        "type": "string",
        "description": "The ja locale"
      },
      "KEYWORD": {
        "title": "KEYWORD",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Check if content contains words from a list of keywords or matches regex"
      },
      "KICK": {
        "title": "KICK",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Kick"
      },
      "ko": {
        "title": "ko",
        "enum": [
          "ko"
        ],
        "type": "string",
        "description": "The ko locale"
      },
      "LATEST_ACTIVITY": {
        "title": "LATEST_ACTIVITY",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Sort forum posts by activity"
      },
      "LEAGUE_OF_LEGENDS": {
        "title": "LEAGUE_OF_LEGENDS",
        "enum": [
          "leagueoflegends"
        ],
        "type": "string"
      },
      "LINK": {
        "title": "LINK",
        "enum": [
          5
        ],
        "type": "integer"
      },
      "LIST": {
        "title": "LIST",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Display posts as a list"
      },
      "LOTTIE": {
        "title": "LOTTIE",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "LOW": {
        "title": "LOW",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "must have verified email on account"
      },
      "lt": {
        "title": "lt",
        "enum": [
          "lt"
        ],
        "type": "string",
        "description": "The lt locale"
      },
      "MEDIUM": {
        "title": "MEDIUM",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "must be registered on Discord for longer than 5 minutes"
      },
      "MEMBER": {
        "title": "MEMBER",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "MEMBER_BAN_ADD": {
        "title": "MEMBER_BAN_ADD",
        "enum": [
          22
        ],
        "type": "integer"
      },
      "MEMBER_BAN_REMOVE": {
        "title": "MEMBER_BAN_REMOVE",
        "enum": [
          23
        ],
        "type": "integer"
      },
      "MEMBER_DISCONNECT": {
        "title": "MEMBER_DISCONNECT",
        "enum": [
          27
        ],
        "type": "integer"
      },
      "MEMBER_KICK": {
        "title": "MEMBER_KICK",
        "enum": [
          20
        ],
        "type": "integer"
      },
      "MEMBER_MOVE": {
        "title": "MEMBER_MOVE",
        "enum": [
          26
        ],
        "type": "integer"
      },
      "MEMBER_PRUNE": {
        "title": "MEMBER_PRUNE",
        "enum": [
          21
        ],
        "type": "integer"
      },
      "MEMBER_ROLE_UPDATE": {
        "title": "MEMBER_ROLE_UPDATE",
        "enum": [
          25
        ],
        "type": "integer"
      },
      "MEMBER_UPDATE": {
        "title": "MEMBER_UPDATE",
        "enum": [
          24
        ],
        "type": "integer"
      },
      "MEMBER_VERIFICATION_GATE_ENABLED": {
        "title": "MEMBER_VERIFICATION_GATE_ENABLED",
        "enum": [
          "MEMBER_VERIFICATION_GATE_ENABLED"
        ],
        "type": "string",
        "description": "guild has enabled Membership Screening"
      },
      "MEMBERS_WITHOUT_ROLES": {
        "title": "MEMBERS_WITHOUT_ROLES",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "media content sent by members without roles will be scanned"
      },
      "MENTION_SPAM": {
        "title": "MENTION_SPAM",
        "enum": [
          5
        ],
        "type": "integer",
        "description": "Check if content contains more unique mentions than allowed"
      },
      "MENTIONABLE": {
        "title": "MENTIONABLE",
        "enum": [
          9
        ],
        "type": "integer",
        "description": "A snowflake option that represents anything you can mention"
      },
      "MENTIONABLE_SELECT1": {
        "title": "MENTIONABLE_SELECT1",
        "enum": [
          7
        ],
        "type": "integer",
        "description": "Select menu for mentionables (users and roles)"
      },
      "MESSAGE": {
        "title": "MESSAGE",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "A UI-based command that shows up when you right click or tap on a message"
      },
      "MESSAGE_BULK_DELETE": {
        "title": "MESSAGE_BULK_DELETE",
        "enum": [
          73
        ],
        "type": "integer"
      },
      "MESSAGE_COMPONENT": {
        "title": "MESSAGE_COMPONENT",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Sent when a user interacts with a message component previously sent by your application"
      },
      "MESSAGE_DELETE": {
        "title": "MESSAGE_DELETE",
        "enum": [
          72
        ],
        "type": "integer"
      },
      "MESSAGE_PIN": {
        "title": "MESSAGE_PIN",
        "enum": [
          74
        ],
        "type": "integer"
      },
      "MESSAGE_SEND": {
        "title": "MESSAGE_SEND",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "A user submitted a message to a channel"
      },
      "MESSAGE_UNPIN": {
        "title": "MESSAGE_UNPIN",
        "enum": [
          75
        ],
        "type": "integer"
      },
      "MESSAGES_READ": {
        "title": "MESSAGES_READ",
        "enum": [
          "messages.read"
        ],
        "type": "string",
        "description": "for local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates)"
      },
      "ML_SPAM": {
        "title": "ML_SPAM",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Check if content represents generic spam"
      },
      "MODAL": {
        "title": "MODAL",
        "enum": [
          9
        ],
        "type": "integer"
      },
      "MODAL_SUBMIT": {
        "title": "MODAL_SUBMIT",
        "enum": [
          5
        ],
        "type": "integer",
        "description": "Sent when a user submits a modal previously sent by your application"
      },
      "ModalInteractionCallbackData1": {
        "title": "ModalInteractionCallbackData1",
        "required": [
          "components",
          "custom_id",
          "title"
        ],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed1"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              }
            ]
          },
          "components": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow2"
            },
            "description": "",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          },
          "tts": {
            "type": "boolean",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "custom_id": {
            "maxLength": 100,
            "type": "string"
          },
          "title": {
            "maxLength": 45,
            "type": "string"
          },
          "choices": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCommandOptionIntegerChoice"
                },
                {
                  "nullable": true
                }
              ]
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "MORE_STICKERS": {
        "title": "MORE_STICKERS",
        "enum": [
          "MORE_STICKERS"
        ],
        "type": "string",
        "description": "guild has increased custom sticker slots"
      },
      "MULTIPLE_CHOICE": {
        "title": "MULTIPLE_CHOICE",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Multiple choice options"
      },
      "NEWS": {
        "title": "NEWS",
        "enum": [
          "NEWS"
        ],
        "type": "string",
        "description": "guild has access to create announcement channels"
      },
      "nl": {
        "title": "nl",
        "enum": [
          "nl"
        ],
        "type": "string",
        "description": "The nl locale"
      },
      "no": {
        "title": "no",
        "enum": [
          "no"
        ],
        "type": "string",
        "description": "The no locale"
      },
      "NONE": {
        "title": "NONE",
        "enum": [
          0
        ],
        "type": "integer"
      },
      "NONE2": {
        "title": "NONE2",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "unrestricted"
      },
      "NONE3": {
        "title": "NONE3",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Guild has no MFA/2FA requirement for moderation actions"
      },
      "NONE4": {
        "title": "NONE4",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Guild has not unlocked any Server Boost perks"
      },
      "NONE5": {
        "title": "NONE5",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "None"
      },
      "NUMBER": {
        "title": "NUMBER",
        "enum": [
          10
        ],
        "type": "integer",
        "description": "A number option. Any double between -2^53 and 2^53 is a valid value"
      },
      "ONBOARDING_ADVANCED": {
        "title": "ONBOARDING_ADVANCED",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Default Channels and Onboarding Prompts considered in constraints"
      },
      "ONBOARDING_CREATE": {
        "title": "ONBOARDING_CREATE",
        "enum": [
          166
        ],
        "type": "integer"
      },
      "ONBOARDING_DEFAULT": {
        "title": "ONBOARDING_DEFAULT",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Only Default Channels considered in constraints"
      },
      "ONBOARDING_PROMPT_CREATE": {
        "title": "ONBOARDING_PROMPT_CREATE",
        "enum": [
          163
        ],
        "type": "integer"
      },
      "ONBOARDING_PROMPT_DELETE": {
        "title": "ONBOARDING_PROMPT_DELETE",
        "enum": [
          165
        ],
        "type": "integer"
      },
      "ONBOARDING_PROMPT_UPDATE": {
        "title": "ONBOARDING_PROMPT_UPDATE",
        "enum": [
          164
        ],
        "type": "integer"
      },
      "ONBOARDING_UPDATE": {
        "title": "ONBOARDING_UPDATE",
        "enum": [
          167
        ],
        "type": "integer"
      },
      "ONE_DAY": {
        "title": "ONE_DAY",
        "enum": [
          1440
        ],
        "type": "integer",
        "description": "One day"
      },
      "ONE_DAY1": {
        "title": "ONE_DAY1",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "1 day"
      },
      "ONE_HOUR": {
        "title": "ONE_HOUR",
        "enum": [
          3600
        ],
        "type": "integer"
      },
      "ONE_HOUR1": {
        "title": "ONE_HOUR1",
        "enum": [
          60
        ],
        "type": "integer",
        "description": "One hour"
      },
      "ONE_MINUTE": {
        "title": "ONE_MINUTE",
        "enum": [
          60
        ],
        "type": "integer"
      },
      "ONLY_MENTIONS": {
        "title": "ONLY_MENTIONS",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "members will receive notifications only for messages that @mention them by default"
      },
      "OPENID": {
        "title": "OPENID",
        "enum": [
          "openid"
        ],
        "type": "string",
        "description": "for OpenID Connect, this allows your app to receive user id and basic profile information"
      },
      "PARAGRAPH": {
        "title": "PARAGRAPH",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Multi-line input"
      },
      "PARTNERED": {
        "title": "PARTNERED",
        "enum": [
          "PARTNERED"
        ],
        "type": "string",
        "description": "guild is partnered"
      },
      "PAYPAL": {
        "title": "PAYPAL",
        "enum": [
          "paypal"
        ],
        "type": "string"
      },
      "PING": {
        "title": "PING",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Sent by Discord to validate your application's interaction handler"
      },
      "pl": {
        "title": "pl",
        "enum": [
          "pl"
        ],
        "type": "string",
        "description": "The pl locale"
      },
      "PLAYSTATION": {
        "title": "PLAYSTATION",
        "enum": [
          "playstation"
        ],
        "type": "string"
      },
      "PNG": {
        "title": "PNG",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "PONG": {
        "title": "PONG",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "PREMIUM": {
        "title": "PREMIUM",
        "enum": [
          6
        ],
        "type": "integer"
      },
      "PREVIEW_ENABLED": {
        "title": "PREVIEW_ENABLED",
        "enum": [
          "PREVIEW_ENABLED"
        ],
        "type": "string",
        "description": "guild can be previewed before joining via Membership Screening or the directory"
      },
      "PRIMARY": {
        "title": "PRIMARY",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "PRIVATE_THREAD": {
        "title": "PRIVATE_THREAD",
        "enum": [
          12
        ],
        "type": "integer",
        "description": "A temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission"
      },
      "PROFANITY": {
        "title": "PROFANITY",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Words and phrases that may be considered profanity"
      },
      "pt-BR": {
        "title": "pt-BR",
        "enum": [
          "pt-BR"
        ],
        "type": "string",
        "description": "The pt-BR locale"
      },
      "PUBLIC": {
        "title": "PUBLIC",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "The Stage instance is visible publicly. (deprecated)"
      },
      "PUBLIC_THREAD": {
        "title": "PUBLIC_THREAD",
        "enum": [
          11
        ],
        "type": "integer",
        "description": "A temporary sub-channel within a GUILD_TEXT or GUILD_THREADS_ONLY channel type set"
      },
      "QUARANTINE_USER": {
        "title": "QUARANTINE_USER",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "Prevent a user from interacting in the server"
      },
      "QUEST_REWARD": {
        "title": "QUEST_REWARD",
        "enum": [
          10
        ],
        "type": "integer"
      },
      "RAID_ALERTS_DISABLED": {
        "title": "RAID_ALERTS_DISABLED",
        "enum": [
          "RAID_ALERTS_DISABLED"
        ],
        "type": "string",
        "description": "guild has disabled activity alerts in the configured safety alerts channel"
      },
      "RECIPIENT_ADD": {
        "title": "RECIPIENT_ADD",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "RECIPIENT_REMOVE": {
        "title": "RECIPIENT_REMOVE",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "REDDIT": {
        "title": "REDDIT",
        "enum": [
          "reddit"
        ],
        "type": "string"
      },
      "RELATIONSHIPS_READ": {
        "title": "RELATIONSHIPS_READ",
        "enum": [
          "relationships.read"
        ],
        "type": "string",
        "description": "allows your app to know a user's friends and implicit relationships - requires Discord approval"
      },
      "REMOVE_ROLE": {
        "title": "REMOVE_ROLE",
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Remove role"
      },
      "REPLY": {
        "title": "REPLY",
        "enum": [
          19
        ],
        "type": "integer"
      },
      "RichEmbed1": {
        "title": "RichEmbed1",
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 152133,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "title": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "color": {
            "maximum": 16777215.0,
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "nullable": true
          },
          "author": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedAuthor"
              }
            ]
          },
          "image": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedImage"
              }
            ]
          },
          "thumbnail": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedThumbnail"
              }
            ]
          },
          "footer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedFooter"
              }
            ]
          },
          "fields": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbedField"
            },
            "description": "",
            "nullable": true
          },
          "provider": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedProvider"
              }
            ]
          },
          "video": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RichEmbedVideo"
              }
            ]
          }
        }
      },
      "RIOT_GAMES": {
        "title": "RIOT_GAMES",
        "enum": [
          "riotgames"
        ],
        "type": "string"
      },
      "ro": {
        "title": "ro",
        "enum": [
          "ro"
        ],
        "type": "string",
        "description": "The ro locale"
      },
      "ROBLOX": {
        "title": "ROBLOX",
        "enum": [
          "roblox"
        ],
        "type": "string"
      },
      "ROLE": {
        "title": "ROLE",
        "enum": [
          8
        ],
        "type": "integer",
        "description": "A snowflake option that represents a Role"
      },
      "ROLE_CONNECTIONS_WRITE": {
        "title": "ROLE_CONNECTIONS_WRITE",
        "enum": [
          "role_connections.write"
        ],
        "type": "string",
        "description": "allows your app to update a user's connection and metadata for the app"
      },
      "ROLE_CREATE": {
        "title": "ROLE_CREATE",
        "enum": [
          30
        ],
        "type": "integer"
      },
      "ROLE_DELETE": {
        "title": "ROLE_DELETE",
        "enum": [
          32
        ],
        "type": "integer"
      },
      "ROLE_ICONS": {
        "title": "ROLE_ICONS",
        "enum": [
          "ROLE_ICONS"
        ],
        "type": "string",
        "description": "guild is able to set role icons"
      },
      "ROLE_SELECT1": {
        "title": "ROLE_SELECT1",
        "enum": [
          6
        ],
        "type": "integer",
        "description": "Select menu for roles"
      },
      "ROLE_SUBSCRIPTION_PURCHASE": {
        "title": "ROLE_SUBSCRIPTION_PURCHASE",
        "enum": [
          25
        ],
        "type": "integer"
      },
      "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE": {
        "title": "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE",
        "enum": [
          "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE"
        ],
        "type": "string",
        "description": "guild has role subscriptions that can be purchased"
      },
      "ROLE_SUBSCRIPTIONS_ENABLED": {
        "title": "ROLE_SUBSCRIPTIONS_ENABLED",
        "enum": [
          "ROLE_SUBSCRIPTIONS_ENABLED"
        ],
        "type": "string",
        "description": "guild has enabled role subscriptions"
      },
      "ROLE_SUBSCRIPTIONS_PURCHASE": {
        "title": "ROLE_SUBSCRIPTIONS_PURCHASE",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "ROLE_UPDATE": {
        "title": "ROLE_UPDATE",
        "enum": [
          31
        ],
        "type": "integer"
      },
      "ROLE1": {
        "title": "ROLE1",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "This permission is for a role."
      },
      "ROLE2": {
        "title": "ROLE2",
        "enum": [
          0
        ],
        "type": "integer"
      },
      "ROLE3": {
        "title": "ROLE3",
        "enum": [
          "role"
        ],
        "type": "string"
      },
      "ROLES": {
        "title": "ROLES",
        "enum": [
          "roles"
        ],
        "type": "string",
        "description": "Controls user mentions"
      },
      "RPC": {
        "title": "RPC",
        "enum": [
          "rpc"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to control a user's local Discord client - requires Discord approval"
      },
      "RPC_ACTIVITIES_WRITE": {
        "title": "RPC_ACTIVITIES_WRITE",
        "enum": [
          "rpc.activities.write"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to update a user's activity - requires Discord approval"
      },
      "RPC_NOTIFICATIONS_READ": {
        "title": "RPC_NOTIFICATIONS_READ",
        "enum": [
          "rpc.notifications.read"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approval"
      },
      "RPC_SCREENSHARE_READ": {
        "title": "RPC_SCREENSHARE_READ",
        "enum": [
          "rpc.screenshare.read"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to read a user's screenshare status- requires Discord approval"
      },
      "RPC_SCREENSHARE_WRITE": {
        "title": "RPC_SCREENSHARE_WRITE",
        "enum": [
          "rpc.screenshare.write"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to update a user's screenshare settings- requires Discord approval"
      },
      "RPC_VIDEO_READ": {
        "title": "RPC_VIDEO_READ",
        "enum": [
          "rpc.video.read"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to read a user's video status - requires Discord approval"
      },
      "RPC_VIDEO_WRITE": {
        "title": "RPC_VIDEO_WRITE",
        "enum": [
          "rpc.video.write"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to update a user's video settings - requires Discord approval"
      },
      "RPC_VOICE_READ": {
        "title": "RPC_VOICE_READ",
        "enum": [
          "rpc.voice.read"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approval"
      },
      "RPC_VOICE_WRITE": {
        "title": "RPC_VOICE_WRITE",
        "enum": [
          "rpc.voice.write"
        ],
        "type": "string",
        "description": "for local rpc server access, this allows you to update a user's voice settings - requires Discord approval"
      },
      "ru": {
        "title": "ru",
        "enum": [
          "ru"
        ],
        "type": "string",
        "description": "The ru locale"
      },
      "SAFE": {
        "title": "SAFE",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "SCHEDULED": {
        "title": "SCHEDULED",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "SECONDARY": {
        "title": "SECONDARY",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "SelectOption1": {
        "title": "SelectOption1",
        "required": [
          "label",
          "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "emoji": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Emoji"
              }
            ]
          },
          "default": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "SEVEN_DAY": {
        "title": "SEVEN_DAY",
        "enum": [
          10080
        ],
        "type": "integer",
        "description": "Seven days"
      },
      "SEVEN_DAYS": {
        "title": "SEVEN_DAYS",
        "enum": [
          7
        ],
        "type": "integer",
        "description": "7 days"
      },
      "SEXUAL_CONTENT": {
        "title": "SEXUAL_CONTENT",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Words and phrases that may be considered as sexual content"
      },
      "SHIELD": {
        "title": "SHIELD",
        "enum": [
          "shield"
        ],
        "type": "string",
        "description": "shield style widget with Discord icon and guild members online count"
      },
      "SHORT": {
        "title": "SHORT",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Single-line input"
      },
      "SKYPE": {
        "title": "SKYPE",
        "enum": [
          "skype"
        ],
        "type": "string"
      },
      "SLURS": {
        "title": "SLURS",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Words and phrases that may be considered slurs and hate speech"
      },
      "SOUNDBOARD_SOUND_CREATE": {
        "title": "SOUNDBOARD_SOUND_CREATE",
        "enum": [
          130
        ],
        "type": "integer"
      },
      "SOUNDBOARD_SOUND_DELETE": {
        "title": "SOUNDBOARD_SOUND_DELETE",
        "enum": [
          132
        ],
        "type": "integer"
      },
      "SOUNDBOARD_SOUND_UPDATE": {
        "title": "SOUNDBOARD_SOUND_UPDATE",
        "enum": [
          131
        ],
        "type": "integer"
      },
      "SPAM_LINK": {
        "title": "SPAM_LINK",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "DEPRECATED"
      },
      "SPOTIFY": {
        "title": "SPOTIFY",
        "enum": [
          "spotify"
        ],
        "type": "string"
      },
      "StageInstancesRequest": {
        "title": "StageInstancesRequest",
        "required": [
          "topic",
          "channel_id"
        ],
        "type": "object",
        "properties": {
          "topic": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string"
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "type": "string"
          },
          "privacy_level": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "nullable": true
                  },
                  {
                    "$ref": "#/components/schemas/StageInstancesPrivacyLevels"
                  }
                ]
              },
              {}
            ]
          },
          "guild_scheduled_event_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "send_start_notification": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "StageInstancesRequest1": {
        "title": "StageInstancesRequest1",
        "type": "object",
        "properties": {
          "topic": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string"
          },
          "privacy_level": {
            "$ref": "#/components/schemas/StageInstancesPrivacyLevels"
          }
        }
      },
      "STAGE_END": {
        "title": "STAGE_END",
        "enum": [
          28
        ],
        "type": "integer"
      },
      "STAGE_INSTANCE": {
        "title": "STAGE_INSTANCE",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "STAGE_INSTANCE_CREATE": {
        "title": "STAGE_INSTANCE_CREATE",
        "enum": [
          83
        ],
        "type": "integer"
      },
      "STAGE_INSTANCE_DELETE": {
        "title": "STAGE_INSTANCE_DELETE",
        "enum": [
          85
        ],
        "type": "integer"
      },
      "STAGE_INSTANCE_UPDATE": {
        "title": "STAGE_INSTANCE_UPDATE",
        "enum": [
          84
        ],
        "type": "integer"
      },
      "STAGE_SPEAKER": {
        "title": "STAGE_SPEAKER",
        "enum": [
          29
        ],
        "type": "integer"
      },
      "STAGE_START": {
        "title": "STAGE_START",
        "enum": [
          27
        ],
        "type": "integer"
      },
      "STAGE_TOPIC": {
        "title": "STAGE_TOPIC",
        "enum": [
          31
        ],
        "type": "integer"
      },
      "STANDARD": {
        "title": "STANDARD",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "an official sticker in a pack, part of Nitro or in a removed purchasable pack"
      },
      "STEAM": {
        "title": "STEAM",
        "enum": [
          "steam"
        ],
        "type": "string"
      },
      "STICKER_CREATE": {
        "title": "STICKER_CREATE",
        "enum": [
          90
        ],
        "type": "integer"
      },
      "STICKER_DELETE": {
        "title": "STICKER_DELETE",
        "enum": [
          92
        ],
        "type": "integer"
      },
      "STICKER_UPDATE": {
        "title": "STICKER_UPDATE",
        "enum": [
          91
        ],
        "type": "integer"
      },
      "STREAM": {
        "title": "STREAM",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "STRING": {
        "title": "STRING",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "A string option"
      },
      "STRING_SELECT1": {
        "title": "STRING_SELECT1",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Select menu for picking from defined text options"
      },
      "SUB_COMMAND": {
        "title": "SUB_COMMAND",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "A sub-action within a command or group"
      },
      "SUB_COMMAND_GROUP": {
        "title": "SUB_COMMAND_GROUP",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "A group of subcommands"
      },
      "SUCCESS": {
        "title": "SUCCESS",
        "enum": [
          3
        ],
        "type": "integer"
      },
      "sv-SE": {
        "title": "sv-SE",
        "enum": [
          "sv-SE"
        ],
        "type": "string",
        "description": "The sv-SE locale"
      },
      "TALK": {
        "title": "TALK",
        "enum": [
          1
        ],
        "type": "integer"
      },
      "th": {
        "title": "th",
        "enum": [
          "th"
        ],
        "type": "string",
        "description": "The th locale"
      },
      "THIRTY_DAYS": {
        "title": "THIRTY_DAYS",
        "enum": [
          30
        ],
        "type": "integer",
        "description": "30 days"
      },
      "THIRTY_MINUTES": {
        "title": "THIRTY_MINUTES",
        "enum": [
          1800
        ],
        "type": "integer"
      },
      "THREAD_CREATE": {
        "title": "THREAD_CREATE",
        "enum": [
          110
        ],
        "type": "integer"
      },
      "THREAD_CREATED": {
        "title": "THREAD_CREATED",
        "enum": [
          18
        ],
        "type": "integer"
      },
      "THREAD_DELETE": {
        "title": "THREAD_DELETE",
        "enum": [
          112
        ],
        "type": "integer"
      },
      "THREAD_STARTER_MESSAGE": {
        "title": "THREAD_STARTER_MESSAGE",
        "enum": [
          21
        ],
        "type": "integer"
      },
      "THREAD_UPDATE": {
        "title": "THREAD_UPDATE",
        "enum": [
          111
        ],
        "type": "integer"
      },
      "THREE_DAY": {
        "title": "THREE_DAY",
        "enum": [
          4320
        ],
        "type": "integer",
        "description": "Three days"
      },
      "THREE_DAYS": {
        "title": "THREE_DAYS",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "3 days"
      },
      "TICKETED_EVENTS_ENABLED": {
        "title": "TICKETED_EVENTS_ENABLED",
        "enum": [
          "TICKETED_EVENTS_ENABLED"
        ],
        "type": "string",
        "description": "guild has enabled ticketed events"
      },
      "TIER_0": {
        "title": "TIER_0",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Nitro Basic"
      },
      "TIER_1": {
        "title": "TIER_1",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Guild has unlocked Server Boost level 1 perks"
      },
      "TIER_2": {
        "title": "TIER_2",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Guild has unlocked Server Boost level 2 perks"
      },
      "TIER_3": {
        "title": "TIER_3",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Guild has unlocked Server Boost level 3 perks"
      },
      "TIER_11": {
        "title": "TIER_11",
        "enum": [
          1
        ],
        "type": "integer",
        "description": "Nitro Classic"
      },
      "TIER_21": {
        "title": "TIER_21",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "Nitro Standard"
      },
      "TIKTOK": {
        "title": "TIKTOK",
        "enum": [
          "tiktok"
        ],
        "type": "string"
      },
      "tr": {
        "title": "tr",
        "enum": [
          "tr"
        ],
        "type": "string",
        "description": "The tr locale"
      },
      "TWITCH": {
        "title": "TWITCH",
        "enum": [
          "twitch"
        ],
        "type": "string"
      },
      "TWITTER": {
        "title": "TWITTER",
        "enum": [
          "twitter"
        ],
        "type": "string"
      },
      "uk": {
        "title": "uk",
        "enum": [
          "uk"
        ],
        "type": "string",
        "description": "The uk locale"
      },
      "UNFULFILLED": {
        "title": "UNFULFILLED",
        "enum": [
          6
        ],
        "type": "integer"
      },
      "UNFULFILLMENT_FAILED": {
        "title": "UNFULFILLMENT_FAILED",
        "enum": [
          7
        ],
        "type": "integer"
      },
      "UNFULFILLMENT_NEEDED": {
        "title": "UNFULFILLMENT_NEEDED",
        "enum": [
          5
        ],
        "type": "integer"
      },
      "UNKNOWN": {
        "title": "UNKNOWN",
        "enum": [
          0
        ],
        "type": "integer"
      },
      "UPDATE_MESSAGE": {
        "title": "UPDATE_MESSAGE",
        "enum": [
          7
        ],
        "type": "integer"
      },
      "USER": {
        "title": "USER",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "A UI-based command that shows up when you right click or tap on a user"
      },
      "USER_COMMUNICATION_DISABLED": {
        "title": "USER_COMMUNICATION_DISABLED",
        "enum": [
          3
        ],
        "type": "integer",
        "description": "Temporarily disable a user's ability to communicate in the server (timeout)"
      },
      "USER_JOIN": {
        "title": "USER_JOIN",
        "enum": [
          7
        ],
        "type": "integer"
      },
      "USER_SELECT1": {
        "title": "USER_SELECT1",
        "enum": [
          5
        ],
        "type": "integer",
        "description": "Select menu for users"
      },
      "USER1": {
        "title": "USER1",
        "enum": [
          6
        ],
        "type": "integer",
        "description": "A snowflake option that represents a User"
      },
      "USER2": {
        "title": "USER2",
        "enum": [
          2
        ],
        "type": "integer",
        "description": "This permission is for a user."
      },
      "USER3": {
        "title": "USER3",
        "enum": [
          "user"
        ],
        "type": "string"
      },
      "USERS": {
        "title": "USERS",
        "enum": [
          "users"
        ],
        "type": "string",
        "description": "Controls role mentions"
      },
      "UsersMeApplicationsRoleConnectionRequest": {
        "title": "UsersMeApplicationsRoleConnectionRequest",
        "type": "object",
        "properties": {
          "platform_name": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "platform_username": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "VANITY_URL": {
        "title": "VANITY_URL",
        "enum": [
          "VANITY_URL"
        ],
        "type": "string",
        "description": "guild has access to set a vanity URL"
      },
      "VERIFIED": {
        "title": "VERIFIED",
        "enum": [
          "VERIFIED"
        ],
        "type": "string",
        "description": "guild is verified"
      },
      "VERY_HIGH": {
        "title": "VERY_HIGH",
        "enum": [
          4
        ],
        "type": "integer",
        "description": "must have a verified phone number"
      },
      "vi": {
        "title": "vi",
        "enum": [
          "vi"
        ],
        "type": "string",
        "description": "The vi locale"
      },
      "VIEW": {
        "title": "VIEW",
        "enum": [
          0
        ],
        "type": "integer"
      },
      "VIP_REGIONS": {
        "title": "VIP_REGIONS",
        "enum": [
          "VIP_REGIONS"
        ],
        "type": "string",
        "description": "guild has access to set 384kbps bitrate in voice (previously VIP voice servers)"
      },
      "VOICE": {
        "title": "VOICE",
        "enum": [
          "voice"
        ],
        "type": "string",
        "description": "allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval"
      },
      "VOICE_CHANNEL_STATUS_CREATE": {
        "title": "VOICE_CHANNEL_STATUS_CREATE",
        "enum": [
          192
        ],
        "type": "integer"
      },
      "VOICE_CHANNEL_STATUS_DELETE": {
        "title": "VOICE_CHANNEL_STATUS_DELETE",
        "enum": [
          193
        ],
        "type": "integer"
      },
      "VOICE1": {
        "title": "VOICE1",
        "enum": [
          2
        ],
        "type": "integer"
      },
      "WEBHOOK_CREATE": {
        "title": "WEBHOOK_CREATE",
        "enum": [
          50
        ],
        "type": "integer"
      },
      "WEBHOOK_DELETE": {
        "title": "WEBHOOK_DELETE",
        "enum": [
          52
        ],
        "type": "integer"
      },
      "WEBHOOK_INCOMING": {
        "title": "WEBHOOK_INCOMING",
        "enum": [
          "webhook.incoming"
        ],
        "type": "string",
        "description": "this generates a webhook that is returned in the oauth token response for authorization code grants"
      },
      "WEBHOOK_UPDATE": {
        "title": "WEBHOOK_UPDATE",
        "enum": [
          51
        ],
        "type": "integer"
      },
      "WebhooksRequest": {
        "title": "WebhooksRequest",
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "embeds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RichEmbed1"
            },
            "description": "",
            "nullable": true
          },
          "allowed_mentions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAllowedMentionsRequest"
              }
            ]
          },
          "components": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionRow3"
            },
            "description": "",
            "nullable": true
          },
          "attachments": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentRequest"
            },
            "description": "",
            "nullable": true
          },
          "tts": {
            "type": "boolean",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "username": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "avatar_url": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "thread_name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "applied_tags": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "pattern": "^(0|[1-9][0-9]*)$",
              "type": "string"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "WebhooksRequest1": {
        "title": "WebhooksRequest1",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "nullable": true
          }
        }
      },
      "WebhooksRequest2": {
        "title": "WebhooksRequest2",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "channel_id": {
            "pattern": "^(0|[1-9][0-9]*)$",
            "oneOf": [
              {
                "pattern": "^(0|[1-9][0-9]*)$",
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "WELCOME_SCREEN_ENABLED": {
        "title": "WELCOME_SCREEN_ENABLED",
        "enum": [
          "WELCOME_SCREEN_ENABLED"
        ],
        "type": "string",
        "description": "guild has enabled the welcome screen"
      },
      "XBOX": {
        "title": "XBOX",
        "enum": [
          "xbox"
        ],
        "type": "string"
      },
      "YOUTUBE": {
        "title": "YOUTUBE",
        "enum": [
          "youtube"
        ],
        "type": "string"
      },
      "ZEROES": {
        "title": "ZEROES",
        "enum": [
          "0000"
        ],
        "type": "string"
      },
      "zh-CN": {
        "title": "zh-CN",
        "enum": [
          "zh-CN"
        ],
        "type": "string",
        "description": "The zh-CN locale"
      },
      "zh-TW": {
        "title": "zh-TW",
        "enum": [
          "zh-TW"
        ],
        "type": "string",
        "description": "The zh-TW locale"
      },
      "AfkTimeouts": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ONE_MINUTE"
          },
          {
            "$ref": "#/components/schemas/FIVE_MINUTES"
          },
          {
            "$ref": "#/components/schemas/FIFTEEN_MINUTES"
          },
          {
            "$ref": "#/components/schemas/THIRTY_MINUTES"
          },
          {
            "$ref": "#/components/schemas/ONE_HOUR"
          }
        ]
      },
      "AllowedMentionTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/USERS"
          },
          {
            "$ref": "#/components/schemas/ROLES"
          },
          {
            "$ref": "#/components/schemas/EVERYONE"
          }
        ]
      },
      "ApplicationCommandOptionType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SUB_COMMAND"
          },
          {
            "$ref": "#/components/schemas/SUB_COMMAND_GROUP"
          },
          {
            "$ref": "#/components/schemas/STRING"
          },
          {
            "$ref": "#/components/schemas/INTEGER"
          },
          {
            "$ref": "#/components/schemas/BOOLEAN"
          },
          {
            "$ref": "#/components/schemas/USER1"
          },
          {
            "$ref": "#/components/schemas/CHANNEL"
          },
          {
            "$ref": "#/components/schemas/ROLE"
          },
          {
            "$ref": "#/components/schemas/MENTIONABLE"
          },
          {
            "$ref": "#/components/schemas/NUMBER"
          },
          {
            "$ref": "#/components/schemas/ATTACHMENT"
          }
        ]
      },
      "ApplicationCommandPermissionType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ROLE1"
          },
          {
            "$ref": "#/components/schemas/USER2"
          },
          {
            "$ref": "#/components/schemas/CHANNEL1"
          }
        ]
      },
      "ApplicationCommandType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CHAT"
          },
          {
            "$ref": "#/components/schemas/USER"
          },
          {
            "$ref": "#/components/schemas/MESSAGE"
          }
        ]
      },
      "ApplicationTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GUILD_ROLE_SUBSCRIPTIONS"
          }
        ]
      },
      "AuditLogActionTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GUILD_UPDATE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_CREATE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_UPDATE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_DELETE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_OVERWRITE_CREATE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_OVERWRITE_UPDATE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_OVERWRITE_DELETE"
          },
          {
            "$ref": "#/components/schemas/MEMBER_KICK"
          },
          {
            "$ref": "#/components/schemas/MEMBER_PRUNE"
          },
          {
            "$ref": "#/components/schemas/MEMBER_BAN_ADD"
          },
          {
            "$ref": "#/components/schemas/MEMBER_BAN_REMOVE"
          },
          {
            "$ref": "#/components/schemas/MEMBER_UPDATE"
          },
          {
            "$ref": "#/components/schemas/MEMBER_ROLE_UPDATE"
          },
          {
            "$ref": "#/components/schemas/MEMBER_MOVE"
          },
          {
            "$ref": "#/components/schemas/MEMBER_DISCONNECT"
          },
          {
            "$ref": "#/components/schemas/BOT_ADD"
          },
          {
            "$ref": "#/components/schemas/ROLE_CREATE"
          },
          {
            "$ref": "#/components/schemas/ROLE_UPDATE"
          },
          {
            "$ref": "#/components/schemas/ROLE_DELETE"
          },
          {
            "$ref": "#/components/schemas/INVITE_CREATE"
          },
          {
            "$ref": "#/components/schemas/INVITE_UPDATE"
          },
          {
            "$ref": "#/components/schemas/INVITE_DELETE"
          },
          {
            "$ref": "#/components/schemas/WEBHOOK_CREATE"
          },
          {
            "$ref": "#/components/schemas/WEBHOOK_UPDATE"
          },
          {
            "$ref": "#/components/schemas/WEBHOOK_DELETE"
          },
          {
            "$ref": "#/components/schemas/EMOJI_CREATE"
          },
          {
            "$ref": "#/components/schemas/EMOJI_UPDATE"
          },
          {
            "$ref": "#/components/schemas/EMOJI_DELETE"
          },
          {
            "$ref": "#/components/schemas/MESSAGE_DELETE"
          },
          {
            "$ref": "#/components/schemas/MESSAGE_BULK_DELETE"
          },
          {
            "$ref": "#/components/schemas/MESSAGE_PIN"
          },
          {
            "$ref": "#/components/schemas/MESSAGE_UNPIN"
          },
          {
            "$ref": "#/components/schemas/INTEGRATION_CREATE"
          },
          {
            "$ref": "#/components/schemas/INTEGRATION_UPDATE"
          },
          {
            "$ref": "#/components/schemas/INTEGRATION_DELETE"
          },
          {
            "$ref": "#/components/schemas/STAGE_INSTANCE_CREATE"
          },
          {
            "$ref": "#/components/schemas/STAGE_INSTANCE_UPDATE"
          },
          {
            "$ref": "#/components/schemas/STAGE_INSTANCE_DELETE"
          },
          {
            "$ref": "#/components/schemas/STICKER_CREATE"
          },
          {
            "$ref": "#/components/schemas/STICKER_UPDATE"
          },
          {
            "$ref": "#/components/schemas/STICKER_DELETE"
          },
          {
            "$ref": "#/components/schemas/GUILD_SCHEDULED_EVENT_CREATE"
          },
          {
            "$ref": "#/components/schemas/GUILD_SCHEDULED_EVENT_UPDATE"
          },
          {
            "$ref": "#/components/schemas/GUILD_SCHEDULED_EVENT_DELETE"
          },
          {
            "$ref": "#/components/schemas/THREAD_CREATE"
          },
          {
            "$ref": "#/components/schemas/THREAD_UPDATE"
          },
          {
            "$ref": "#/components/schemas/THREAD_DELETE"
          },
          {
            "$ref": "#/components/schemas/APPLICATION_COMMAND_PERMISSION_UPDATE"
          },
          {
            "$ref": "#/components/schemas/SOUNDBOARD_SOUND_CREATE"
          },
          {
            "$ref": "#/components/schemas/SOUNDBOARD_SOUND_UPDATE"
          },
          {
            "$ref": "#/components/schemas/SOUNDBOARD_SOUND_DELETE"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_RULE_CREATE"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_RULE_UPDATE"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_RULE_DELETE"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_BLOCK_MESSAGE"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_FLAG_TO_CHANNEL"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_USER_COMM_DISABLED"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_QUARANTINE_USER"
          },
          {
            "$ref": "#/components/schemas/CREATOR_MONETIZATION_REQUEST_CREATED"
          },
          {
            "$ref": "#/components/schemas/CREATOR_MONETIZATION_TERMS_ACCEPTED"
          },
          {
            "$ref": "#/components/schemas/ONBOARDING_PROMPT_CREATE"
          },
          {
            "$ref": "#/components/schemas/ONBOARDING_PROMPT_UPDATE"
          },
          {
            "$ref": "#/components/schemas/ONBOARDING_PROMPT_DELETE"
          },
          {
            "$ref": "#/components/schemas/ONBOARDING_CREATE"
          },
          {
            "$ref": "#/components/schemas/ONBOARDING_UPDATE"
          },
          {
            "$ref": "#/components/schemas/GUILD_HOME_FEATURE_ITEM"
          },
          {
            "$ref": "#/components/schemas/GUILD_HOME_REMOVE_ITEM"
          },
          {
            "$ref": "#/components/schemas/HARMFUL_LINKS_BLOCKED_MESSAGE"
          },
          {
            "$ref": "#/components/schemas/HOME_SETTINGS_CREATE"
          },
          {
            "$ref": "#/components/schemas/HOME_SETTINGS_UPDATE"
          },
          {
            "$ref": "#/components/schemas/VOICE_CHANNEL_STATUS_CREATE"
          },
          {
            "$ref": "#/components/schemas/VOICE_CHANNEL_STATUS_DELETE"
          }
        ]
      },
      "AutomodActionType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BLOCK_MESSAGE"
          },
          {
            "$ref": "#/components/schemas/FLAG_TO_CHANNEL"
          },
          {
            "$ref": "#/components/schemas/USER_COMMUNICATION_DISABLED"
          },
          {
            "$ref": "#/components/schemas/QUARANTINE_USER"
          }
        ]
      },
      "AutomodEventType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/MESSAGE_SEND"
          },
          {
            "$ref": "#/components/schemas/GUILD_MEMBER_JOIN_OR_UPDATE"
          }
        ]
      },
      "AutomodKeywordPresetType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PROFANITY"
          },
          {
            "$ref": "#/components/schemas/SEXUAL_CONTENT"
          },
          {
            "$ref": "#/components/schemas/SLURS"
          }
        ]
      },
      "AutomodTriggerType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/KEYWORD"
          },
          {
            "$ref": "#/components/schemas/SPAM_LINK"
          },
          {
            "$ref": "#/components/schemas/ML_SPAM"
          },
          {
            "$ref": "#/components/schemas/DEFAULT_KEYWORD_LIST"
          },
          {
            "$ref": "#/components/schemas/MENTION_SPAM"
          }
        ]
      },
      "AvailableLocalesEnum": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ar"
          },
          {
            "$ref": "#/components/schemas/bg"
          },
          {
            "$ref": "#/components/schemas/cs"
          },
          {
            "$ref": "#/components/schemas/da"
          },
          {
            "$ref": "#/components/schemas/de"
          },
          {
            "$ref": "#/components/schemas/el"
          },
          {
            "$ref": "#/components/schemas/en-GB"
          },
          {
            "$ref": "#/components/schemas/en-US"
          },
          {
            "$ref": "#/components/schemas/es-419"
          },
          {
            "$ref": "#/components/schemas/es-ES"
          },
          {
            "$ref": "#/components/schemas/fi"
          },
          {
            "$ref": "#/components/schemas/fr"
          },
          {
            "$ref": "#/components/schemas/he"
          },
          {
            "$ref": "#/components/schemas/hi"
          },
          {
            "$ref": "#/components/schemas/hr"
          },
          {
            "$ref": "#/components/schemas/hu"
          },
          {
            "$ref": "#/components/schemas/id"
          },
          {
            "$ref": "#/components/schemas/it"
          },
          {
            "$ref": "#/components/schemas/ja"
          },
          {
            "$ref": "#/components/schemas/ko"
          },
          {
            "$ref": "#/components/schemas/lt"
          },
          {
            "$ref": "#/components/schemas/nl"
          },
          {
            "$ref": "#/components/schemas/no"
          },
          {
            "$ref": "#/components/schemas/pl"
          },
          {
            "$ref": "#/components/schemas/pt-BR"
          },
          {
            "$ref": "#/components/schemas/ro"
          },
          {
            "$ref": "#/components/schemas/ru"
          },
          {
            "$ref": "#/components/schemas/sv-SE"
          },
          {
            "$ref": "#/components/schemas/th"
          },
          {
            "$ref": "#/components/schemas/tr"
          },
          {
            "$ref": "#/components/schemas/uk"
          },
          {
            "$ref": "#/components/schemas/vi"
          },
          {
            "$ref": "#/components/schemas/zh-CN"
          },
          {
            "$ref": "#/components/schemas/zh-TW"
          }
        ]
      },
      "ButtonStyleTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PRIMARY"
          },
          {
            "$ref": "#/components/schemas/SECONDARY"
          },
          {
            "$ref": "#/components/schemas/SUCCESS"
          },
          {
            "$ref": "#/components/schemas/DANGER"
          },
          {
            "$ref": "#/components/schemas/LINK"
          },
          {
            "$ref": "#/components/schemas/PREMIUM"
          }
        ]
      },
      "ChannelPermissionOverwrites": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ROLE2"
          },
          {
            "$ref": "#/components/schemas/MEMBER"
          }
        ]
      },
      "ChannelTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DM"
          },
          {
            "$ref": "#/components/schemas/GROUP_DM"
          },
          {
            "$ref": "#/components/schemas/GUILD_TEXT"
          },
          {
            "$ref": "#/components/schemas/GUILD_VOICE"
          },
          {
            "$ref": "#/components/schemas/GUILD_CATEGORY"
          },
          {
            "$ref": "#/components/schemas/GUILD_ANNOUNCEMENT"
          },
          {
            "$ref": "#/components/schemas/ANNOUNCEMENT_THREAD"
          },
          {
            "$ref": "#/components/schemas/PUBLIC_THREAD"
          },
          {
            "$ref": "#/components/schemas/PRIVATE_THREAD"
          },
          {
            "$ref": "#/components/schemas/GUILD_STAGE_VOICE"
          },
          {
            "$ref": "#/components/schemas/GUILD_DIRECTORY"
          },
          {
            "$ref": "#/components/schemas/GUILD_FORUM"
          }
        ]
      },
      "ConnectedAccountProviders": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BATTLENET"
          },
          {
            "$ref": "#/components/schemas/BUNGIE"
          },
          {
            "$ref": "#/components/schemas/EBAY"
          },
          {
            "$ref": "#/components/schemas/EPIC_GAMES"
          },
          {
            "$ref": "#/components/schemas/FACEBOOK"
          },
          {
            "$ref": "#/components/schemas/GITHUB"
          },
          {
            "$ref": "#/components/schemas/INSTAGRAM"
          },
          {
            "$ref": "#/components/schemas/LEAGUE_OF_LEGENDS"
          },
          {
            "$ref": "#/components/schemas/PAYPAL"
          },
          {
            "$ref": "#/components/schemas/PLAYSTATION"
          },
          {
            "$ref": "#/components/schemas/REDDIT"
          },
          {
            "$ref": "#/components/schemas/RIOT_GAMES"
          },
          {
            "$ref": "#/components/schemas/ROBLOX"
          },
          {
            "$ref": "#/components/schemas/SKYPE"
          },
          {
            "$ref": "#/components/schemas/SPOTIFY"
          },
          {
            "$ref": "#/components/schemas/STEAM"
          },
          {
            "$ref": "#/components/schemas/TIKTOK"
          },
          {
            "$ref": "#/components/schemas/TWITCH"
          },
          {
            "$ref": "#/components/schemas/TWITTER"
          },
          {
            "$ref": "#/components/schemas/XBOX"
          },
          {
            "$ref": "#/components/schemas/YOUTUBE"
          },
          {
            "$ref": "#/components/schemas/DOMAIN"
          }
        ]
      },
      "ConnectedAccountVisibility": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NONE"
          },
          {
            "$ref": "#/components/schemas/EVERYONE1"
          }
        ]
      },
      "EntitlementTenantFulfillmentStatusResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/UNKNOWN"
          },
          {
            "$ref": "#/components/schemas/FULFILLMENT_NOT_NEEDED"
          },
          {
            "$ref": "#/components/schemas/FULFILLMENT_NEEDED"
          },
          {
            "$ref": "#/components/schemas/FULFILLED"
          },
          {
            "$ref": "#/components/schemas/FULFILLMENT_FAILED"
          },
          {
            "$ref": "#/components/schemas/UNFULFILLMENT_NEEDED"
          },
          {
            "$ref": "#/components/schemas/UNFULFILLED"
          },
          {
            "$ref": "#/components/schemas/UNFULFILLMENT_FAILED"
          }
        ]
      },
      "EntitlementTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/APPLICATION_SUBSCRIPTION"
          },
          {
            "$ref": "#/components/schemas/QUEST_REWARD"
          }
        ]
      },
      "ForumLayout": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DEFAULT1"
          },
          {
            "$ref": "#/components/schemas/LIST"
          },
          {
            "$ref": "#/components/schemas/GRID"
          }
        ]
      },
      "GuildExplicitContentFilterTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DISABLED"
          },
          {
            "$ref": "#/components/schemas/MEMBERS_WITHOUT_ROLES"
          },
          {
            "$ref": "#/components/schemas/ALL_MEMBERS"
          }
        ]
      },
      "GuildFeatures": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ANIMATED_BANNER"
          },
          {
            "$ref": "#/components/schemas/ANIMATED_ICON"
          },
          {
            "$ref": "#/components/schemas/APPLICATION_COMMAND_PERMISSIONS_V2"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION"
          },
          {
            "$ref": "#/components/schemas/BANNER"
          },
          {
            "$ref": "#/components/schemas/COMMUNITY"
          },
          {
            "$ref": "#/components/schemas/CREATOR_MONETIZABLE_PROVISIONAL"
          },
          {
            "$ref": "#/components/schemas/CREATOR_STORE_PAGE"
          },
          {
            "$ref": "#/components/schemas/DEVELOPER_SUPPORT_SERVER"
          },
          {
            "$ref": "#/components/schemas/DISCOVERABLE"
          },
          {
            "$ref": "#/components/schemas/FEATURABLE"
          },
          {
            "$ref": "#/components/schemas/INVITES_DISABLED"
          },
          {
            "$ref": "#/components/schemas/INVITE_SPLASH"
          },
          {
            "$ref": "#/components/schemas/MEMBER_VERIFICATION_GATE_ENABLED"
          },
          {
            "$ref": "#/components/schemas/MORE_STICKERS"
          },
          {
            "$ref": "#/components/schemas/NEWS"
          },
          {
            "$ref": "#/components/schemas/PARTNERED"
          },
          {
            "$ref": "#/components/schemas/PREVIEW_ENABLED"
          },
          {
            "$ref": "#/components/schemas/RAID_ALERTS_DISABLED"
          },
          {
            "$ref": "#/components/schemas/ROLE_ICONS"
          },
          {
            "$ref": "#/components/schemas/ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE"
          },
          {
            "$ref": "#/components/schemas/ROLE_SUBSCRIPTIONS_ENABLED"
          },
          {
            "$ref": "#/components/schemas/TICKETED_EVENTS_ENABLED"
          },
          {
            "$ref": "#/components/schemas/VANITY_URL"
          },
          {
            "$ref": "#/components/schemas/VERIFIED"
          },
          {
            "$ref": "#/components/schemas/VIP_REGIONS"
          },
          {
            "$ref": "#/components/schemas/WELCOME_SCREEN_ENABLED"
          }
        ]
      },
      "GuildMFALevel": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NONE3"
          },
          {
            "$ref": "#/components/schemas/ELEVATED"
          }
        ]
      },
      "GuildNSFWContentLevel": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DEFAULT"
          },
          {
            "$ref": "#/components/schemas/EXPLICIT"
          },
          {
            "$ref": "#/components/schemas/SAFE"
          },
          {
            "$ref": "#/components/schemas/AGE_RESTRICTED"
          }
        ]
      },
      "GuildOnboardingMode": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ONBOARDING_DEFAULT"
          },
          {
            "$ref": "#/components/schemas/ONBOARDING_ADVANCED"
          }
        ]
      },
      "GuildScheduledEventEntityTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NONE"
          },
          {
            "$ref": "#/components/schemas/STAGE_INSTANCE"
          },
          {
            "$ref": "#/components/schemas/VOICE1"
          },
          {
            "$ref": "#/components/schemas/EXTERNAL"
          }
        ]
      },
      "GuildScheduledEventPrivacyLevels": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GUILD_ONLY"
          }
        ]
      },
      "GuildScheduledEventStatuses": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SCHEDULED"
          },
          {
            "$ref": "#/components/schemas/ACTIVE"
          },
          {
            "$ref": "#/components/schemas/COMPLETED"
          },
          {
            "$ref": "#/components/schemas/CANCELED"
          }
        ]
      },
      "IntegrationExpireBehaviorTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/REMOVE_ROLE"
          },
          {
            "$ref": "#/components/schemas/KICK"
          }
        ]
      },
      "IntegrationExpireGracePeriodTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ONE_DAY1"
          },
          {
            "$ref": "#/components/schemas/THREE_DAYS"
          },
          {
            "$ref": "#/components/schemas/SEVEN_DAYS"
          },
          {
            "$ref": "#/components/schemas/FOURTEEN_DAYS"
          },
          {
            "$ref": "#/components/schemas/THIRTY_DAYS"
          }
        ]
      },
      "IntegrationTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DISCORD"
          },
          {
            "$ref": "#/components/schemas/TWITCH"
          },
          {
            "$ref": "#/components/schemas/YOUTUBE"
          },
          {
            "$ref": "#/components/schemas/GUILD_SUBSCRIPTION"
          }
        ]
      },
      "InteractionCallbackTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PONG"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_MESSAGE_WITH_SOURCE"
          },
          {
            "$ref": "#/components/schemas/DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE"
          },
          {
            "$ref": "#/components/schemas/DEFERRED_UPDATE_MESSAGE"
          },
          {
            "$ref": "#/components/schemas/UPDATE_MESSAGE"
          },
          {
            "$ref": "#/components/schemas/APPLICATION_COMMAND_AUTOCOMPLETE_RESULT"
          },
          {
            "$ref": "#/components/schemas/MODAL"
          }
        ]
      },
      "InteractionTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PING"
          },
          {
            "$ref": "#/components/schemas/APPLICATION_COMMAND"
          },
          {
            "$ref": "#/components/schemas/MESSAGE_COMPONENT"
          },
          {
            "$ref": "#/components/schemas/APPLICATION_COMMAND_AUTOCOMPLETE"
          },
          {
            "$ref": "#/components/schemas/MODAL_SUBMIT"
          }
        ]
      },
      "InviteTargetTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/STREAM"
          },
          {
            "$ref": "#/components/schemas/EMBEDDED_APPLICATION"
          },
          {
            "$ref": "#/components/schemas/ROLE_SUBSCRIPTIONS_PURCHASE"
          }
        ]
      },
      "InviteTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GUILD"
          },
          {
            "$ref": "#/components/schemas/GROUP_DM1"
          },
          {
            "$ref": "#/components/schemas/FRIEND"
          }
        ]
      },
      "MessageComponentTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ACTION_ROW1"
          },
          {
            "$ref": "#/components/schemas/BUTTON1"
          },
          {
            "$ref": "#/components/schemas/STRING_SELECT1"
          },
          {
            "$ref": "#/components/schemas/INPUT_TEXT1"
          },
          {
            "$ref": "#/components/schemas/USER_SELECT1"
          },
          {
            "$ref": "#/components/schemas/ROLE_SELECT1"
          },
          {
            "$ref": "#/components/schemas/MENTIONABLE_SELECT1"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_SELECT1"
          }
        ]
      },
      "MessageReferenceType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DEFAULT2"
          }
        ]
      },
      "MessageType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DEFAULT"
          },
          {
            "$ref": "#/components/schemas/RECIPIENT_ADD"
          },
          {
            "$ref": "#/components/schemas/RECIPIENT_REMOVE"
          },
          {
            "$ref": "#/components/schemas/CALL"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_NAME_CHANGE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_ICON_CHANGE"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_PINNED_MESSAGE"
          },
          {
            "$ref": "#/components/schemas/USER_JOIN"
          },
          {
            "$ref": "#/components/schemas/GUILD_BOOST"
          },
          {
            "$ref": "#/components/schemas/GUILD_BOOST_TIER_1"
          },
          {
            "$ref": "#/components/schemas/GUILD_BOOST_TIER_2"
          },
          {
            "$ref": "#/components/schemas/GUILD_BOOST_TIER_3"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_FOLLOW_ADD"
          },
          {
            "$ref": "#/components/schemas/GUILD_DISCOVERY_DISQUALIFIED"
          },
          {
            "$ref": "#/components/schemas/GUILD_DISCOVERY_REQUALIFIED"
          },
          {
            "$ref": "#/components/schemas/GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING"
          },
          {
            "$ref": "#/components/schemas/GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING"
          },
          {
            "$ref": "#/components/schemas/THREAD_CREATED"
          },
          {
            "$ref": "#/components/schemas/REPLY"
          },
          {
            "$ref": "#/components/schemas/CHAT_INPUT_COMMAND"
          },
          {
            "$ref": "#/components/schemas/THREAD_STARTER_MESSAGE"
          },
          {
            "$ref": "#/components/schemas/GUILD_INVITE_REMINDER"
          },
          {
            "$ref": "#/components/schemas/CONTEXT_MENU_COMMAND"
          },
          {
            "$ref": "#/components/schemas/AUTO_MODERATION_ACTION"
          },
          {
            "$ref": "#/components/schemas/ROLE_SUBSCRIPTION_PURCHASE"
          },
          {
            "$ref": "#/components/schemas/INTERACTION_PREMIUM_UPSELL"
          },
          {
            "$ref": "#/components/schemas/STAGE_START"
          },
          {
            "$ref": "#/components/schemas/STAGE_END"
          },
          {
            "$ref": "#/components/schemas/STAGE_SPEAKER"
          },
          {
            "$ref": "#/components/schemas/STAGE_TOPIC"
          },
          {
            "$ref": "#/components/schemas/GUILD_APPLICATION_PREMIUM_SUBSCRIPTION"
          },
          {
            "$ref": "#/components/schemas/GUILD_INCIDENT_ALERT_MODE_ENABLED"
          },
          {
            "$ref": "#/components/schemas/GUILD_INCIDENT_ALERT_MODE_DISABLED"
          },
          {
            "$ref": "#/components/schemas/GUILD_INCIDENT_REPORT_RAID"
          },
          {
            "$ref": "#/components/schemas/GUILD_INCIDENT_REPORT_FALSE_ALARM"
          }
        ]
      },
      "MetadataItemTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/INTEGER_LESS_THAN_EQUAL"
          },
          {
            "$ref": "#/components/schemas/INTEGER_GREATER_THAN_EQUAL"
          },
          {
            "$ref": "#/components/schemas/INTEGER_EQUAL"
          },
          {
            "$ref": "#/components/schemas/INTEGER_NOT_EQUAL"
          },
          {
            "$ref": "#/components/schemas/DATETIME_LESS_THAN_EQUAL"
          },
          {
            "$ref": "#/components/schemas/DATETIME_GREATER_THAN_EQUAL"
          },
          {
            "$ref": "#/components/schemas/BOOLEAN_EQUAL"
          },
          {
            "$ref": "#/components/schemas/BOOLEAN_NOT_EQUAL"
          }
        ]
      },
      "NewMemberActionType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VIEW"
          },
          {
            "$ref": "#/components/schemas/TALK"
          }
        ]
      },
      "OAuth2Scopes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IDENTIFY"
          },
          {
            "$ref": "#/components/schemas/EMAIL"
          },
          {
            "$ref": "#/components/schemas/CONNECTIONS"
          },
          {
            "$ref": "#/components/schemas/GUILDS"
          },
          {
            "$ref": "#/components/schemas/GUILDS_JOIN"
          },
          {
            "$ref": "#/components/schemas/GUILDS_MEMBERS_READ"
          },
          {
            "$ref": "#/components/schemas/GDM_JOIN"
          },
          {
            "$ref": "#/components/schemas/BOT"
          },
          {
            "$ref": "#/components/schemas/RPC"
          },
          {
            "$ref": "#/components/schemas/RPC_NOTIFICATIONS_READ"
          },
          {
            "$ref": "#/components/schemas/RPC_VOICE_READ"
          },
          {
            "$ref": "#/components/schemas/RPC_VOICE_WRITE"
          },
          {
            "$ref": "#/components/schemas/RPC_VIDEO_READ"
          },
          {
            "$ref": "#/components/schemas/RPC_VIDEO_WRITE"
          },
          {
            "$ref": "#/components/schemas/RPC_SCREENSHARE_READ"
          },
          {
            "$ref": "#/components/schemas/RPC_SCREENSHARE_WRITE"
          },
          {
            "$ref": "#/components/schemas/RPC_ACTIVITIES_WRITE"
          },
          {
            "$ref": "#/components/schemas/WEBHOOK_INCOMING"
          },
          {
            "$ref": "#/components/schemas/MESSAGES_READ"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_BUILDS_UPLOAD"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_BUILDS_READ"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_COMMANDS"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_COMMANDS_UPDATE"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_STORE_UPDATE"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_ENTITLEMENTS"
          },
          {
            "$ref": "#/components/schemas/ACTIVITIES_READ"
          },
          {
            "$ref": "#/components/schemas/ACTIVITIES_WRITE"
          },
          {
            "$ref": "#/components/schemas/RELATIONSHIPS_READ"
          },
          {
            "$ref": "#/components/schemas/VOICE"
          },
          {
            "$ref": "#/components/schemas/DM_CHANNELS_READ"
          },
          {
            "$ref": "#/components/schemas/ROLE_CONNECTIONS_WRITE"
          },
          {
            "$ref": "#/components/schemas/OPENID"
          }
        ]
      },
      "OnboardingPromptType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/MULTIPLE_CHOICE"
          },
          {
            "$ref": "#/components/schemas/DROPDOWN"
          }
        ]
      },
      "PremiumGuildTiers": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NONE4"
          },
          {
            "$ref": "#/components/schemas/TIER_1"
          },
          {
            "$ref": "#/components/schemas/TIER_2"
          },
          {
            "$ref": "#/components/schemas/TIER_3"
          }
        ]
      },
      "PremiumTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NONE5"
          },
          {
            "$ref": "#/components/schemas/TIER_11"
          },
          {
            "$ref": "#/components/schemas/TIER_21"
          },
          {
            "$ref": "#/components/schemas/TIER_0"
          }
        ]
      },
      "PurchaseType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GUILD_PRODUCT"
          }
        ]
      },
      "SnowflakeSelectDefaultValueTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/USER3"
          },
          {
            "$ref": "#/components/schemas/ROLE3"
          },
          {
            "$ref": "#/components/schemas/CHANNEL2"
          }
        ]
      },
      "StageInstancesPrivacyLevels": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PUBLIC"
          },
          {
            "$ref": "#/components/schemas/GUILD_ONLY1"
          }
        ]
      },
      "StickerFormatTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PNG"
          },
          {
            "$ref": "#/components/schemas/APNG"
          },
          {
            "$ref": "#/components/schemas/LOTTIE"
          },
          {
            "$ref": "#/components/schemas/GIF"
          }
        ]
      },
      "StickerTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/STANDARD"
          },
          {
            "$ref": "#/components/schemas/GUILD1"
          }
        ]
      },
      "TeamMembershipStates": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/INVITED"
          },
          {
            "$ref": "#/components/schemas/ACCEPTED"
          }
        ]
      },
      "TextStyleTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SHORT"
          },
          {
            "$ref": "#/components/schemas/PARAGRAPH"
          }
        ]
      },
      "ThreadAutoArchiveDuration": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ONE_HOUR1"
          },
          {
            "$ref": "#/components/schemas/ONE_DAY"
          },
          {
            "$ref": "#/components/schemas/THREE_DAY"
          },
          {
            "$ref": "#/components/schemas/SEVEN_DAY"
          }
        ]
      },
      "ThreadSortOrder": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LATEST_ACTIVITY"
          },
          {
            "$ref": "#/components/schemas/CREATION_DATE"
          }
        ]
      },
      "UserNotificationSettings": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ALL_MESSAGES"
          },
          {
            "$ref": "#/components/schemas/ONLY_MENTIONS"
          }
        ]
      },
      "VerificationLevels": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NONE2"
          },
          {
            "$ref": "#/components/schemas/LOW"
          },
          {
            "$ref": "#/components/schemas/MEDIUM"
          },
          {
            "$ref": "#/components/schemas/HIGH"
          },
          {
            "$ref": "#/components/schemas/VERY_HIGH"
          }
        ]
      },
      "VideoQualityModes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AUTO"
          },
          {
            "$ref": "#/components/schemas/FULL"
          }
        ]
      },
      "WebhookTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GUILD_INCOMING"
          },
          {
            "$ref": "#/components/schemas/CHANNEL_FOLLOWER"
          },
          {
            "$ref": "#/components/schemas/APPLICATION_INCOMING"
          }
        ]
      },
      "WidgetImageStyles": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SHIELD"
          },
          {
            "$ref": "#/components/schemas/BANNER1"
          },
          {
            "$ref": "#/components/schemas/BANNER2"
          },
          {
            "$ref": "#/components/schemas/BANNER3"
          },
          {
            "$ref": "#/components/schemas/BANNER4"
          }
        ]
      },
      "WidgetUserDiscriminator": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ZEROES"
          }
        ]
      },
      "ErrorDetails": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "type": "object",
                              "additionalProperties": {}
                            },
                            {
                              "$ref": "#/components/schemas/InnerErrors"
                            }
                          ]
                        }
                      },
                      {
                        "$ref": "#/components/schemas/InnerErrors"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/components/schemas/InnerErrors"
                }
              ]
            }
          },
          {
            "$ref": "#/components/schemas/InnerErrors"
          }
        ]
      }
    },
    "securitySchemes": {
      "BotToken": {
        "type": "apiKey",
        "description": "Discord bot token",
        "name": "Authorization",
        "in": "header"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "discord.com/oauth2/authorize",
            "scopes": {
              "activities.read": "allows your app to fetch data from a user's \"Now Playing/Recently Played\" list - requires Discord approval",
              "activities.write": "allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)",
              "applications.builds.read": "allows your app to read build data for a user's applications",
              "applications.builds.upload": "allows your app to upload/update builds for a user's applications - requires Discord approval",
              "applications.commands": "allows your app to use commands in a guild",
              "applications.commands.permissions.update": "allows your app to update permissions for its commands in a guild a user has permissions to",
              "applications.entitlements": "allows your app to read entitlements for a user's applications",
              "applications.store.update": "allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications",
              "bot": "for oauth2 bots, this puts the bot in the user's selected guild by default",
              "connections": "allows /users/@me/connections to return linked third-party accounts",
              "dm_channels.read": "allows your app to see information about the user's DMs and group DMs - requires Discord approval",
              "email": "enables /users/@me to return an email",
              "gdm.join": "allows your app to join users to a group dm",
              "guilds": "allows /users/@me/guilds to return basic information about all of a user's guilds",
              "guilds.join": "allows /guilds/{guild.id}/members/{user.id} to be used for joining users to a guild",
              "guilds.members.read": "allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild",
              "identify": "allows /users/@me without email",
              "messages.read": "for local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates)",
              "openid": "for OpenID Connect, this allows your app to receive user id and basic profile information",
              "relationships.read": "allows your app to know a user's friends and implicit relationships - requires Discord approval",
              "rpc": "for local rpc server access, this allows you to control a user's local Discord client - requires Discord approval",
              "rpc.activities.write": "for local rpc server access, this allows you to update a user's activity - requires Discord approval",
              "rpc.notifications.read": "for local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approval",
              "rpc.screenshare.read": "for local rpc server access, this allows you to read a user's screenshare status- requires Discord approval",
              "rpc.screenshare.write": "for local rpc server access, this allows you to update a user's screenshare settings- requires Discord approval",
              "rpc.video.read": "for local rpc server access, this allows you to read a user's video status - requires Discord approval",
              "rpc.video.write": "for local rpc server access, this allows you to update a user's video settings - requires Discord approval",
              "rpc.voice.read": "for local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approval",
              "rpc.voice.write": "for local rpc server access, this allows you to update a user's voice settings - requires Discord approval",
              "voice": "allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval",
              "webhook.incoming": "this generates a webhook that is returned in the oauth token response for authorization code grants",
              "applications.commands.update": "",
              "role_connections.write": ""
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://discord.com/api/oauth2/token",
            "scopes": {
              "activities.read": "allows your app to fetch data from a user's \"Now Playing/Recently Played\" list - requires Discord approval",
              "activities.write": "allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)",
              "applications.builds.read": "allows your app to read build data for a user's applications",
              "applications.builds.upload": "allows your app to upload/update builds for a user's applications - requires Discord approval",
              "applications.commands": "allows your app to use commands in a guild",
              "applications.commands.permissions.update": "allows your app to update permissions for its commands in a guild a user has permissions to",
              "applications.commands.update": "allows your app to update its commands using a Bearer token - client credentials grant only",
              "applications.entitlements": "allows your app to read entitlements for a user's applications",
              "applications.store.update": "allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications",
              "bot": "for oauth2 bots, this puts the bot in the user's selected guild by default",
              "connections": "allows /users/@me/connections to return linked third-party accounts",
              "dm_channels.read": "allows your app to see information about the user's DMs and group DMs - requires Discord approval",
              "email": "enables /users/@me to return an email",
              "gdm.join": "allows your app to join users to a group dm",
              "guilds": "allows /users/@me/guilds to return basic information about all of a user's guilds",
              "guilds.join": "allows /guilds/{guild.id}/members/{user.id} to be used for joining users to a guild",
              "guilds.members.read": "allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild",
              "identify": "allows /users/@me without email",
              "messages.read": "for local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates)",
              "openid": "for OpenID Connect, this allows your app to receive user id and basic profile information",
              "relationships.read": "allows your app to know a user's friends and implicit relationships - requires Discord approval",
              "rpc": "for local rpc server access, this allows you to control a user's local Discord client - requires Discord approval",
              "rpc.activities.write": "for local rpc server access, this allows you to update a user's activity - requires Discord approval",
              "rpc.notifications.read": "for local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approval",
              "rpc.screenshare.read": "for local rpc server access, this allows you to read a user's screenshare status- requires Discord approval",
              "rpc.screenshare.write": "for local rpc server access, this allows you to update a user's screenshare settings- requires Discord approval",
              "rpc.video.read": "for local rpc server access, this allows you to read a user's video status - requires Discord approval",
              "rpc.video.write": "for local rpc server access, this allows you to update a user's video settings - requires Discord approval",
              "rpc.voice.read": "for local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approval",
              "rpc.voice.write": "for local rpc server access, this allows you to update a user's voice settings - requires Discord approval",
              "voice": "allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval",
              "webhook.incoming": "this generates a webhook that is returned in the oauth token response for authorization code grants",
              "role_connections.write": ""
            }
          },
          "authorizationCode": {
            "authorizationUrl": "discord.com/oauth2/authorize",
            "tokenUrl": "https://discord.com/api/oauth2/token",
            "scopes": {
              "activities.read": "allows your app to fetch data from a user's \"Now Playing/Recently Played\" list - requires Discord approval",
              "activities.write": "allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)",
              "applications.builds.read": "allows your app to read build data for a user's applications",
              "applications.builds.upload": "allows your app to upload/update builds for a user's applications - requires Discord approval",
              "applications.commands": "allows your app to use commands in a guild",
              "applications.commands.permissions.update": "allows your app to update permissions for its commands in a guild a user has permissions to",
              "applications.entitlements": "allows your app to read entitlements for a user's applications",
              "applications.store.update": "allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications",
              "bot": "for oauth2 bots, this puts the bot in the user's selected guild by default",
              "connections": "allows /users/@me/connections to return linked third-party accounts",
              "dm_channels.read": "allows your app to see information about the user's DMs and group DMs - requires Discord approval",
              "email": "enables /users/@me to return an email",
              "gdm.join": "allows your app to join users to a group dm",
              "guilds": "allows /users/@me/guilds to return basic information about all of a user's guilds",
              "guilds.join": "allows /guilds/{guild.id}/members/{user.id} to be used for joining users to a guild",
              "guilds.members.read": "allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild",
              "identify": "allows /users/@me without email",
              "messages.read": "for local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates)",
              "openid": "for OpenID Connect, this allows your app to receive user id and basic profile information",
              "relationships.read": "allows your app to know a user's friends and implicit relationships - requires Discord approval",
              "role_connections.write": "allows your app to update a user's connection and metadata for the app",
              "rpc": "for local rpc server access, this allows you to control a user's local Discord client - requires Discord approval",
              "rpc.activities.write": "for local rpc server access, this allows you to update a user's activity - requires Discord approval",
              "rpc.notifications.read": "for local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approval",
              "rpc.screenshare.read": "for local rpc server access, this allows you to read a user's screenshare status- requires Discord approval",
              "rpc.screenshare.write": "for local rpc server access, this allows you to update a user's screenshare settings- requires Discord approval",
              "rpc.video.read": "for local rpc server access, this allows you to read a user's video status - requires Discord approval",
              "rpc.video.write": "for local rpc server access, this allows you to update a user's video settings - requires Discord approval",
              "rpc.voice.read": "for local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approval",
              "rpc.voice.write": "for local rpc server access, this allows you to update a user's voice settings - requires Discord approval",
              "voice": "allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval",
              "webhook.incoming": "this generates a webhook that is returned in the oauth token response for authorization code grants",
              "applications.commands.update": ""
            }
          }
        }
      }
    }
  },
  "security": [],
  "tags": [],
  "externalDocs": {
    "description": "Discord Developer Documentation",
    "url": "https://discord.com/developers/docs"
  }
}